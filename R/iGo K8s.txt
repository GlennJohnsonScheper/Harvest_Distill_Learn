Golang
Kubernetes
=======asdf1======== Go K8s
Generalities with Redundancy

0360: 0011: + Asymptotic Analysis
+ Worst, Average and Best Cases
+ Asymptotic Notations
+ Little o and little omega notations
+ Lower and Upper Bound Theory
+ Analysis of Loops
+ Solving Recurrences
+ Amortized Analysis
+ What does 'Space Complexity' mean ?
+ Pseudo-polynomial Algorithms
+ Polynomial Time Approximation Scheme
+ A Time Complexity Question

0296: 0011: + Searching Algorithms
+ Sorting Algorithms
+ Graph Algorithms
+ Pattern Searching
+ Geometric Algorithms
+ Mathematical
+ Bitwise Algorithms
+ Randomized Algorithms
+ Greedy Algorithms
+ Dynamic Programming
+ Divide and Conquer
+ Backtracking
+ Branch and Bound
+ All Algorithms

0247: 0011: + Campus Ambassador Program
+ School Ambassador Program
+ Project
+ Geek of the Month
+ Campus Geek of the Month
+ Placement Course
+ Competititve Programming
+ Testimonials
+ Student Chapter
+ Geek on the Top
+ Internship
+ Careers

0245: 0011: + Company Preparation
+ Top Topics
+ Practice Company Questions
+ Interview Experiences
+ Experienced Interviews
+ Internship Interviews
+ Competititve Programming
+ Design Patterns
+ System Design Tutorial
+ Multiple Choice Quizzes

0230: 0006: + Functions in Go Language
+ Variadic Functions in Go
+ Anonymous function in Go Language
+ main and init function in Golang
+ What is Blank Identifier(underscore) in Golang?
+ Defer Keyword in Golang
+ Methods in Golang

0200: 0011: + GATE Computer Science Notes
+ Last Minute Notes
+ GATE CS Solved Papers
+ GATE CS Original Papers and Official Keys
+ GATE 2021 Dates
+ GATE CS 2021 Syllabus
+ Important Topics for GATE CS

0195: 0011: We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

0193: 0011: + Mathematics
+ Operating System
+ DBMS
+ Computer Networks
+ Computer Organization and Architecture
+ Theory of Computation
+ Compiler Design
+ Digital Logic
+ Software Engineering

0184: 0011: + All DSA Problems
+ Problem of the Day
+ Interview Series: Weekly Contests
+ Bi-Wizard Coding: School Contests
+ Contests and Events
+ Practice SDE Sheet
+ Curated DSA Lists

0184: 0006: + Slices in Golang
+ Slice Composite Literal in Go
+ How to sort a slice of ints in Golang?
+ How to trim a slice of bytes in Golang?
+ How to split a slice of bytes in Golang?

0181: 0011: + Arrays
+ Linked List
+ Stack
+ Queue
+ Binary Tree
+ Binary Search Tree
+ Heap
+ Hashing
+ Graph
+ Advanced Data Structure
+ Matrix
+ Strings
+ All Data Structures

0163: 0006: + Pointers in Golang
+ Pointers to a Function in Go
+ Pointer to a Struct in Golang
+ Go Pointer to Pointer (Double Pointer)
+ Comparing Pointers in Golang

0155: 0006: + Goroutines - Concurrency in Golang
+ Select Statement in Go Language
+ Multiple Goroutines
+ Channel in Golang
+ Unidirectional Channel in Golang

0147: 0011: + Contribute
+ Write an Article
+ Improve an Article
+ Pick Topics to Write
+ Write Interview Experience
+ Internships
+ Video Internship

0147: 0006: + Golang
+ Go Programming Language (Introduction)
+ How to Install Go on Windows?
+ How to Install Golang on MacOS?
+ Hello World in Golang

0141: 0006: + Strings in Golang
+ How to Trim a String in Golang?
+ How to Split a String in Golang?
+ Different ways to compare Strings in Golang

0135: 0022: + Class 8 Maths Solution
+ Class 9 Maths Solution
+ Class 10 Maths Solution
+ Class 11 Maths Solution
+ Class 12 Maths Solution

0128: 0011: + Learn
+ Algorithms
+ Data Structures
+ SDE Cheat Sheet
+ Machine learning
+ CS Subjects
+ Video Tutorials
+ Courses

0125: 0006: + Identifiers in Go Language
+ Go Keywords
+ Data Types in Go
+ Go Variables
+ Constants- Go Language
+ Go Operators

0124: 0011: + Top 50 Array Problems
+ Top 50 String Problems
+ Top 50 Tree Problems
+ Top 50 Graph Problems
+ Top 50 DP Problems

0121: 0006: + Arrays in Go
+ How to Copy an Array into Another Array in Golang?
+ How to pass an Array to a Function in Golang?

0120: 0011: + ISRO CS Original Papers and Official Keys
+ ISRO CS Solved Papers
+ ISRO CS Syllabus for Scientist/Engineer Exam

0112: 0006: Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support.

0111: 0006: + Go Decision Making (if, if-else, Nested-if, if-else-if)
+ Loops in Go Language
+ Switch Statement in Go

0102: 0011: + DSA Live Classes
+ System Design
+ Java Backend Development
+ Full Stack LIVE
+ Explore More

0101: 0011: Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.

0099: 0006: + Structures in Golang
+ Nested Structure in Golang
+ Anonymous Structure and Field in Golang

0091: 0011: A-143, 9th Floor, Sovereign Corporate Tower,
Sector-136, Noida, Uttar Pradesh - 201305

0090: 0011: + Class 8 Notes
+ Class 9 Notes
+ Class 10 Notes
+ Class 11 Notes
+ Class 12 Notes

0089: 0011: + UGC NET CS Notes Paper II
+ UGC NET CS Notes Paper III
+ UGC NET CS Solved Papers

0086: 0011: + Competitive Programming
+ GATE Live Course 2023
+ Data Science
+ Explore More

0078: 0060: If you already have Go installed, you can install this version by running:

0078: 0011: + School Guide
+ Python Programming
+ Learn To Make Apps
+ Explore more

0078: 0011: + DSA- Self Paced
+ SDE Theory
+ All Development Courses
+ Explore More

0078: 0005: Converting a string variable into Boolean, Integer or Float type in Golang

0077: 0006: Publish APIs to developers, partners, and employees securely and at scale

0072: 0011: + Class 8 Notes
+ Class 9 Notes
+ Class 10 Notes
+ Class 11 Notes

0070: 0005: Kubernetes Cheat Sheet: Architecture, Components, and Top Commands

0069: 0006: Protect your data and code while the data is in use in the cloud.

0067: 0005: io.PipeWriter.CloseWithError() Function in Golang with Examples

0062: 0008: Fully managed environment for running containerized apps. 

0062: 0007: Top 40 Kubernetes Interview Questions and Answers for 2022

0061: 0011: Get access to ad-free content, doubt assistance and more!

0061: 0005: Kubernetes Architecture: A Comprehensive Beginner's Guide

0059: 0005: reflect.FieldByIndex() Function in Golang with Examples

0059: 0005: How to convert a slice of bytes in uppercase in Golang?

0059: 0005: How to convert a slice of bytes in lowercase in Golang?

0057: 0006: Quickly create powerful cloud apps for web and mobile

0057: 0006: Optimize app performance with high-scale load testing

0056: 0060: This is an unstable version of Go. Use with caution.

0056: 0011: + Software Design Patterns
+ System Design Tutorial

0056: 0005: Managed, always up-to-date SQL instance in the cloud

0056: 0005: atomic.StoreInt64() Function in Golang With Examples

0055: 0005: math.Float64bits() Function in Golang With Examples

0055: 0005: How to check equality of slices of bytes in Golang?

0054: 0011: + Class 8 Notes
+ Class 9 Notes
+ Class 10 Notes

0054: 0005: What is Kubernetes: Your Next Open Source Platform

0054: 0005: atomic.AddInt64() Function in Golang With Examples

0053: 0011: Complete Interview Preparation- Self Paced Course

0053: 0005: strings.Contains Function in Golang with Examples

0051: 0011: Data Structures & Algorithms- Self Paced Course

0050: 0011: Placement Assistance @ INR 0 with LIVE Courses

0050: 0005: math.Lgamma() Function in Golang with Examples

0049: 0011: Learn and code with the best industry experts

0049: 0005: time.Round() Function in Golang With Examples

0049: 0005: How to add a method to struct type in Golang?

0048: 0005: Golang program that uses fallthrough keyword

0048: 0005: Check if the given slice is sorted in Golang

0047: 0011: Come write articles for us and get featured

0047: 0006: Enterprise scale search for app development

0047: 0005: bits.Sub() Function in Golang with Examples

0046: 0018: + Not seeing what you're looking for? 
+ 

0044: 0011: Improve your Coding Skills with Practice

0041: 0011: + Hire with Us
+ Know about Jobathon

0041: 0011: @geeksforgeeks , Some rights reserved

0040: 0011: Come and find your dream job with us

0040: 0007: More related articles in Go Language

0040: 0006: This browser is no longer supported.

0038: 0007: // Creating and initializing a map

0037: 0006: + Azure Kubernetes Service (AKS) 

0035: 0011: My Personal Notes arrow_drop_up

0035: 0007: // Go program to illustrate the

0035: 0006: + Azure confidential computing 

0035: 0005: How to compare times in Golang?

0035: 0005: Getting Started With Kubernetes

0035: 0005: // Golang program to illustrate

0034: 0011: Start Your Coding Journey Now!

0034: 0011: + Apply for Jobs
+ Post a Job

0034: 0010: Easy Normal Medium Hard Expert

0032: 0005: // Go program to illustrate 

0031: 0011: + For Working Professionals

0031: 0007: Most popular in Go Language

0031: 0006: + Content Delivery Network 

0031: 0006: + Azure Cognitive Services 

0029: 0006: Google Kubernetes Engine 

0029: 0006: + Azure Cognitive Search 

0028: 0011: + Analysis of Algorithms

0028: 0010: Article Contributed By :

0025: 0011: + RD Sharma Solutions

0025: 0006: + Azure Load Testing 

0025: 0005: Skip to main content 

0023: 0013: What is Kubernetes?

0023: 0010: Vote for difficulty

0021: 0009: Sign In Register 

0021: 0006: Table of Contents

0020: 0021: Skip to content 

0020: 0007: Add a comment | 

0020: 0005: Import in GoLang

0019: 0006: In this article


=======asdf2======== Q\Go K8s\$\75d03d32746498daeace07d4746f154b.txt
https://www.geeksforgeeks.org/golang-tutorial-learn-go-programming-language/

+ Golang Tutorial - Learn Go Programming Language
+ Go Programming Language (Introduction)
+ How to Install Go on Windows?
+ How to Install Golang on MacOS?
+ Hello World in Golang
+ Identifiers in Go Language
+ Go Keywords
+ Data Types in Go
+ Go Variables
+ Constants- Go Language
+ Go Operators
+ Scope of Variables in Go
+ Go Decision Making (if, if-else, Nested-if, if-else-if)
+ Loops in Go Language
+ Loop Control Statements in Go Language
+ Switch Statement in Go
+ Arrays in Go
+ Slices in Golang
+ Functions in Go Language
+ Structures in Golang
+ Packages in Golang
+ Defer Keyword in Golang
+ Pointers in Golang
+ Methods in Golang
+ Interfaces in Golang

+ Golang Tutorial - Learn Go Programming Language
+ Go Programming Language (Introduction)
+ How to Install Go on Windows?
+ How to Install Golang on MacOS?
+ Hello World in Golang
+ Identifiers in Go Language
+ Go Keywords
+ Data Types in Go
+ Go Variables
+ Constants- Go Language
+ Go Operators
+ Scope of Variables in Go
+ Go Decision Making (if, if-else, Nested-if, if-else-if)
+ Loops in Go Language
+ Loop Control Statements in Go Language
+ Switch Statement in Go
+ Arrays in Go
+ Slices in Golang
+ Functions in Go Language
+ Structures in Golang
+ Packages in Golang
+ Defer Keyword in Golang
+ Pointers in Golang
+ Methods in Golang
+ Interfaces in Golang

Golang Tutorial - Learn Go Programming Language

+ Difficulty Level : Hard
+ Last Updated : 03 Feb, 2020

Golang or Go Programming Language is a statically-typed and procedural programming language having syntax similar to C language. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google. But they launched it in 2009 as an open-source programming language. It provides a rich standard library, garbage collection, and dynamic-typing capability and also provides support for the environment adopting patterns alike to dynamic languages. The latest version of the Golang is 1.13.1 released on 3rd September 2019. Here, we are providing a complete tutorial of Golang with proper examples.

Topics Covered:

+ Why Golang
+ Key Features
+ Installing Golang
+ Hello World! Program
+ Identifiers and Keywords
+ Data Types
+ Variables
+ Constants
+ Operators
+ if-else Statement
+ for loop
+ Loop Control Statements(break, goto, continue)
+ Switch Statement

+ Arrays
+ Slices
+ Functions
+ Structures
+ Packages
+ Defer Keyword
+ Pointers
+ Methods
+ Methods vs Functions
+ Interfaces
+ Concurrency - Goroutines
+ Channels
+ Select Statement

Why Golang?

The main purpose of designing Golang was to eliminate the problems of existing languages. So let us see the problems that we are facing with Python, Java, C/C++ programming languages:

+ Python: It is easy to use but slow in compare to Golang.
+ Java: It has very complex type system.
+ C/C++: It has slow compilation time as well as complex type system.
+ Also, all these languages were designed when multi-threading applications were rare, so not much effective to highly scalable, concurrent and parallel applications.
+ Threading consumes 1MB whereas Goroutine consumes 2KB of memory, hence at the same time, we can have millions of goroutine triggered.

Key Features

Downloading and Installing Golang

Before we begin with the installation of Go, it is good to check if it might be already installed on your System. To check if your device is preinstalled with Golang or not, just go to the Command line(For Windows, search for cmd in the Run dialog( + R).

Now run the following command:

go version

If Golang is already installed, it will generate a message with all the details of the Golang's version available, otherwise, if Golang is not installed then an error will arise stating Bad command or file name

Before starting with the installation process, you need to download it. For that, all versions of Go for Windows are available on golang.org.

Download the Golang according to your system architecture and follow the further instructions for the installation of Golang.

Step 1: After downloading, unzip the downloaded archive file. After unzipping you will get a folder named go in the current directory.

Step 2: Now copy and paste the extracted folder wherever you want to install this. Here we are installing in C drive.

Step 3: Now set the environment variables. Right click on My PC and select Properties. Choose the Advanced System Settings from the left side and click on Environment Variables as shown in the below screenshots.

Step 4: Click on Path from the system variables and then click Edit. Then Click New and then add the Path with bin directory where you have pasted the Go folder. Here we are editing the path C:\go\bin and click Ok as shown in the below screenshots.

Step 5: Now create a new user variable which tells Go command where Golang libraries are present. For that click on New on User Variables as shown in the below screenshots.

Now fill the Variable name as GOROOT and Variable value is the path of your Golang folder. So here Variable Value is C:\go\. After Filling click OK.

After that Click Ok on Environment Variables and your setup is completed. Now Let's check the Golang version by using the command go version on command prompt.

After completing the installation process, any IDE or text editor can be used to write Golang Codes and Run them on the IDE or the Command prompt with the use of command:

go run filename.go

Executing Hello World! Program

To run a Go program you need a Go compiler. In Go compiler, first you create a program and save your program with extension .go, for example, first.go.

// First Go program

fmt.Println("!... Hello World ...!")

!... Hello World ...!

Now we run this first.go file in the go compiler using the following command, i.e:

$ go run first.go

For more details about the different terms used in this program, you can visit Hello World! in Golang

Identifiers and Keywords

Identifiers are the user-defined name of the program components. In Go language, an identifier can be a variable name, function name, constant, statement labels, package name, or types.

// Valid identifiers:
_geeks23
geeks
gek23sd
Geeks
geeKs
geeks_geeks

// Invalid identifiers:
212geeks
if
default

Keywords or Reserved words are the words in a language that are used for some internal process or represent some predefined actions. These words are therefore not allowed to use as an identifier. Doing this will result in a compile-time error. There are total 25 keywords present in the Go language as follows:

// Go program to illustrate 

// the use of keywords

// Here package keyword is used to 

// include the main package

// in the program

// import keyword is used to 

// import "fmt" in your package

// func is used to

// create function

// Here, var keyword is used 

// to create variables

// Pname, Lname, and Cname 

// are the valid identifiers

var Pname = "GeeksforGeeks" 

var Lname = "Go Language" 

var Cname = "Keywords"

fmt.Printf("Portal name: %s", Pname)

fmt.Printf("\nLanguage name: %s", Lname)

fmt.Printf("\nChapter name: %s", Cname)

Portal name: GeeksforGeeks
Language name: Go Language
Chapter name: Keywords

Data Types

Data types specify the type of data that a valid Go variable can hold. In Go language, the type is divided into four categories which are as follows:

+ Basic type: Numbers, strings, and booleans come under this category.
+ Aggregate type: Array and structs come under this category.
+ Reference type: Pointers, slices, maps, functions, and channels come under this category.
+ Interface type

Here, we will discuss Basic Data Types in the Go language. The Basic Data Types are further categorized into three subcategories which are:

+ Numbers
+ Booleans
+ Strings

Numbers: In Go language, numbers are divided into three sub-categories that are:

+ Integers: In Go language, both signed and unsigned integers are available in four different sizes as shown in the below table. The signed int is represented by int and the unsigned integer is represented by uint.

+ Floating-Point Numbers: In Go language, floating-point numbers are divided into two categories as shown in the below table:

+ Complex Numbers: The complex numbers are divided into two parts are shown in the below table. float32 and float64 are also part of these complex numbers. The in-built function creates a complex number from its imaginary and real part and in-built imaginary and real function extract those parts.

// Golang program to illustrate

// the use of integers, floating

// and complex numbers

// Using 8-bit unsigned int

var X uint8 = 225

fmt.Println(X+1, X)

// Using 16-bit signed int

var Y int16 = 32767

fmt.Println(Y+2, Y-2)

a := 20.45

b := 34.89

var m complex128 = complex(6, 2)

var n complex64 = complex(9, 2)

// Subtraction of two

// floating-point number

c := b - a

// Display the result

fmt.Printf("Result is: %f\n", c)

// Display the type of c variable

fmt.Printf("The type of c is : %T\n", c)

fmt.Println(m)

fmt.Println(n)

// Display the type

fmt.Printf("The type of m is %T and "+

"the type of n is %T", m, n)

226 225
-32767 32765
Result is: 14.440000
The type of c is : float64
(6+2i)
(9+2i)
The type of m is complex128 and the type of n is complex64

Booleans and Strings:

The boolean data type represents only one bit of information either true or false. The values of type boolean are not converted implicitly or explicitly to any other type.
The string data type represents a sequence of Unicode code points. Or in other words, we can say a string is a sequence of immutable bytes, means once a string is created you cannot change that string. A string may contain arbitrary data, including bytes with zero value in the human-readable form.

// Go program to illustrate

// the use of booleans and

// strings

// variables

str1 := "GeeksforGeeks"

str2 := "geeksForgeeks"

result1 := str1 == str2

// Display the result

fmt.Println(result1)

// Display the type of

// result1

fmt.Printf("The type of result1 is %T\n", result1)

// str variable which stores strings

str := "GeeksforGeeks"

// Display the length of the string

fmt.Printf("Length of the string is: %d", len(str))

// Display the string

fmt.Printf("\nString is: %s", str)

// Display the type of str variable

fmt.Printf("\nType of str is: %T", str)

false
The type of result1 is bool
Length of the string is: 13
String is: GeeksforGeeks
Type of str is: string

Variables

A Variable is a placeholder of the information which can be changed at runtime. And variables allow to Retrieve and Manipulate the stored information.

Rules for Naming Variables:

+ Variable names must begin with a letter or an underscore(_). And the names may contain the letters 'a-z' or 'A-Z' or digits 0-9 as well as the character '_'.

Geeks, geeks, _geeks23 // valid variable
123Geeks, 23geeks // invalid variable

+ A variable name should not start with a digit.

234geeks // illegal variable 

+ The name of the variable is case sensitive.

geeks and Geeks are two different variables

+ Keywords is not allowed to use as a variable name.
+ There is no limit on the length of the name of the variable, but it is advisable to use an optimum length of 4 - 15 letters only.

There are two ways to declare a variable in Golang as follows:

1. Using var Keyword: In Go language, variables are created using var keyword of a particular type, connected with name and provide its initial value.

var variable_name type = expression

// Go program to illustrate 

// the use of var keyword

// Variable declared and 

// initialized without the 

// explicit type

var myvariable1 = 20

// Display the value and the

// type of the variables

fmt.Printf("The value of myvariable1 is : %d\n",

myvariable1)

fmt.Printf("The type of myvariable1 is : %T\n",

myvariable1)

The value of myvariable1 is : 20
The type of myvariable1 is : int

To read more about the var keyword, you can refer to the article var keyword in Golang

2. Using short variable declaration: The local variables which are declared and initialize in the functions are declared by using short variable declaration.

variable_name:= expression

Note: Please don't confuse in between := and = as := is a declaration and = is assignment.

// short variable declaration 

// Using short variable declaration

myvar1 := 39 

// Display the value and type of the variable

fmt.Printf("The value of myvar1 is : %d\n", myvar1)

fmt.Printf("The type of myvar1 is : %T\n", myvar1)

The value of myvar1 is : 39
The type of myvar1 is : int

To read more about the short variable declaration keyword, you can refer to the article Short Variable Declaration Operator(:=) in Golang

Constants

As the name constants suggest means fixed, in programming languages also it is same i.e., once the value of constant is defined it cannot be modified further. There can be any basic data types of constant like an integer constant, a floating constant, a character constant, or a string literal.

How to declare?
Constant are declared like variables but in using a const keyword as a prefix to declare constant with a specific type. It cannot be declare using := syntax.

// Golang program to illustrate 

// the constants

const PI = 3.14

const GFG = "GeeksforGeeks"

fmt.Println("Hello", GFG)

fmt.Println("Happy", PI, "Day")

const Correct = true

fmt.Println("Go rules?", Correct)

Hello GeeksforGeeks
Happy 3.14 Day
Go rules? true

To read more about Constants in Golang, you can refer to the article Constants in Golang.

Operators

Operators are the foundation of any programming language. Thus the functionality of the Go language is incomplete without the use of operators. Operators allow us to perform different kinds of operations on operands. In Go language, operators Can be categorized based upon their different functionality:

+ Arithmetic Operators
+ Relational Operators
+ Logical Operators
+ Bitwise Operators
+ Assignment Operators
+ Misc Operators

// Golang program to illustrate

// the use of operators

p := 23

q := 60

// Arithmetic Operator - Addition

result1 := p + q

fmt.Printf("Result of p + q = %d\n", result1)

// Relational Operators - '=='(Equal To)

result2 := p == q

fmt.Println(result2)

// Relational Operators - '!='(Not Equal To)

result3 := p != q

fmt.Println(result3)

// Logical Operators

if p != q && p <= q {

fmt.Println("True")

if p != q || p <= q {

fmt.Println("True")

if !(p == q) {

fmt.Println("True")

// Bitwise Operators - & (bitwise AND)

result4 := p & q

fmt.Printf("Result of p & q = %d\n", result4)

// Assignment Operators - "="(Simple Assignment)

p = q

fmt.Println(p)

Result of p + q = 83
false
true
True
True
True
Result of p & q = 20
60

Control Flow

Decision Making Statements

Decision Making in programming is similar to decision making in real life. A piece of code is executed when the given condition is fulfilled. Sometimes these are also termed as the Control flow statements. A programming language uses control statements to control the flow of execution of the program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.

+ if : It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.

if(condition) {

// Statements to execute if
// condition is true
}

+ if-else : if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.

if (condition) {

// Executes this block if
// condition is true
} else {

// Executes this block if
// condition is false
}

+ Nested if : Nested if statements mean an if statement inside an if statement. Yes, Golang allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.

if (condition1) {

// Executes when condition1 is true

if (condition2) {

// Executes when condition2 is true
}
}

+ if-else-if Ladder : Here, a user can decide among multiple options. The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.

Important Points:

+ if statement can have zero or one else's and it must come after any else if's.
+ if statement can have zero to many else if's and it must come before the else.
+ None of the remaining else if's or else's will be tested if an else if succeeds,

if(condition_1) {

// this block will execute 
// when condition_1 is true

} else if(condition_2) {

// this block will execute 
// when condition2 is true
}
.
.
. else {

// this block will execute when none
// of the condition is true
}

Example 1: To demonstrate the if and if-else statement

// Golang program to illustrate

// the use of if and if-else

// statement

// taking local variables

var a int = 100

var b int = 175

// using if statement for

// checking the condition

if a%2 == 0 {

// print the following if

// condition evaluates to true

fmt.Printf("Even Number\n")

if b%2 == 0 {

fmt.Printf("Even Number")

} else {

fmt.Printf("Odd Number")

Even Number
Odd Number

Example 2: To demonstrate the Nested-if and if-else-if ladder statement

// Golang program to illustrate

// the use of nested if and

// if-else-if ladder statement

// statement

// taking two local variable

var v1 int = 400

var v2 int = 700

// ----- Nested if Statement -------

// using if statement

if v1 == 400 {

// if condition is true then

// check the following

if v2 == 700 {

// if condition is true

// then display the following

fmt.Printf("Value of v1 is 400 and v2 is 700\n")

// ----------- if-else-if ladder

// checking the condition

if v1 == 100 {

// if condition is true then

// display the following */

fmt.Printf("Value of v1 is 100\n")

} else if v1 == 200 {

fmt.Printf("Value of a is 20\n")

} else if v1 == 300 {

fmt.Printf("Value of a is 300\n")

} else {

// if none of the conditions is true

fmt.Printf("None of the values is matching\n")

Value of v1 is 400 and v2 is 700
None of the values is matching

for loop

Go language contains only a single loop that is for-loop. A for loop is a repetition control structure that allows us to write a loop that is executed a specific number of times. A simple for loop is similar that we use in other programming languages like C, C++, Java, C#, etc.
Syntax:

for initialization; condition; post{
// statements....
}

Here,

+ The initialization statement is optional and executes before for loop starts. The initialization statement is always in a simple statement like variable declarations, increment or assignment statements, or function calls.
+ The condition statement holds a boolean expression, which is evaluated at the starting of each iteration of the loop. If the value of the conditional statement is true, then the loop executes.
+ The post statement is executed after the body of the for-loop. After the post statement, the condition statement evaluates again if the value of the conditional statement is false, then the loop ends.

// Go program to illustrate the 

// use of simple for loop 

// for loop 

// This loop starts when i = 0 

// executes till i<4 condition is true

// post statement is i++

for i := 0; i < 4; i++{

fmt.Printf("GeeksforGeeks\n") 

GeeksforGeeks
GeeksforGeeks
GeeksforGeeks
GeeksforGeeks

Note: This for loop can be used as Infinite loop and while loop. To read more about for loop you can refer to the article Loops in Golang.

Loop Control Statements

Loop control statements in the Go language are used to change the execution of the program. When the execution of the given loop left its scope, then the objects that are created within the scope are also demolished. The Go language supports 3 types of loop control statements:

+ break
+ goto
+ continue

break Statement

The break statement is used to terminate the loop or statement in which it presents. After that, the control will pass to the statements that present after the break statement, if available. If the break statement present in the nested loop, then it terminates only those loops which contains break statement.

// Go program to illustrate 

// the use of break statement

for i:=0; i<5; i++{

fmt.Println(i)

// For loop breaks when the value of i = 3

if i == 3{

break;

0
1
2
3

goto Statement

This statement is used to transfer control to the labeled statement in the program. The label is the valid identifier and placed just before the statement from where the control is transferred. Generally, goto statement is not used by the programmers because it is difficult to trace the control flow of the program.

// Go program to illustrate 

// the use of goto statement

var x int = 0

// for loop work as a while loop

Lable1: for x < 8 {

if x == 5 {

// using goto statement

x = x + 1;

goto Lable1

fmt.Printf("value is: %d\n", x);

x++; 

value is: 0
value is: 1
value is: 2
value is: 3
value is: 4
value is: 6
value is: 7

continue Statement

This statement is used to skip over the execution part of the loop on a certain condition. After that, it transfers the control to the beginning of the loop. It skips its following statements and continues with the next iteration of the loop.

// Go program to illustrate 

// the use of continue statement

var x int = 0

// for loop work as a while loop

for x < 8 {

if x == 5 {

// skip two iterations

x = x + 2;

continue;

fmt.Printf("value is: %d\n", x);

x++; 

value is: 0
value is: 1
value is: 2
value is: 3
value is: 4
value is: 7

Switch Statement

A switch statement is a multiway branch statement. It provides an efficient way to transfer the execution to different parts of a code based on the value(also called case) of the expression. Even we can add multiple values in the case statement by using a comma.

switch expression {
case value_1:
statement......1
case value_2:
statement......2
case value_n:
statement......n
default:
statement......default
}

// Go program to illustrate the 

// concept of switch statement 

package main 

func main() { 

var value string = "five"

// Switch statement without default statement 

// Multiple values in case statement 

switch value { 

case "one": 

fmt.Println("C#") 

case "two", "three": 

fmt.Println("Go") 

case "four", "five", "six": 

fmt.Println("Golang") 

Golang

To read more about switch statement you can refer to the article Switch Statement in Golang

An array is a fixed-length sequence that is used to store homogeneous elements in the memory. Due to their fixed length array are not much popular like Slice in Go language. In an array, you are allowed to store zero or more than zero elements in it. The elements of the array are indexed by using the [] index operator with their zero-based position, means the index of the first element is array[0] and the index of the last element is array[len(array)-1].

There are two ways to create an array in Golang as follows:

1. Using var keyword: In Go language, an array is created using the var keyword of a particular type with name, size, and elements.

Var array_name[length]Type
or
var array_name[length]Typle{item1, item2, item3, ...itemN}

In Go language, arrays are mutable, so that you can use array[index] syntax to the left-hand side of the assignment to set the elements of the array at the given index.

Var array_name[index] = element

2. Using shorthand declaration: In Go language, arrays can also declare using the shorthand declaration. It is more flexible than the above declaration.

array_name:= [length]Type{item1, item2, item3, ...itemN}

// Golang program to illustrate the arrays

// Creating an array of string type

// Using var keyword

var myarr [2]string

// Elements are assigned using index

myarr[0] = "GFG"

myarr[1] = "GeeksforGeeks"

// Accessing the elements of the array

// Using index value

fmt.Println("Elements of Array:")

fmt.Println("Element 1: ", myarr[0])

fmt.Println("Element 2: ", myarr[1])

// Shorthand declaration of array

arr := [4]string{"geek", "gfg", "Geeks1231", "GeeksforGeeks"}

// Accessing the elements of

// the array Using for loop

fmt.Println("\nElements of the array:")

for i := 0; i < 3; i++ {

fmt.Println(arr[i])

Elements of Array:
Element 1: GFG
Element 2: GeeksforGeeks

Elements of the array:
geek
gfg
Geeks1231

To read more about arrays, you can refer to the article Arrays in Golang

Slice is more powerful, flexible, convenient than an array, and is a lightweight data structure. Slice is a variable-length sequence which stores elements of a similar type, you are not allowed to store different type of elements in the same slice. It is just like an array having an index value and length, but the size of the slice is resized they are not in fixed-size just like an array. Internally, slice and an array are connected, a slice is a reference to an underlying array. It is allowed to store duplicate elements in the slice. The first index position in a slice is always 0 and the last one will be (length of slice - 1).

Syntax for Declaration:

[]T
or 
[]T{}
or 
[]T{value1, value2, value3, ...value n}

Here, T is the type of the elements. For example:

var my_slice[]int

Pointer, Length, and Capacity are the main three components of the slice.

// Golang program to illustrate

// the working of the slice

// Creating an array

arr := [7]string{"This", "is", "the", "tutorial",

"of", "Go", "language"}

// Display array

fmt.Println("Array:", arr)

// Creating a slice

myslice := arr[1:6]

// Display slice

fmt.Println("Slice:", myslice)

// Display length of the slice

fmt.Printf("Length of the slice: %d", len(myslice))

// Display the capacity of the slice

fmt.Printf("\nCapacity of the slice: %d", cap(myslice))

Array: [This is the tutorial of Go language]
Slice: [is the tutorial of Go]
Length of the slice: 5
Capacity of the slice: 6

Explanation: In the above example, we create a slice from the given array. Here the pointer of the slice pointed to index 1 because the lower bound of the slice is set to one so it starts accessing elements from index 1. The length of the slice is 5, which means the total number of elements present in the slice is 5 and the capacity of the slice 6 means it can store a maximum of 6 elements in it.

To read more about slices you can refer to the article Slices in Golang

Functions

Functions are generally the block of codes or statements in a program that gives the user the ability to reuse the same code which ultimately saves the excessive use of memory, acts as a time saver and more importantly, provides better readability of the code. So basically, a function is a collection of statements that perform some specific task and return the result to the caller. A function can also perform some specific task without returning anything.

func function_name(Parameter-list)(Return_type){
// function body.....
}

You can return multiple values from the function. Also, the parameters and returns types are optional.

// use of function

// area() is used to find the 

// area of the rectangle

// area() function two parameters,

// i.e, length and width

func area(length, width int)int{

Ar := length* width

return Ar

// Display the area of the rectangle

// with method calling

fmt.Printf("Area of rectangle is : %d", area(12, 10))

Area of rectangle is : 120

To read more about the Functions you can refer to the article Functions in Golang.

Structures

It is a user-defined type that allows to group/combine items of possibly different types into a single type. It can be termed as a lightweight class that does not support inheritance but supports composition.

First, you need to declare a structure type using the below syntax:

type struct_name struct {
variable_1 type_of_variable_1
variable_2 type_of_variable_2
variable_n type_of_variable_3
}

Second, you have to create variables of that type to store values.

var variable_name struct_name

// Golang program to show how to

// declare and define the struct

// Defining a struct type

type Address struct {

Name string

city string

Pincode int

// Declaring a variable of a `struct` type

// All the struct fields are initialized 

// with their zero value

var a Address 

fmt.Println(a)

// Declaring and initializing a

// struct using a struct literal

a1 := Address{"Akshay", "Dehradun", 3623572}

fmt.Println("Address1: ", a1)

// Naming fields while 

// initializing a struct

a2 := Address{Name: "Anikaa", city: "Ballia",

Pincode: 277001}

fmt.Println("Address2: ", a2)

// Uninitialized fields are set to

// their corresponding zero-value

a3 := Address{Name: "Delhi"}

fmt.Println("Address3: ", a3)

{ 0}
Address1: {Akshay Dehradun 3623572}
Address2: {Anikaa Ballia 277001}
Address3: {Delhi 0}

To access individual fields of a struct you have to use dot (.) operator. To read more about structures you can refer to the article Structure in Golang.

Packages

The purpose of a package is to design and maintain a large number of programs by grouping related features together into single units so that they can be easy to maintain and understand and independent of the other package programs. In Go language, every package is defined with a different name and that name is close to their functionality like "strings" package and it contains methods and functions that only related to strings.

// concept of packages

// Package declaration

// Importing multiple packages

import (

"bytes"

"fmt"

"sort"

)

// Creating and initializing slice

// Using shorthand declaration

slice_1 := []byte{'*', 'G', 'e', 'e', 'k', 's', 'f',

'o', 'r', 'G', 'e', 'e', 'k', 's', '^', '^'}

slice_2 := []string{"Gee", "ks", "for", "Gee", "ks"}

// Displaying slices

fmt.Println("Original Slice:")

fmt.Printf("Slice 1 : %s", slice_1)

fmt.Println("\nSlice 2: ", slice_2)

// Trimming specified leading

// and trailing Unicode points

// from the given slice of bytes

// Using Trim function

res := bytes.Trim(slice_1, "*^")

fmt.Printf("\nNew Slice : %s", res)

// Sorting slice 2

// Using Strings function

sort.Strings(slice_2)

fmt.Println("\nSorted slice:", slice_2)

Original Slice:
Slice 1 : *GeeksforGeeks^^
Slice 2: [Gee ks for Gee ks]

New Slice : GeeksforGeeks
Sorted slice: [Gee Gee for ks ks]

Defer

It is keyword which is delay the execution of the function or method or an anonymous method until the nearby functions returns. Or in other words, defer function or method call arguments evaluate instantly, but they execute until the nearby functions returns.

// concept of the defer statement

// Functions

func mul(a1, a2 int) int {

res := a1 * a2

fmt.Println("Result: ", res)

return 0

func show() {

fmt.Println("Hello!, GeeksforGeeks")

// Calling mul() function

// Here mul function behaves

// like a normal function

mul(23, 45)

// Calling mul()function

// Using defer keyword

// Here the mul() function

// is defer function

defer mul(23, 56)

// Calling show() function

show()

Result: 1035
Hello!, GeeksforGeeks
Result: 1288

Explanation: In the above example we have two functions named as mul() and show() function. Where show() function call normally in the main() function, but we call mul() function in two different ways:

+ First, we call mul function like the normal function, i.e, mul(23, 45) and executes when the function called(Output: Result : 1035 ).
+ Second, we call mul() function as a defer function using defer keyword, i.e, defer mul(23, 56) and it executes(Output: Result: 1288 ) when all the surrounding methods return.

To read more about this you can refer to the keyword Defer Keyword in Golang.

It is a variable that is used to store the memory address of another variable. Pointers in Golang is also termed as the special variables. Before we start there are two important operators which we will use in pointers i.e.

* Operator also termed as the dereferencing operator used to declare pointer variable and access the value stored in the address.

& operator termed as address operator used to returns the address of a variable or to access the address of a variable to a pointer.

Declaring a pointer:

var pointer_name *Data_Type

Example: Below is a pointer of type string which can store only the memory addresses of string variables.

var s *string

Initialization of Pointer: To do this you need to initialize a pointer with the memory address of another variable using the address operator as shown in the below example:

// normal variable declaration
var a = 45

// Initialization of pointer s with 
// memory address of variable a
var s *int = &a

// Golang program to demonstrate the declaration

// and initialization of pointers

func main()

// taking a normal variable

var x int = 5748

// declaration of pointer

var p* int

// initialization of pointer

p

= &x

// displaying the result

fmt.Println("Value stored in x = ", x)

fmt.Println("Address of x = ", &x)

fmt.Println("Value stored in variable p = ", p)

Value stored in x = 5748
Address of x = 0x414020
Value stored in variable p = 0x414020

To read more about the pointers you can refer to the article Pointers in Golang.

Methods

Methods are not functions in Golang. The method contains a receiver argument in it that is used to access the properties of the receiver. The receiver can be of struct type or non-struct type. When you create a method in your code the receiver and receiver type must present in the same package. And you are not allowed to create a method in which the receiver type is already defined in another package including inbuilt type like int, string, etc. If you try to do so, then the compiler will give an error.

func(reciver_name Type) method_name(parameter_list)(return_type){
// Code
}

Here, the receiver can be accessed within the method.

// method

// Author structure

type author struct {

name string

branch string

particles int

salary int

// Method with a receiver

// of author type

func (a author) show() {

fmt.Println("Author's Name: ", a.name)

fmt.Println("Branch Name: ", a.branch)

fmt.Println("Published articles: ", a.particles)

fmt.Println("Salary: ", a.salary)

// Initializing the values

// of the author structure

res := author{

name: "Sona",

branch: "CSE",

particles: 203,

salary: 34000,

// Calling the method

res.show()

Author's Name: Sona
Branch Name: CSE
Published articles: 203
Salary: 34000

Methods vs Functions

{Method}{Function}

{It contain receiver.}{It does not contain receiver.}

{It can accept both pointer and value.}{It cannot accept both pointer and value.}

{Methods of the same name but different types can be defined in the program.}{Functions of the same name but different type are not allowed to define in the program.}

To read more about methods you can refer to the article Methods in Golang.

Interfaces

Go language interfaces are different from other languages. In Go language, the interface is a custom type that is used to specify a set of one or more method signatures and the interface is abstract, so you are not allowed to create an instance of the interface. But you are allowed to create a variable of an interface type and this variable can be assigned with a concrete type value that has the methods the interface requires.

type interface_name interface{

// Method signatures

// Golang program illustrates how

// to implement an interface

// Creating an interface

type tank interface {

// Methods

Tarea() float64

Volume() float64

type myvalue struct {

radius float64

height float64

// Implementing methods of

// the tank interface

func (m myvalue) Tarea() float64 {

return 2*m.radius*m.height +

2*3.14*m.radius*m.radius

func (m myvalue) Volume() float64 {

return 3.14 * m.radius * m.radius * m.height

// Main Method

// Accessing elements of

// the tank interface

var t tank

t = myvalue{10, 14}

fmt.Println("Area of tank :", t.Tarea())

fmt.Println("Volume of tank:", t.Volume())

Area of tank : 908
Volume of tank: 4396

To read more, please refer to the article Interfaces in Golang.

Concurrency - Goroutines

A Goroutine is a function or method which executes independently and simultaneously in connection with any other Goroutines present in your program. Or in other words, every concurrently executing activity in Go language is known as a Goroutines. You can consider a Goroutine like a light weighted thread. Every program contains at least a single Goroutine and that Goroutine is known as the main Goroutine. All the Goroutines are working under the main Goroutines if the main Goroutine terminated, then all the goroutine present in the program also terminated. Goroutine always works in the background.

You can create your own Goroutine simply by using go keyword as a prefixing to the function or method call as shown in the below syntax:

func name(){
// statements
}

// using go keyword as the 
// prefix of your function call
go name()

// Go program to illustrate

// the concept of Goroutine

func display(str string) {

for w := 0; w < 6; w++ {

fmt.Println(str)

// Calling Goroutine

go display("Welcome")

// Calling normal function

display("GeeksforGeeks")

GeeksforGeeks
GeeksforGeeks
GeeksforGeeks
GeeksforGeeks
GeeksforGeeks
GeeksforGeeks

In the above example, we simply create a display() function and then call this function in two different ways first one is a Goroutine, i.e. go display("Welcome") and another one is a normal function, i.e. display("GeeksforGeeks"). But there is a problem, it only displays the result of the normal function that does not display the result of Goroutine because when a new Goroutine executed, the Goroutine call return immediately. The control does not wait for Goroutine to complete their execution just like normal function they always move forward to the next line after the Goroutine call and ignores the value returned by the Goroutine. So, to executes a Goroutine properly, we made some changes in our program as shown in the below code:

Modified Example:

// Go program to illustrate the concept of Goroutine

import (

"fmt"

"time"

)

func display(str string) {

for w := 0; w < 6; w++ {

time.Sleep(1 * time.Second)

fmt.Println(str)

// Calling Goroutine

go display("Welcome")

// Calling normal function

display("GeeksforGeeks")

Welcome
GeeksforGeeks
GeeksforGeeks
Welcome
Welcome
GeeksforGeeks
GeeksforGeeks
Welcome
Welcome
GeeksforGeeks
GeeksforGeeks

We added the Sleep() method in our program which makes the main Goroutine sleeps for 1 second in between 1-second the new Goroutine executes, displays "welcome" on the screen, and then terminate after 1-second main Goroutine re-schedule and perform its operation. This process continues until the value of the z<6 after that the main Goroutine terminates. Here, both Goroutine and the normal function work concurrently.

To read more about the Goroutines you can refer to the article Goroutines

Channels

A channel is a technique which allows to let one goroutine to send data to another goroutine. By default channel is bidirectional, means the goroutines can send or receive data through the same channel as shown in the below image:

In Go language, a channel is created using chan keyword and it can only transfer data of the same type, different types of data are not allowed to transport from the same channel.

var Channel_name chan Type

You can also create a channel using make() function using a shorthand declaration.

channel_name:= make(chan Type)

The below statement indicates that the data(element) send to the channel(Mychannel) with the help of a <- operator.

Mychannel <- element

The below statement indicates that the element receives data from the channel(Mychannel).

element := <-Mychannel

If the result of the received statement is not going to use is also a valid statement. You can also write a receive statement as:

<-Mychannel

// Go program to illustrate send

// and receive operation

func myfunc(ch chan int) {

fmt.Println(234 + <-ch)

fmt.Println("start Main method")

// Creating a channel

ch := make(chan int)

go myfunc(ch)

ch <- 23

fmt.Println("End Main method")

start Main method
257
End Main method

To read more, you can refer to the article Channels in Golang.

Select Statement

The select statement is just like switch statement, but in the select statement, case statement refers to communication, i.e. sent or receive operation on the channel.

select{

case SendOrReceive1: // Statement
case SendOrReceive2: // Statement
case SendOrReceive3: // Statement
.......
default: // Statement

// concept of select statement

import("fmt"

"time")

// function 1

func portal1(channel1 chan string) {

time.Sleep(3*time.Second)

channel1 <- "Welcome to channel 1"

// function 2

func portal2(channel2 chan string) {

time.Sleep(9*time.Second)

channel2 <- "Welcome to channel 2"

// main function

func main(){

// Creating channels

R1:= make(chan string)

R2:= make(chan string)

// calling function 1 and 

// function 2 in goroutine

go portal1(R1)

go portal2(R2)

select{

// case 1 for portal 1

case op1:= <- R1:

fmt.Println(op1)

// case 2 for portal 2

case op2:= <- R2:

fmt.Println(op2)

Welcome to channel 1

Explanation: In the above program, portal 1 sleep for 3 seconds and portal 2 sleep for 9 seconds after their sleep time over they will ready to proceed. Now, select statement waits till their sleep time, when the portal 2 wakes up, it selects case 2 and prints "Welcome to channel 1". If the portal 1 wakes up before portal 2 then the output is "welcome to channel 2".

Go Programming Language (Introduction)

6 Best Books to Learn Go Programming Language

11, May 22

Top 7 Reasons to Learn Golang

16, Aug 20

Object-Oriented Programming in GoLang

18, Jun 20

Go Programming Language (Introduction)

25, Apr 18

Difference Between Go and Python Programming Language

12, Aug 19

Auto Format Go Programming Language Source Code with gofmt

08, May 22

How to convert a slice of bytes in uppercase in Golang?

Golang program that uses fallthrough keyword

18, Apr 20

math.Lgamma() Function in Golang with Examples

13, Apr 20

math.Float64bits() Function in Golang With Examples

How to check equality of slices of bytes in Golang?

21, Aug 19

atomic.AddInt64() Function in Golang With Examples

10, Mar 20

atomic.StoreInt64() Function in Golang With Examples

15, Mar 20

reflect.FieldByIndex() Function in Golang with Examples

strings.Contains Function in Golang with Examples

bits.Sub() Function in Golang with Examples

How to convert a slice of bytes in lowercase in Golang?

io.PipeWriter.CloseWithError() Function in Golang with Examples

Import in GoLang

20, Jul 20

time.Round() Function in Golang With Examples

06, Apr 20

How to add a method to struct type in Golang?

11, Jun 20

Converting a string variable into Boolean, Integer or Float type in Golang

Check if the given slice is sorted in Golang

26, Aug 19

How to compare times in Golang?

Anshul_Aggarwal

@Anshul_Aggarwal

Current difficulty : Hard

+ Go Language

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ strings.Contains Function in Golang with Examples
+ fmt.Sprintf() Function in Golang With Examples

+ Time Formatting in Golang
+ Golang Maps
+ How to Split a String in Golang?
+ Different ways to compare Strings in Golang
+ How to convert a string in lower case in Golang?


=======asdf3======== Q\Go K8s\$\07c351daac69d5f0a068a0eb89b0ca42.txt
https://www.educative.io/blog/golang-tutorial
TITLE: Getting started with Golang: A tutorial for beginners

Golang, also known as Go, is an open-source programming language created by Google developers Robert Griesemer, Ken Thompson, and Rob Pike in 2007. It was created for ease, and many developers praise it for building simple, reliable programs.

Since its release, Golang has gained increasing popularity. In 2009 and 2016, it was pronounced the language of the year. It was given the 10th place ranking in 2018, and it continues to move its way into major organizations.

This language has a lot to offer. Anyone wanting to work at Google should know this language. That's why today, I want to walk you through a deep-dive tutorial to the Go programming language.

Today we will discuss:

+ Overview of Golang features 
+ Basic terms and concepts of Go 
+ Intermediate concepts of Go 
+ Advanced concepts of Go 
+ Recursion in Go: Goroutine 
+ Wrapping up 

Master Golang Programming Fundamentals 

Get ready for a career in web development by learning Google's Golang language.

The Way to Go

Overview of Golang features

This general-purpose programming language includes many great features from other programming languages. It is compiled, simple, concurrent, statically-typed, and efficient. Go improves upon these aspects of programming languages and simplifies the working environment for developers.

Go is essentially an imperative language that accommodates concurrency concepts. It brings some of the great features of object-oriented programming, like interfaces, but does not include some of the pitfalls. Go was intentionally designed to exclude the more "heavy-weight" features of OOP.

In that respect, Go is hybrid, utilizing the best features of many languages with a clear, expressive type system while remaining lightweight and easy to learn.

Go can be used for all kinds of software development solutions such as a system programming language, a general programming language, or general support. It can handle heavy server-centric web services, text-processing problem, and heavy-duty distributed applications.

Why learn Golang?

Familiar and easy to learn. Go belongs to the C-family, so it shares many beloved syntactic similarities to languages like Java and C++, but Go offers a more concise syntax, so it's easier to learn and read. Similar to Python and Ruby, it also integrates many features of dynamic programming.

Meets developer needs. Go attempts to meet some common needs that developers face. It speeds up the software development process while not compromising on efficiency. Go aims to support the developing market with network communication, memory management, and speed.

Simplicity of server-side. Go makes it easy to work with the server-side of your code. The standard Go library provides the standard HTTP protocol.

Now that we have a sense of what Go is and what it brings to the table, let's jump into the basics. Today, we will be introducing the major concepts and core constructs of the Go programming language to get you started. As always, a more robust course is needed to teach you all the ins-and-outs.

Let's jump in.

Basics terms and concepts of Go

Filenames, keywords, identifiers

The Go source code is stored in .go files. All filenames are lowercase, and you can use _ to separate multiple words. As with most filenames, you cannot use spaces or special characters.

Keywords in Go function similarly to most programming languages. These are reserved words that carry special meaning to use in your code. Unlike Java or C++, Go has far fewer keywords, making it easier to use and learn. These keywords are:

Identifiers are similar to keywords, but you make these as the programmer. You can assign a name to elements like variables, templates, etc. And like most programming languages, identifiers are case sensitive. They must begin with a letter or an underscore and are followed by digits. The blank identifier _ can be used in declarations or variable assignments. There are also 36 predeclared identifiers, which are:

Basic structure

Programs in Go are built up of keywords, operators, types, functions, and constants. Code is structured in statements, but it does not need to end with a ; like many other C-family languages. If multiple statements are written on one line, you must separate them with ;.

Go uses similar punctuation characters to other languages, including . , ; : and ....

Go uses three delimiters in its code: ( ) [ ] and { }.

Data types and variables

Like many programming languages, variables contain different types of data that define the set of values or operations that can act upon those values. In Go, there are four main data types you can work with:

+ Elementary (aka. primitive): int, float, bool, string 
+ Structures (aka. composite): struct, slice, map, array, channel 
+ Interfaces: describe the behavior of a type 

In Go, a structured type has no inherent value but rather the default value nil.

A variable is a value that can be changed during execution. To declare a variable, we use the var keyword.

var identifier type = value

In this example, identifier is the name of the variable, and type is the type. Unlike other C-family languages, we write type after the variable identifier. When we declare a variable in Go, memory is initialized. We must also give a value to our variables using the = operator. This process is called assigning a variable.

There is also a shorthand for declaring variables.

f := "fruit"
fmt.Println(f)
}

Operators

Like in many programming languages, operators are built-in symbols that perform logical or mathematical operations. There are three types of operators in Golang, arithmetic, logical, and bitwise.

Logical operators are similar to other programming languages. Go, however, is very strict about the values that can be compared. These operators include:

+ Equality operator == 
+ Not-Equal operator != 
+ Less-than operator < 
+ Greater-than operator > 
+ Less-than equal-to operator <= 
+ Greater-than equal-to operator >= 

Bitwise operators work on integer variables that have bit-patterns of equal length. Some of the bitwise operators are:

+ Bitwise AND operator & 
+ Bitwise OR operator | 
+ Bitwise XOR operator ^ 
+ Bit CLEAR operator &^ 
+ Bitwise COMPLEMENT operator ^ 

Arithmetic operators include + / % and *.

These perform common arithmetic operations, and there are even some shortcuts. For example,

b = b + a

can be shortened as

b += a

Strings implement functions to manipulate UTF-8 encoded strings. They are UTF-8 encoded by default, so they can contain characters from any language. These are defined between double quotes " ", can include a sequence of variable-width characters, and are immutable.

Go strings are generally better than strings in other languages because they use less memory, and you don't need to decode them due to the UTF-8 standard.

There are two kinds of string literals in Golang, interpreted and raw. Interpreted strings are surrounded by quotes, and raw strings are surrounded by backticks.

To declare a string, we use the string keyword. Look at the example below to see how it's done.

func main() {
var s string = "Hello, World"
fmt.Printf(s)
}

You can loop over characters in a string to access individual elements. We use the for loop, which we will discuss more later.

func main() {
var s string = "Hello, World"

for index, character := range(s){
fmt.Printf("The character %c is in position %d \n", character, index)
}
}

You can also use string to form a string from a slice of byte values. Look at the example to see how it's done.

func main() {
myslice := []byte{0x48, 0x65, 0x6C, 0x6C, 0x6f} 
mystring := string(myslice) 

fmt.Printf(mystring)
}

Times and dates

In Golang, the package time provides the ability to measure and display time. For example, we can use time.Now( ) to display the current time, and t.Day ( ) to obtain smaller parts. There are many useful features of Go's time package, such as the function Since(t Time), which returns the time elapsed since t. You can make your own time formats as well.

t := time.Now()
fmt.Printf("%02d.%02d.%4d\n", t.Day(), t.Month(), t.Year()) // e.g.: 29.10.2019

For more on Go's time package, check out the documentation.

Keep the learning going.

Learn Golang without scrubbing through videos or documentation. Educative's text-based courses are easy to skim and feature live coding environments - making learning quick and efficient.

The Way to Go 

Intermediate concepts of Go

Control structures

Control structures are similar to that of C, but they are generally more simplified and flexible. There are no do or while loop; instead, Go uses flexible for and switch loops.

There are also new control structures, such as a type switch and select. We do not use parentheses, and the bodies are brace-delimited. Let's take a deeper look at Go control structures.

if-else: this construct tests for a conditional statement, either logical or boolean. If a statement is true, the body between the { } is executed. If it is false, the statements are ignored, and the statement after the if is executed. Keep in mind that the braces are mandatory even if there is only one statement in the body.

switch-case: this structure is used instead of long if statements that compare variables to values. This statement makes it easy to transfer-flow of execution in your code.

switch is generally more flexible than other languages. It takes this general form.

switch var1 {
case val1:
...
case val2:
...
default:
...
}

Like the if construct, a switch can also contain an initialization statement.

switch initialization; {
case val1:
...
case val2:
...
default:
...
}

select: this statement means we can wait on multiple channel operations, which we will discuss more later.

for-range: in Go, this statement allows us to iterate over an expression that evaluates to an array, slice, map, string, or channel. The basic syntax is below.

for index, value := range mydatastructure {
fmt.Println(value)
}

+ index: the index of the value we want to access. 
+ value: the value on each iteration. 
+ mydatastructure: holds the data structure whose values we are accessing in the loop. 

Keep in mind that this example is a generalization. To learn more about case-by-case examples, take a look at the EdPresso shot on the for-range loop here

Functions

Functions are the basic building blocks of Golang, as it shares many features of functional languages. As I mentioned before, functions are data since they have values and types. A Go program is built up of several functions. It is best to start with main( ) function and write them in calling, or logical, order.

Functions break down problems into smaller tasks and enable us to reuse code. There are three types of functions in Go. All of them end when they have executed their last statement before } or when it executes a return statement.

+ Normal functions that use an identifier 
+ Anonymous or lambda functions 
+ Methods 

We write functions using this syntax, and we call them with this general format.

func g() { // VALID
...
}

and we call them with this general format.

pack1.Function(arg1,arg2,...,argn)

Here function is a function in pack1, and arg1is the argument. When we invoke a function, it makes copies of the arguments, which are passed to the called function.

Let's take a look at an example of a function to see Go in action. Here, we will dive into the printf( ) function in Golang. The print function allows you to print formatted data. It takes a template string that contains the text we will format and some annotation verbs that tell the fmt functions how to format.

fmt.printf("Sample template string %s",Object arg(s))

Conversion characters tell Golang how to format the data types. Some common specifiers are:

+ v - formats the value in a default format 
+ d - formats decimal integers 
+ g - formats the floating-point numbers 
+ b - formats base 2 numbers 

Say we wanted to print a string. The %s conversation character can be used in the template string to print string values. Look at the code below. There are many other cases where we can use the print function.

func main() {
var mystring = "Hello world"
fmt.Printf("The string is %s", mystring)
}

Maps

Maps, also called hashes or dicts in other programming languages, are a built-in data type in Go. The name explains their purpose: a map maps keys to values. Think of a map as a way to store key-value pairs.

You can use these for fast lookups, retrievals, or deletion of data based on keys. We declare a map using the following syntax

var m map[KeyType]ValueType

+ m is the name of the map variable 
+ KeyType is the option data type of the keys in the map. This can also be declared at the time of initialization. 
+ ValueType is the data type of the value in the key-value pairs. 

The length of a map doesn't need to be known at declaration, so it can grow dynamically. The value of an uninitialized map is nil. Let's look at a specific example of a map in Golang to see how they are made:

func main() {
var mapLit map[string]int // making map
var mapAssigned map[string]int
mapLit = map[string]int{"one": 1, "two": 2} // adding key-value pair
mapCreated := make(map[string]float32) // making map with make()
mapAssigned = mapLit
mapCreated["key1"] = 4.5 // creating key-value pair for map
mapCreated["key2"] = 3.14159
mapAssigned["two"] = 3 // changing value of already existing key
fmt.Printf("Map literal at \"one\" is: %d\n", mapLit["one"])
fmt.Printf("Map created at \"key2\" is: %f\n", mapCreated["key2"])
fmt.Printf("Map assigned at \"two\" is: %d\n", mapLit["two"])
fmt.Printf("Map literal at \"ten\" is: %d\n", mapLit["ten"])
}

Arrays and slices

Arrays in Go are similar to Python, but they aren't very common in Go code because they are inflexible and have a fixed size. Instead, slices are far more common and provide greater power. Slices in Go build off of arrays, since it is an abstraction of Go's array type.

To declare an array, we use the following syntax:

var identifier [len]type

An array is fixed in size since its length is part of its type. For example [5]int represents an array of five integers. A slice allows us to overcome some of the challenges of arrays and work with sequences of typed data without using additional memory.

A slice is a reference to a continuous section of an array, called the underlying array. A slice is dynamically sized and flexible. A slice is formed when we specify two indices, separated by a colon. We use the type specification [ ]T. T is the type of elements in the slice. We declare a slice using the following syntax:

letters := []string{"a", "b", "c", "d"}

To declare the type for a variable with a slice, we use [ ] with the type of elements for the slice.

import (
"fmt"
"reflect"
)

func main() {
var intSlice []int
var strSlice []string

fmt.Println(reflect.ValueOf(intSlice).Kind())
fmt.Println(reflect.ValueOf(strSlice).Kind())
}

A slice, unlike an array, can change during execution. Additionally, slices come with the built-in append, which can return a slice that contains one or more new values. The syntax of the append method is:

slice = append(slice, elem1, elem2, ...)

Take a look at how it's done.

// Helper function to. print slices
func printSlice(s []int) {
fmt.Printf("length=%d capacity=%d %v\n", len(s), cap(s), s)
}

func main() {
var slice []int // Create an empty slice of type int.
printSlice(slice)

// Append works on nil slices.
slice = append(slice, 0)
printSlice(slice)

// Slices can be appended to as many times.
slice = append(slice, 1)
printSlice(slice)

// We can add more than one element at a time.
slice = append(slice, 2, 3, 4)
printSlice(slice)
}

Now that we have a sense of some of the intermediate Go concepts, let's move onto some of the important advanced things that Golang brings to the table. Keep in mind that there is a lot more to learn. Some other intermediate concepts include:

+ Recursive functions 
+ Higher order functions 
+ Structs and methods 
+ Interfaces and reflection 
+ and more 

Advanced concepts of Go

Error handling

Go does not have an exception-handling mechanism. We use the built-in interface type error. It's zero value is nil, so we know that there were no errors if it returns nil. The most common way to handle errors is to return the error type as the last return value of a function call to check for nil. Let's take a look at some code to see how it's done.

package main
import "fmt"
import "errors" // Import the errors package.

func divide(x int, y int) (int, error) {
if y == 0 {
return -1, errors.New("Cannot divide by 0!")
}
return x/y, nil
}

func main() {
answer, err := divide(5,0)
if err != nil {
// Handle the error!
fmt.Println(err)
} else {
// No errors!
fmt.Println(answer)
}
}

Goroutine

Go comes with built-in support for concurrent applications. These are programs that execute different pieces of code simultaneously. The basic building blocks for structuring concurrent programs are goroutines and channels.

Unlike Java, concurrency support is baked into the language with specific types (chan), keywords (go, select) and constructs (goroutines). Go emphasizes concurrency rather than parallelism because Go programs may not be parallel by default. Only a single core or processor is used for a Go program, regardless of the goroutines running.

So, what are goroutines? They are methods or functions that run alongside other methods or functions. These are determined by how we call them. Think of these like threads, but they are much easier and more lightweight.

We use the keyword go to create a goroutine, so when we call a function or method with that prefix, a goroutine is executed.

You can use the variable GOMAXPROCS to tell the run-time how many goroutines can execute. GOMAXPROCS must be set to more than the default value 1, or else all goroutines will share the same thread. Let's look at an example.

package main
import (
"fmt"
"time"
)

func main() {
fmt.Println("In main()")
go longWait()
go shortWait()
fmt.Println("About to sleep in main()")
time.Sleep(10 * 1e9) // sleep works with a Duration in nanoseconds (ns) !
fmt.Println("At the end of main()")
}

func longWait() {
fmt.Println("Beginning longWait()")
time.Sleep(5 * 1e9) // sleep for 5 seconds
fmt.Println("End of longWait()")
}

func shortWait() {
fmt.Println("Beginning shortWait()")
time.Sleep(2 * 1e9) // sleep for 2 seconds
fmt.Println("End of shortWait()")
}

Code from Educative course "Way To Go"

Here, the program indicates the part of the execution phase that the program is in. The functions main( ), shortWait( ), and longWait( ) start as independent processing units and then work concurrently.

Channels are used with goroutines to enable communication between them. These are typed message queues that transmit data. Think of it as a conduit that you can send typed values through. This way, we can avoid shared memory between goroutines. A channel can transmit one datatype, but we can make them for any type.

To declare a channel, we use the following format

var identifier chan datatype

A channel is also a reference type, so, to allocate memory, we use the make( ) function. Below, see how to declare a channel of strings and its instantiation.

var ch1 chan string
ch1 = make(chan string)

The Standard Library and Packages

The Go-distribution includes more than 250 built-in packages, and the API is the same for all systems. Each package introduced different functionalities to your Go code.

Let's introduce some common packages to see what it has to offer.

+ os/exec: gives the possibility to run external OS commands and programs. 
+ syscall: this is the low-level, external package, which provides a primitive interface to the underlying OS's calls. 
+ archive/tar and /zip - compress: contains functionality for (de)compressing files. 
+ fmt: contains functionality for formatted input-output. 
+ io: provides basic input-output functionality, mostly as a wrapper around os-functions. 
+ bufio: wraps around io to give buffered input-output functionality. 
+ path/filepath: contains routines for manipulating filename paths targeted at the OS used. 
+ strconv: converts strings to basic data types. 
+ unicode: special functions for Unicode characters. 
+ regexp: for string pattern-searching functionalities. 

There are also external third-party Go packages that can be installed with the go get tool. You need to verify that the GOPATH variable is set, otherwise, it will be downloaded into the $GOPATH/src directory.

There are more than 500 useful projects that you can introduce to your Go program. When introducing new functionality to an existing project, it's good to incorporate a pre-existing Go library. This requires knowledge of the library's API, which constraints the methods for calling the library. Once you know the API, call the library's functions and get started.

Let's look at the complete code of importing an external library.

package main
import (
"fmt"
"time"
"github.com/inancgumus/myhttp"
)

func main() {
mh := myhttp.New(time.Second)
response, _ := mh.Get("https://jsonip.com/")
fmt.Println("HTTP status code: ", response.StatusCode)
}

Now we have a sense of some of the advanced concepts in Go. There is a lot more to learn, including:

+ Interfaces and Reflection 
+ Error testing 
+ Anonymous channel closure 
+ Networking, templating, and web-applications 
+ Best practices and pitfalls 
+ and more 

Wrapping up

Golang is an exciting language that speeds up development and accommodates your real-world needs. Luckily, Educative has many useful courses to learn and practice Go with the world.

One course to check out is The Way to Go. This course is the definitive place to learn the core constructs and techniques of Go with hands-on practice. By the end, you'll have tackled advanced topics like error handling and networking as well as built your own Go practice project.

Happy learning!

Continue reading about Golang

+ The Web Developer FAQ 
+ The Roadmap to becoming a Front-End Developer 
+ How to become a Golang developer: 6 step career guide 

WRITTEN BYAmanda Fawcett

Join a community of more than 1 million readers. A free, bi-monthly email with a roundup of Educative's top articles and coding tips.

Subscribe</form>

Learn in-demand tech skills in half the time

SOLUTIONS

Educative for Enterprise

Educative for Individuals

Educative for HR/ recruiting

Educative for Bootcamps

PRODUCTS

Educative Learning

Educative Onboarding

Educative Skill Assessments

Pricing

For Enterprise

For Individuals

RESOURCES

Educative Blog

Educative Answers

EMHub

CONTRIBUTE

Become an Author

Become an Affiliate

Become a Contributor

LEGAL

Privacy Policy

Cookie Settings

Terms of Service

Business Terms of Service

ABOUT US

Our Team

Hiring

MORE

Course Catalog

Early Access Courses

Free Trials

Earn Referral Credits

CodingInterview.com

Press

Contact Us

SOLUTIONS

Educative for Enterprise

Educative for Individuals

Educative for HR/ recruiting

Educative for Bootcamps

Pricing

For Enterprise

For Individuals

LEGAL

Privacy Policy

Cookie Settings

Terms of Service

Business Terms of Service

PRODUCTS

Educative Learning

Educative Onboarding

Educative Skill Assessments

CONTRIBUTE

Become an Author

Become an Affiliate

Become a Contributor

ABOUT US

Our Team

Hiring

RESOURCES

Educative Blog

Educative Answers

EMHub

MORE

Course Catalog

Early Access Courses

Free Trials

Earn Referral Credits

CodingInterview.com

Press

Contact Us

SOLUTIONS

Educative for Enterprise

Educative for Individuals

Educative for HR/ recruiting

Educative for Bootcamps

RESOURCES

Educative Blog

Educative Answers

EMHub

CONTRIBUTE

Become an Author

Become an Affiliate

Become a Contributor

ABOUT US

Our Team

Hiring

PRODUCTS

Educative Learning

Educative Onboarding

Educative Skill Assessments

Pricing

For Enterprise

For Individuals

LEGAL

Privacy Policy

Cookie Settings

Terms of Service

Business Terms of Service

MORE

Course Catalog

Early Access Courses

Free Trials

Earn Referral Credits

CodingInterview.com

Press

Contact Us

Copyright (c)2022 Educative, Inc. All rights reserved.


=======asdf4======== Q\Go K8s\$\772c9431a487e9a9b6ec2d9cb24c259a.txt
https://www.redhat.com/en/topics/containers/what-is-kubernetes
TITLE: What is Kubernetes?

Not registered yet? Here are a few reasons why you should be:

+ Browse Knowledgebase articles, manage support cases and subscriptions, download updates, and more from one place. 
+ View users in your organization, and edit their account information, preferences, and permissions. 
+ Manage your Red Hat certifications, view exam history, and download certification-related logos and documents. 

Edit your profile and preferences 

Your Red Hat account gives you access to your member profile, preferences, and other services depending on your customer status.

For your security, if you're on a public computer and have finished using your Red Hat services, please be sure to log out.

Log out 

Account Log in 

+ Jump to section

Jump to section

+ Topics 
+ Understanding Linux containers 
+ What is Kubernetes? 

Published March 27, 2020 *%t-minute read

Copy URL

Kubernetes (also known as k8s or "kube") is an open source container orchestration platform that automates many of the manual processes involved in deploying, managing, and scaling containerized applications.

Get an introduction to enterprise Kubernetes

What are Kubernetes clusters?

You can cluster together groups of hosts running Linux(R) containers, and Kubernetes helps you easily and efficiently manage those clusters.

Kubernetes clusters can span hosts across on-premise, public, private, or hybrid clouds. For this reason, Kubernetes is an ideal platform for hosting cloud-native applications that require rapid scaling, like real-time data streaming through Apache Kafka.

16 steps to build a Kubernetes cluster

Who contributes to Kubernetes?

Kubernetes was originally developed and designed by engineers at Google. Google was one of the early contributors to Linux container technology and has talked publicly about how everything at Google runs in containers. (This is the technology behind Google's cloud services.)

Google generates more than 2 billion container deployments a week, all powered by its internal platform, Borg. Borg was the predecessor to Kubernetes, and the lessons learned from developing Borg over the years became the primary influence behind much of Kubernetes technology.

Fun fact: The 7 spokes in the Kubernetes logo refer to the project's original name, "Project Seven of Nine."

Red Hat was one of the first companies to work with Google on Kubernetes, even prior to launch, and has become the 2nd leading contributor to the Kubernetes upstream project. Google donated the Kubernetes project to the newly formed Cloud Native Computing Foundation (CNCF) in 2015.

Kubernetes in your future? Start here.

Watch the video

Video of Technically Speaking: Containers and hybrid cloud

What can you do with Kubernetes?

The primary advantage of using Kubernetes in your environment, especially if you are optimizing app dev for the cloud, is that it gives you the platform to schedule and run containers on clusters of physical or virtual machines (VMs).

More broadly, it helps you fully implement and rely on a container-based infrastructure in production environments. And because Kubernetes is all about automation of operational tasks, you can do many of the same things other application platforms or management systems let you do-but for your containers.

Developers can also create cloud-native apps with Kubernetes as a runtime platform by using Kubernetes patterns. Patterns are the tools a Kubernetes developer needs to build container-based applications and services.

With Kubernetes you can:

+ Orchestrate containers across multiple hosts.
+ Make better use of hardware to maximize resources needed to run your enterprise apps.
+ Control and automate application deployments and updates.
+ Mount and add storage to run stateful apps.
+ Scale containerized applications and their resources on the fly.
+ Declaratively manage services, which guarantees the deployed applications are always running the way you intended them to run.
+ Health-check and self-heal your apps with autoplacement, autorestart, autoreplication, and autoscaling.

However, Kubernetes relies on other projects to fully provide these orchestrated services. With the addition of other open source projects, you can fully realize the power of Kubernetes. These necessary pieces include (among others):

+ Registry, through projects like Docker Registry.
+ Networking, through projects like OpenvSwitch and intelligent edge routing.
+ Telemetry, through projects such as Kibana, Hawkular, and Elastic.
+ Security, through projects like LDAP, SELinux, RBAC, and OAUTH with multitenancy layers.
+ Automation, with the addition of Ansible playbooks for installation and cluster life cycle management.
+ Services, through a rich catalog of popular app patterns.

Get an introduction to Linux containers and container orchestration technology. In this on-demand course, you'll learn about containerizing applications and services, testing them using Docker, and deploying them on a Kubernetes cluster using Red Hat(R) OpenShift(R).

Start the free training course

Learn to speak Kubernetes

As is the case with most technologies, language specific to Kubernetes can act as a barrier to entry. Let's break down some of the more common terms to help you better understand Kubernetes.

Control plane: The collection of processes that control Kubernetes nodes. This is where all task assignments originate.

Nodes: These machines perform the requested tasks assigned by the control plane.

Pod: A group of one or more containers deployed to a single node. All containers in a pod share an IP address, IPC, hostname, and other resources. Pods abstract network and storage from the underlying container. This lets you move containers around the cluster more easily.

Replication controller: This controls how many identical copies of a pod should be running somewhere on the cluster.

Service: This decouples work definitions from the pods. Kubernetes service proxies automatically get service requests to the right pod-no matter where it moves in the cluster or even if it's been replaced.

Kubelet: This service runs on nodes, reads the container manifests, and ensures the defined containers are started and running.

kubectl: The command line configuration tool for Kubernetes.

How does Kubernetes work?

A working Kubernetes deployment is called a cluster. You can visualize a Kubernetes cluster as two parts: the control plane and the compute machines, or nodes.

Each node is its own Linux(R) environment, and could be either a physical or virtual machine. Each node runs pods, which are made up of containers.

The control plane is responsible for maintaining the desired state of the cluster, such as which applications are running and which container images they use. Compute machines actually run the applications and workloads.

Kubernetes runs on top of an operating system (Red Hat(R) Enterprise Linux(R), for example) and interacts with pods of containers running on the nodes.

The Kubernetes control plane takes the commands from an administrator (or DevOps team) and relays those instructions to the compute machines.

This handoff works with a multitude of services to automatically decide which node is best suited for the task. It then allocates resources and assigns the pods in that node to fulfill the requested work.

The desired state of a Kubernetes cluster defines which applications or other workloads should be running, along with which images they use, which resources should be made available to them, and other such configuration details.

From an infrastructure point of view, there is little change to how you manage containers. Your control over containers just happens at a higher level, giving you better control without the need to micromanage each separate container or node.

Your work involves configuring Kubernetes and defining nodes, pods, and the containers within them. Kubernetes handles orchestrating the containers.

Where you run Kubernetes is up to you. This can be on bare metal servers, virtual machines, public cloud providers, private clouds, and hybrid cloud environments. One of Kubernetes' key advantages is it works on many different kinds of infrastructure.

Learn about the other components of a Kubernetes architecture

What about Docker?

Docker can be used as a container runtime that Kubernetes orchestrates. When Kubernetes schedules a pod to a node, the kubelet on that node will instruct Docker to launch the specified containers.

The kubelet then continuously collects the status of those containers from Docker and aggregates that information in the control plane. Docker pulls containers onto that node and starts and stops those containers.

The difference when using Kubernetes with Docker is that an automated system asks Docker to do those things instead of the admin doing so manually on all nodes for all containers.

What is Kubernetes-native infrastructure?

Today, the majority of on-premises Kubernetes deployments run on top of existing virtual infrastructure, with a growing number of deployments on bare metal servers. This is a natural evolution in data centers. Kubernetes serves as the deployment and lifecycle management tool for containerized applications, and separate tools are used to manage infrastructure resources. 

But what if you designed the datacenter from scratch to support containers, including the infrastructure layer?

You would start directly with bare metal servers and software-defined storage, deployed and managed by Kubernetes to give the infrastructure the same self-installing, self-scaling, and self-healing benefits as containers enjoy. This is the vision of Kubernetes-native infrastructure.

What are the benefits of Kubernetes-native infrastructure?

Public cloud agility and simplicity on-premises to reduce friction between developers and IT operations

Cost efficiency by eliminating the need for a separate hypervisor layer to run VMs

Developer flexibility to deploy containers, serverless applications, and VMs from Kubernetes, scaling both applications and infrastructure

Hybrid cloud extensibility with Kubernetes as the common layer across on-premises and public clouds

How is Red Hat making Kubernetes-native infrastructure a reality?

Red Hat OpenShift

Red Hat OpenShift offers full stack automation capabilities with Kubernetes Operators, which automate installation and lifecycle management of non-Kubernetes-native infrastructure.

Red Hat OpenShift Data Foundation

Red Hat OpenShift Data Foundation delivers dynamically provisioned storage using the Rook storage operator for Kubernetes.

Container-native virtualization

Container-native virtualization in Red Hat OpenShift enables VMs on Kubernetes. It's based on an upstream open source community project known as KubeVirt.

Metal3

Metal3 is an upstream project for the fully automated deployment and lifecycle management of bare metal servers using Kubernetes.

Why do you need Kubernetes?

Kubernetes can help you deliver and manage containerized, legacy, and cloud-native apps, as well as those being refactored into microservices. 

In order to meet changing business needs, your development team needs to be able to rapidly build new applications and services. Cloud-native development starts with microservices in containers, which enables faster development and makes it easier to transform and optimize existing applications. 

Watch this webinar series to get expert perspectives to help you establish the data platform on enterprise Kubernetes you need to build, run, deploy, and modernize applications.

Production apps span multiple containers, and those containers must be deployed across multiple server hosts. Kubernetes gives you the orchestration and management capabilities required to deploy containers, at scale, for these workloads.

Kubernetes orchestration allows you to build application services that span multiple containers, schedule those containers across a cluster, scale those containers, and manage the health of those containers over time. With Kubernetes you can take effective steps toward better IT security.

Kubernetes also needs to integrate with networking, storage, security, telemetry, and other services to provide a comprehensive container infrastructure.

Once you scale this to a production environment and multiple applications, it's clear that you need multiple, colocated containers working together to deliver the individual services. 

Linux containers give your microservice-based apps an ideal application deployment unit and self-contained execution environment. And microservices in containers make it easier to orchestrate services, including storage, networking, and security.

This significantly multiplies the number of containers in your environment, and as those containers accumulate, the complexity also grows.

Kubernetes fixes a lot of common problems with container proliferation by sorting containers together into "pods." Pods add a layer of abstraction to grouped containers, which helps you schedule workloads and provide necessary services-like networking and storage-to those containers. 

Other parts of Kubernetes help you balance loads across these pods and ensure you have the right number of containers running to support your workloads.

With the right implementation of Kubernetes-and with the help of other open source projects like Open vSwitch, OAuth, and SELinux- you can orchestrate all parts of your container infrastructure.

Use case: Building a cloud platform to offer innovative banking services

Emirates NBD, one of the largest banks in the United Arab Emirates (UAE), needed a scalable, resilient foundation for digital innovation. The bank struggled with slow provisioning and a complex IT environment. Setting up a server could take 2 months, while making changes to large, monolithic applications took more than 6 months.

Using Red Hat OpenShift Container Platform for container orchestration, integration, and management, the bank created Sahab, the first private cloud run at scale by a bank in the Middle East. Sahab provides applications, systems, and other resources for end-to-end development-from provisioning to production-through an as-a-Service model. 

With its new platform, Emirates NBD improved collaboration between internal teams and with partners using application programming interfaces (APIs) and microservices. And by adopting agile and DevOps development practices, the bank reduced app launch and update cycles.

There's a lot more to do with containers.

Try it for free

Support a DevOps approach with Kubernetes

Developing modern applications requires different processes than the approaches of the past. DevOps speeds up how an idea goes from development to deployment.

At its core, DevOps relies on automating routine operational tasks and standardizing environments across an app's lifecycle. Containers support a unified environment for development, delivery, and automation, and make it easier to move apps between development, testing, and production environments.

A major outcome of implementing DevOps is a continuous integration and continuous deployment pipeline (CI/CD). CI/CD helps you deliver apps to customers frequently and validate software quality with minimal human intervention.

Managing the lifecycle of containers with Kubernetes alongside a DevOps approach helps to align software development and IT operations to support a CI/CD pipeline.

With the right platforms, both inside and outside the container, you can best take advantage of the culture and process changes you've implemented.

Learn more about how to implement a DevOps approach

Using Kubernetes in production

Kubernetes is open source and as such, there's not a formalized support structure around that technology-at least not one you'd trust your business to run on. 

If you had an issue with your implementation of Kubernetes while running in production, you'd likely be frustrated. And your customers would be, too.

Think of Kubernetes like a car engine. An engine can run on its own, but it becomes part of a functional car when it's connected with a transmission, axles, and wheels. Just installing Kubernetes is not enough to have a production-grade platform.

Kubernetes needs additional components to become fully functional. You'll need to add authentication, networking, security, monitoring, logs management, and other tools.

That's where Red Hat OpenShift comes in-it's the complete car. 

Red Hat OpenShift is Kubernetes for the enterprise. It includes all the extra pieces of technology that make Kubernetes powerful and viable for the enterprise, including registry, networking, telemetry, security, automation, and services.

Red Hat OpenShift includes Kubernetes as a central component of the platform and is a certified Kubernetes offering by the CNCF.

With Red Hat OpenShift Container Platform, your developers can make new containerized apps, host them, and deploy them in the cloud with the scalability, control, and orchestration that can turn a good idea into new business quickly and easily.

You can try using Red Hat OpenShift to automate your container operations with a free 60-day trial.

Try Red Hat OpenShift for free

Keep reading

Article 

Containers vs VMs

Linux containers and virtual machines (VMs) are packaged computing environments that combine various IT components and isolate them from the rest of the system.

Article 

What is container orchestration?

Container orchestration automates the deployment, management, scaling, and networking of containers.

Article 

What's a Linux container?

A Linux container is a set of processes isolated from the system, running from a distinct image that provides all the files necessary to support the processes.

More about containers

An enterprise-ready Kubernetes container platform with full-stack automated operations to manage hybrid cloud, multicloud, and edge deployments.

Related articles

+ Understanding Linux containers
+ Backup and recovery for containers
+ 

What is rkt?

Orchestrating Windows containers on Red Hat OpenShift

+ High availability and disaster recovery for containers
+ What is rkt? 
+ Orchestrating Windows containers on Red Hat OpenShift
+ What is CaaS?
+ What is a container registry?
+ What is containerization?
+ Containers vs VMs
+ Introduction to Kubernetes architecture
+ Learning Kubernetes basics
+ Red Hat OpenShift vs. Kubernetes
+ What is a Kubernetes cluster?
+ What is a Kubernetes operator?
+ 

Cost management for Kubernetes on Red Hat OpenShift

Spring on Kubernetes with Red Hat OpenShift

What is Clair?

+ What is container-native virtualization?
+ What is container orchestration?
+ What is Docker?
+ What is etcd?
+ What is Kubernetes?
+ What is Kubernetes cluster management?
+ What is a Kubernetes deployment?
+ What is a Kubernetes pod?
+ What is the Kubernetes API?
+ What's a Linux container?
+ Why choose Red Hat for containers?
+ Why choose Red Hat for Kubernetes?
+ Red Hat's perspective on Kubernetes
+ 

What is orchestration?

What is enterprise Kubernetes?

Introduction to Kubernetes patterns

Why run Apache Kafka on Kubernetes?

How to handle Kubernetes security

What is Kubernetes role-based access control (RBAC)?

Checklist 

Developing apps in containers: 5 topics to discuss with your team

E-Book 

Container storage for dummies

Keep exploring

WHITEPAPER

A layered approach to container and Kubernetes security 

CHECKLIST

Building apps in containers: 5 things to share with your manager

E-BOOK

Boost agility with hybrid cloud and containers e-book

BRIEF

Embracing containers for software-defined cloud infrastructure

E-BOOK

Multicloud portability for Dummies e-book

Training

Free training course 

Running Containers with Red Hat Technical Overview

Get started

Free training course 

Containers, Kubernetes and Red Hat OpenShift Technical Overview

Get started

Free training course 

Developing Cloud-Native Applications with Microservices Architectures

Get started

Get more content like this

Sign up for our free newsletter, Red Hat Shares.

Continue

We're the world's leading provider of enterprise open source solutions, using a community-powered approach to deliver high-performing Linux, cloud, container, and Kubernetes technologies. We help you standardize across environments, develop cloud-native applications, and integrate, automate, secure, and manage complex environments with award-winning support, training, and consulting services.


=======asdf5======== Q\Go K8s\$\d9d9d133f23ee16e2007714c7b538937.txt
https://en.wikipedia.org/wiki/Kubernetes
TITLE: Kubernetes - Wikipedia

This article's lead section may be too short to adequately summarize the key points. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. (December 2020)

{}

{Original author(s)}{Google}

{Developer(s)}{Cloud Native Computing Foundation}

{Initial release}{7 June 2014; 8 years ago (2014-06-07)[1]}

{}

{Stable release}{

1.24[2] / May 3, 2022; 60 days ago (2022-05-03)[3]

{ }

{Repository}{

+ github.com/kubernetes/kubernetes 

{Written in}{Go}

{Type}{Cluster management software}

{License}{Apache License 2.0}

{Website}{kubernetes.io}

Kubernetes (/^k(j)u^b^r^n^t^s, -^ne^t^s, -^ne^ti^z, -^n^ti^z/, commonly stylized as K8s[4]) is an open-source container orchestration system for automating software deployment, scaling, and management.[5][6] Google originally designed Kubernetes, but the Cloud Native Computing Foundation now maintains the project. 

Kubernetes works with Docker, Containerd, and CRI-O.[7] Originally, it interfaced exclusively with the Docker runtime[8] through a "Dockershim"; however, from 2016[citation needed] up to April 2022, Kubernetes has deprecated the shim in favor of directly interfacing with the container through Containerd, or replacing Docker with a runtime that is compliant with the Container Runtime Interface (CRI).[9][10][11] With the release of v1.24 in May 2022, "Dockershim" has been removed entirely.[12] 

Amazon, Google, IBM, Microsoft, Oracle, Red Hat, SUSE, Platform9 and VMware offer Kubernetes-based platforms or infrastructure as a service (IaaS) that deploy Kubernetes.[13][14] 

Contents

+ 1 History 
+ 2 Concepts 

+ 2.1 Control plane 
+ 2.2 Nodes 
+ 2.3 Namespaces 
+ 2.4 Pods 

+ 2.4.1 DaemonSets 
+ 2.4.2 ReplicaSets 

+ 2.5 Services 
+ 2.6 Volumes 
+ 2.7 ConfigMaps and secrets 
+ 2.8 StatefulSets 
+ 2.9 Replication controllers and deployments 
+ 2.10 Labels and selectors 
+ 2.11 Add-ons 
+ 2.12 Storage 

+ 3 API 

+ 3.1 Operators 
+ 3.2 Cluster API 

+ 4 Uses 
+ 5 Release timeline 

+ 5.1 Support windows 

+ 6 See also 
+ 7 References 
+ 8 External links 

History[edit]

Google Kubernetes Engine talk at Google Cloud Summit

Kubernetes (^^^^^^^^^^, Greek for "helmsman," "pilot," or "governor", and the etymological root of cybernetics)[6] was announced by Google in mid-2014.[15] The project was created by Joe Beda, Brendan Burns, and Craig McLuckie,[16][17] who were soon joined by other Google engineers, including Brian Grant and Tim Hockin.[15] 

The design and development of Kubernetes was influenced by Google's Borg cluster manager. Many of its top contributors had previously worked on Borg;[18][19] they codenamed Kubernetes "Project 7" after the Star Trek ex-Borg character Seven of Nine[20] and gave its logo a seven-spoked wheel. Unlike Borg, which was written in C++,[18] Kubernetes source code is in the Go language. 

Kubernetes 1.0 was released on July 21, 2015.[21] Google worked with the Linux Foundation to form the Cloud Native Computing Foundation (CNCF)[22] and offer Kubernetes as a seed technology. In February 2016,[23] the Helm[24][25] package manager for Kubernetes was released. On March 6, 2018, Kubernetes Project reached ninth place in the list of GitHub projects by the number of commits, and second place in authors and issues, after the Linux kernel.[26] 

Until version 1.18, Kubernetes followed an N-2 support policy, meaning that the three most recent minor versions receive security updates and bug fixes.[27] Starting with version 1.19, Kubernetes follows an N-3 support policy.[28] 

Concepts[edit]

Kubernetes architecture diagram

Kubernetes defines a set of building blocks ("primitives") that collectively provide mechanisms that deploy, maintain, and scale applications based on CPU, memory[29] or custom metrics.[30] Kubernetes is loosely coupled and extensible to meet different workloads. The internal components as well as extensions and containers that run on Kubernetes rely on the Kubernetes API.[31] The platform exerts its control over compute and storage resources by defining resources as Objects, which can then be managed as such. 

Kubernetes follows the primary/replica architecture. The components of Kubernetes can be divided into those that manage an individual node and those that are part of the control plane.[31][32] 

Control plane[edit]

The Kubernetes master is the main controlling unit of the cluster, managing its workload and directing communication across the system. The Kubernetes control plane consists of various components, each its own process, that can run both on a single master node or on multiple masters supporting high-availability clusters.[32] The various components of the Kubernetes control plane are as follows: 

+ etcd[33] is a persistent, lightweight, distributed, key-value data store that CoreOS has developed. It reliably stores the configuration data of the cluster, representing the overall state of the cluster at any given point of time. etcd favors consistency over availability in the event of a network partition (see CAP theorem). The consistency is crucial for correctly scheduling and operating services. 
+ The API server serves the Kubernetes API using JSON over HTTP, which provides both the internal and external interface to Kubernetes.[31][34] The API server processes and validates REST requests and updates the state of the API objects in etcd, thereby allowing clients to configure workloads and containers across worker nodes.[35] The API server uses etcd's watch API to monitor the cluster, roll out critical configuration changes, or restore any divergences of the state of the cluster back to what the deployer declared. As an example, the deployer may specify that three instances of a particular "pod" (see below) need to be running. etcd stores this fact. If the Deployment Controller finds that only two instances are running (conflicting with the etcd declaration),[36] it schedules the creation of an additional instance of that pod.[32] 
+ The scheduler is the extensible component that selects on which node an unscheduled pod (the basic entity managed by the scheduler) runs, based on resource availability. The scheduler tracks resource use on each node to ensure that workload is not scheduled in excess of available resources. For this purpose, the scheduler must know the resource requirements, resource availability, and other user-provided constraints or policy directives such as quality-of-service, affinity vs. anti-affinity requirements, and data locality. The scheduler's role is to match resource "supply" to workload "demand".[37] 
+ A controller is a reconciliation loop that drives the actual cluster state toward the desired state, communicating with the API server to create, update, and delete the resources it manages (e.g., pods or service endpoints).[38][34] One kind of controller is a Replication Controller, which handles replication and scaling by running a specified number of copies of a pod across the cluster. It also handles creating replacement pods if the underlying node fails.[38] Other controllers that are part of the core Kubernetes system include a DaemonSet Controller for running exactly one pod on every machine (or some subset of machines), and a Job Controller for running pods that run to completion, e.g. as part of a batch job.[39] Labels selectors that are part of the controller's definition specify the set of pods that a controller manages.[40] 
+ The controller manager is a process that manages a set of core Kubernetes controllers.

Nodes[edit]

A node, also known as a worker or a minion, is a machine where containers (workloads) are deployed. Every node in the cluster must run a container runtime such as Docker, as well as the below-mentioned components, for communication with the primary for network configuration of these containers. 

+ Kubelet is responsible for the running state of each node, ensuring that all containers on the node are healthy. It takes care of starting, stopping, and maintaining application containers organized into pods as directed by the control plane.[31][41] Kubelet monitors the state of a pod, and if not in the desired state, the pod re-deploys to the same node. Node status is relayed every few seconds via heartbeat messages to the primary. Once the primary detects a node failure, the Replication Controller observes this state change and launches pods on other healthy nodes.[42] 
+ Kube-proxy is an implementation of a network proxy and a load balancer, and it supports the service abstraction along with other networking operation.[31] It is responsible for routing traffic to the appropriate container based on IP and port number of the incoming request. 
+ A container resides inside a pod. The container is the lowest level of a micro-service, which holds the running application, libraries, and their dependencies. Containers can be exposed to the world through an external IP address. Kubernetes has supported Docker containers since its first version. In July 2016 the rkt container engine was added.[43]

Namespaces[edit]

Kubernetes provides a partitioning of the resources it manages into non-overlapping sets called namespaces.[44] They are intended for use in environments with many users spread across multiple teams, or projects, or even separating environments like development, test, and production. 

Pods[edit]

The basic scheduling unit in Kubernetes is a pod,[45] which consists of one or more containers that are guaranteed to be co-located on the same node.[31] Each pod in Kubernetes is assigned a unique IP address within the cluster, allowing applications to use ports without the risk of conflict.[46] Within the pod, all containers can reference each other. The containers can be running in different IP segment as well. However, for a container within one pod to access another container within another pod, it has to use the pod IP address. However, pod IP addresses are ephemeral; hence an application developer should never use hardcoded pod IP addresses because the specific pod that they are referencing may be assigned to another pod IP address on restart. Instead, they should use a reference to a service (see below), which holds a reference to the target pod at the specific pod IP address. 

A pod can define a volume, such as a local disk directory or a network disk, and expose it to the containers in the pod.[47] Pods can be managed manually through the Kubernetes API, or their management can be delegated to a controller.[31] Such volumes are also the basis for the Kubernetes features of ConfigMaps (to provide access to configuration through the file system visible to the container) and Secrets (to provide access to credentials needed to access remote resources securely, by providing those credentials on the file system visible only to authorized containers). 

DaemonSets[edit]

Normally, the Kubernetes Scheduler decides where to run pods. For some use cases, though, there could be a need to run a pod on every single node in the cluster. This is useful for use cases like log collection, ingress controllers, and storage services. DaemonSets implement this kind of pod scheduling.[48] 

ReplicaSets[edit]

A ReplicaSet's purpose is to maintain a stable set of replica pods running at any given time. As such, it is often used to guarantee the availability of a specified number of identical Pods.[49] 

The ReplicaSets[50] can also be said to be a grouping mechanism that lets Kubernetes maintain the number of instances that have been declared for a given pod. The definition of a ReplicaSet uses a selector, whose evaluation will result in identifying all pods that are associated with it. 

Services[edit]

Simplified view showing how Services interact with Pod networking in a Kubernetes cluster

A Kubernetes service is a set of pods that work together, such as one tier of a multi-tier application. The set of pods that constitute a service are defined by a label selector.[31] Kubernetes provides two modes of service discovery, using environmental variables or using Kubernetes DNS.[51] Service discovery assigns a stable IP address and DNS name to the service, and load balances traffic in a round-robin manner to network connections of that IP address among the pods matching the selector (even as failures cause the pods to move from machine to machine).[46] By default a service is exposed inside a cluster (e.g., back end pods might be grouped into a service, with requests from the front-end pods load-balanced among them), but a service can also be exposed outside a cluster (e.g., for clients to reach front-end pods).[52] 

Volumes[edit]

File systems in the Kubernetes container provide ephemeral storage, by default. This means that a restart of the pod will wipe out any data on such containers, and therefore, this form of storage is quite limiting in anything but trivial applications. A Kubernetes Volume[53] provides persistent storage that exists for the lifetime of the pod itself. This storage can also be used as shared disk space for containers within the pod. Volumes are mounted at specific mount points within the container, which are defined by the pod configuration, and cannot mount onto other volumes or link to other volumes. The same volume can be mounted at different points in the file system tree by different containers. 

ConfigMaps and secrets[edit]

A common application challenge is deciding where to store and manage configuration information, some of which may contain sensitive data. Configuration data can be anything as fine-grained as individual properties or coarse-grained information like entire configuration files or JSON / XML documents. Kubernetes provides two closely related mechanisms to deal with this need: "configmaps" and "secrets", both of which allow for configuration changes to be made without requiring an application build. The data from configmaps and secrets will be made available to every single instance of the application to which these objects have been bound via the deployment. A secret and/or a configmap is only sent to a node if a pod on that node requires it. Kubernetes will keep it in memory on that node. Once the pod that depends on the secret or configmap is deleted, the in-memory copy of all bound secrets and configmaps are deleted as well. The data is accessible to the pod through one of two ways: a) as environment variables (which will be created by Kubernetes when the pod is started) or b) available on the container file system that is visible only from within the pod. 

The data itself is stored on the master which is a highly secured machine which nobody should have login access to. The biggest difference between a secret and a configmap is that the content of the data in a secret is base64 encoded. Recent versions of Kubernetes have introduced support for encryption to be used as well. Secrets are often used to store data like certificates, passwords, pull secrets (credentials to work with image registries), and ssh keys. 

StatefulSets[edit]

Scaling stateless applications is only a matter of adding more running pods. Stateful workloads are harder, because the state needs to be preserved if a pod is restarted. If the application is scaled up or down, the state may need to be redistributed. Databases are an example of stateful workloads. When run in high-availability mode, many databases come with the notion of a primary instance and secondary instances. In this case, the notion of ordering of instances is important. Other applications like Apache Kafka distribute the data amongst their brokers; hence, one broker is not the same as another. In this case, the notion of instance uniqueness is important. 

StatefulSets[54] are controllers (see above) that enforce the properties of uniqueness and ordering amongst instances of a pod and can be used to run stateful applications. 

Replication controllers and deployments[edit]

A ReplicaSet declares the number of instances of a pod that is needed, and a Replication Controller manages the system so that the number of healthy pods that are running matches the number of pods declared in the ReplicaSet (determined by evaluating its selector). 

Deployments are a higher level management mechanism for ReplicaSets. While the Replication Controller manages the scale of the ReplicaSet, Deployments will manage what happens to the ReplicaSet - whether an update has to be rolled out, or rolled back, etc. When deployments are scaled up or down, this results in the declaration of the ReplicaSet changing - and this change in declared state is managed by the Replication Controller. 

Labels and selectors[edit]

Kubernetes enables clients (users or internal components) to attach keys called "labels" to any API object in the system, such as pods and nodes. Correspondingly, "label selectors" are queries against labels that resolve to matching objects.[31] When a service is defined, one can define the label selectors that will be used by the service router/load balancer to select the pod instances that the traffic will be routed to. Thus, simply changing the labels of the pods or changing the label selectors on the service can be used to control which pods get traffic and which don't, which can be used to support various deployment patterns like blue-green deployments or A-B testing. This capability to dynamically control how services utilize implementing resources provides a loose coupling within the infrastructure. 

For example, if an application's pods have labels for a system tier (with values such as frontend, backend, for example) and a release_track (with values such as canary, production, for example), then an operation on all of backend and canary nodes can use a label selector, such as:[40] 

tier=backend AND release_track=canary

Just like labels, field selectors also let one select Kubernetes resources. Unlike labels, the selection is based on the attribute values inherent to the resource being selected, rather than user-defined categorization. metadata.name and metadata.namespace are field selectors that will be present on all Kubernetes objects. Other selectors that can be used depend on the object/resource type. 

Add-ons[edit]

Add-ons operate just like any other application running within the cluster: they are implemented via pods and services, and are only different in that they implement features of the Kubernetes cluster. The pods may be managed by Deployments, ReplicationControllers, and so on. There are many add-ons, and the list is growing. Some of the more important are: 

+ DNS: All Kubernetes clusters should have cluster DNS; it is a mandatory feature. Cluster DNS is a DNS server, in addition to the other DNS server(s) in your environment, which serves DNS records for Kubernetes services. Containers started by Kubernetes automatically include this DNS server in their DNS searches. 
+ Web UI: This is a general purpose, web-based UI for Kubernetes clusters. It allows users to manage and troubleshoot applications running in the cluster, as well as the cluster itself. 
+ Container Resource Monitoring: Providing a reliable application runtime, and being able to scale it up or down in response to workloads, means being able to continuously and effectively monitor workload performance. Container Resource Monitoring provides this capability by recording metrics about containers in a central database, and provides a UI for browsing that data. The cAdvisor is a component on a slave node that provides a limited metric monitoring capability. There are full metrics pipelines as well, such as Prometheus, which can meet most monitoring needs. 
+ Cluster-level logging: Logs should have a separate storage and lifecycle independent of nodes, pods, or containers. Otherwise, node or pod failures can cause loss of event data. The ability to do this is called cluster-level logging, and such mechanisms are responsible for saving container logs to a central log store with search/browsing interface. Kubernetes provides no native storage for log data, but one can integrate many existing logging solutions into the Kubernetes cluster.

Storage[edit]

Containers emerged as a way to make software portable. The container contains all the packages you need to run a service. The provided file system makes containers extremely portable and easy to use in development. A container can be moved from development to test or production with no or relatively few configuration changes. 

Historically Kubernetes was suitable only for stateless services. However, many applications have a database, which requires persistence, which leads to the creation of persistent storage for Kubernetes. Implementing persistent storage for containers is one of the top challenges of Kubernetes administrators, DevOps and cloud engineers. Containers may be ephemeral, but more and more of their data is not, so one needs to ensure the data's survival in case of container termination or hardware failure. When deploying containers with Kubernetes or containerized applications, companies often realize that they need persistent storage. They need to provide fast and reliable storage for databases, root images and other data used by the containers. 

In addition to the landscape, the Cloud Native Computing Foundation (CNCF), has published other information about Kubernetes Persistent Storage including a blog helping to define the container attached storage pattern. This pattern can be thought of as one that uses Kubernetes itself as a component of the storage system or service.[55] 

More information about the relative popularity of these and other approaches can be found on the CNCF's landscape survey as well, which showed that OpenEBS from MayaData and Rook - a storage orchestration project - were the two projects most likely to be in evaluation as of the Fall of 2019.[56] 

Container Attached Storage is a type of data storage that emerged as Kubernetes gained prominence. The Container Attached Storage approach or pattern relies on Kubernetes itself for certain capabilities while delivering primarily block, file, object and interfaces to workloads running on Kubernetes.[57] 

Common attributes of Container Attached Storage include the use of extensions to Kubernetes, such as custom resource definitions, and the use of Kubernetes itself for functions that otherwise would be separately developed and deployed for storage or data management. Examples of functionality delivered by custom resource definitions or by Kubernetes itself include retry logic, delivered by Kubernetes itself, and the creation and maintenance of an inventory of available storage media and volumes, typically delivered via a custom resource definition.[58][59] 

API[edit]

A key component of the Kubernetes control plane is the API Server, which exposes an HTTP API that can be invoked by other parts of the cluster as well as end users and external components. This API is a REST API and is declarative in nature. There are two kinds of API resources. Most of the API resources in the Kubernetes API are objects. These represent a concrete instance of a concept on the cluster, like a pod or namespace. A small number of API resource types are "virtual". These represent operations rather than objects, such as a permission check, using the "subjectaccessreviews" resource. API resources that correspond to objects will be represented in the cluster with unique identifiers for the objects. Virtual resources do not have unique identifiers. 

Operators[edit]

Kubernetes can be extended using Custom Resources. These API resources represent objects that are not part of the standard Kubernetes product. These resources can appear and disappear in a running cluster through dynamic registration. Cluster administrators can update Custom Resources independently of the cluster. 

Custom Controllers are another extension mechanism. These interact with Custom Resources, and allow for a true declarative API that allows for the lifecycle management of Custom Resource that is aligned with the way that Kubernetes itself is designed. The combination of Custom Resources and Custom Controllers are often referred to as an (Kubernetes) Operator. The key use case for Operators are to capture the aim of a human operator who is managing a service or set of services and to implement them using automation, and with a declarative API supporting this automation. Human operators who look after specific applications and services have deep knowledge of how the system ought to behave, how to deploy it, and how to react if there are problems. Examples of problems solved by Operators include taking and restoring backups of that application's state, and handling upgrades of the application code alongside related changes such as database schemas or extra configuration settings. 

Cluster API[edit]

The same API design principles have been used to define an API to programmatically create, configure, and manage Kubernetes clusters. This is called the Cluster API.[60] A key concept embodied in the API is using Infrastructure as Software, or the notion that the Kubernetes cluster infrastructure is itself a resource / object that can be managed just like any other Kubernetes resources. Similarly, machines that make up the cluster are also treated as a Kubernetes resource. The API has two pieces - the core API, and a provider implementation. The provider implementation consists of cloud-provider specific functions that let Kubernetes provide the cluster API in a fashion that is well-integrated with the cloud-provider's services and resources. 

Uses[edit]

Kubernetes is commonly used as a way to host a microservice-based implementation, because it and its associated ecosystem of tools provide all the capabilities needed to address key concerns of any microservice architecture. It is available in three forms: open source, commercial, and managed. Open source distributions include the original Kubernetes, Amazon EKS-D, Red Hat OpenShift, VMware Tanzu, Mirantis Kubernetes Engine, and D2iQ Kubernetes Platform. Managed offerings include GKE, Oracle Container Engine for Kubernetes, Amazon Elastic Kubernetes Service, IBM Kubernetes Service, and Platform9 Managed Kubernetes.[61] 

Release timeline[edit]

Release timeline 

{Version } {Release date } {End of Life date[62] } {Notes }

{Old version, no longer maintained: 1.0 } {10 July 2015 } { } {Original Release }

{Old version, no longer maintained: 1.1 } {9 November 2015 } { } {https://kubernetes.io/blog/2015/11/kubernetes-1-1-performance-upgrades-improved-tooling-and-a-growing-community }

{Old version, no longer maintained: 1.2 } {16 March 2016 } {23 October 2016 } {https://kubernetes.io/blog/2016/03/kubernetes-1-2-even-more-performance-upgrades-plus-easier-application-deployment-and-management }

{Old version, no longer maintained: 1.3 } {1 July 2016 } {1 November 2016 } {https://kubernetes.io/blog/2016/07/kubernetes-1-3-bridging-cloud-native-and-enterprise-workloads }

{Old version, no longer maintained: 1.4 } {26 September 2016 } {21 April 2017 } {https://kubernetes.io/blog/2016/09/kubernetes-1-4-making-it-easy-to-run-on-kuberentes-anywhere }

{Old version, no longer maintained: 1.5 } {12 December 2016 } {1 October 2017 } {https://kubernetes.io/blog/2016/12/kubernetes-1-5-supporting-production-workloads }

{Old version, no longer maintained: 1.6 } {28 March 2017 } {23 November 2017 } {https://kubernetes.io/blog/2017/03/kubernetes-1-6-multi-user-multi-workloads-at-scale }

{Old version, no longer maintained: 1.7 } {30 June 2017 } {4 April 2018 } {https://kubernetes.io/blog/2017/06/kubernetes-1-7-security-hardening-stateful-application-extensibility-updates }

{Old version, no longer maintained: 1.8 } {28 August 2017 } {12 July 2018 } {https://kubernetes.io/blog/2017/09/kubernetes-18-security-workloads-and }

{Old version, no longer maintained: 1.9 } {15 December 2017 } {29 September 2018 } {https://kubernetes.io/blog/2017/12/kubernetes-19-workloads-expanded-ecosystem }

{Old version, no longer maintained: 1.10 } {28 March 2018 } {13 February 2019 } {https://kubernetes.io/blog/2018/03/26/kubernetes-1.10-stabilizing-storage-security-networking }

{Old version, no longer maintained: 1.11 } {3 July 2018 } {1 May 2019 } {https://kubernetes.io/blog/2018/06/27/kubernetes-1.11-release-announcement }

{Old version, no longer maintained: 1.12 } {27 September 2018 } {8 July 2019 } {https://kubernetes.io/blog/2018/09/27/kubernetes-1.12-kubelet-tls-bootstrap-and-azure-virtual-machine-scale-sets-vmss-move-to-general-availability }

{Old version, no longer maintained: 1.13 } {3 December 2018 } {15 October 2019 } {https://kubernetes.io/blog/2018/12/03/kubernetes-1-13-release-announcement }

{Old version, no longer maintained: 1.14 } {25 March 2019 } {11 December 2019 } {https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement }

{Old version, no longer maintained: 1.15 } {20 June 2019 } {6 May 2020 } {https://kubernetes.io/blog/2019/06/19/kubernetes-1-15-release-announcement }

{Old version, no longer maintained: 1.16 } {22 October 2019 } {2 September 2020 } {https://kubernetes.io/blog/2019/09/18/kubernetes-1-16-release-announcement }

{Old version, no longer maintained: 1.17 } {9 December 2019 } {13 January 2021 } {https://kubernetes.io/blog/2019/12/09/kubernetes-1-17-release-announcement }

{Old version, no longer maintained: 1.18 } {25 March 2020 } {18 June 2021 } {https://kubernetes.io/blog/2020/03/25/kubernetes-1-18-release-announcement }

{Old version, no longer maintained: 1.19 } {26 August 2020[63] } {28 October 2021 } {From Kubernetes version 1.19 on, the support window has been extended to one year of full support plus two months of maintenance mode period.[28]
https://kubernetes.io/blog/2020/08/26/kubernetes-release-1.19-accentuate-the-paw-sitive }

{Old version, no longer maintained: 1.20 } {8 December 2020 } {28 February 2022 } {https://kubernetes.io/blog/2020/12/08/kubernetes-1-20-release-announcement/ }

{Older version, yet still maintained: 1.21 } {8 April 2021 } {28 June 2022 } {https://kubernetes.io/blog/2021/04/08/kubernetes-1-21-release-announcement/ }

{Older version, yet still maintained: 1.22 } {4 August 2021 } {28 October 2022 } {https://kubernetes.io/blog/2021/08/04/kubernetes-1-22-release-announcement/ }

{Older version, yet still maintained: 1.23 } {7 December 2021 } {28 February 2023 } {https://kubernetes.io/blog/2021/12/07/kubernetes-1-23-release-announcement/ }

{Current stable version: 1.24 } {3 May 2022 } {29 September 2023 } {https://kubernetes.io/blog/2022/05/03/kubernetes-1-24-release-announcement/ }

Legend:

Old version

Older version, still maintained

Latest version

Latest preview version

Future release

Support windows[edit]

The chart below visualises the period for which each release is/was supported[62] 

See also[edit]

+ Cloud Native Computing Foundation 
+ Docker (software) 
+ List of cluster management software 
+ Open Service Mesh 
+ OpenShift

References[edit]

+ ^ "First GitHub commit for Kubernetes". github.com. 2014-06-07. Archived from the original on 2017-03-01. 
+ ^ "GitHub Releases page". github.com. Retrieved 2022-05-09. 
+ ^ "Kubernetes 1.24: Stargazer". Kubernetes. Retrieved 2022-05-09. 
+ ^ "Kubernetes GitHub Repository". GitHub. January 22, 2021. 
+ ^ "kubernetes/kubernetes". GitHub. Archived from the original on 2017-04-21. Retrieved 2017-03-28. 
+ ^ a b "What is Kubernetes?". Kubernetes. Retrieved 2017-03-31. 
+ ^ "Container runtimes". Kubernetes. Retrieved 2021-11-14. 
+ ^ "Kubernetes v1.12: Introducing RuntimeClass". kubernetes.io. 10 October 2018. 
+ ^ "Don't Panic: Kubernetes and Docker". Kubernetes Blog. 2 December 2020. Retrieved 2020-12-22. 
+ ^ "Introducing Container Runtime Interface (CRI) in Kubernetes". Kubernetes. 2016-12-19. Retrieved 2021-05-16. 
+ ^ "kubernetes/community". GitHub. Retrieved 2021-05-16. 
+ ^ Updated: Dockershim Removal FAQ Kubernetes Blog 
+ ^ "The 7 Most Popular Kubernetes Distributions". Retrieved 2021-12-28. 
+ ^ MSV, Janakiram. "Why Kubernetes Developer Ecosystem Needs A PaaS". Forbes. Retrieved 2021-05-16. 
+ ^ a b Metz, Cade. "Google Open Sources Its Secret Weapon in Cloud Computing". Wired. Archived from the original on 10 September 2015. Retrieved 24 September 2015. 
+ ^ Metz, Cade. "Google Made Its Secret Blueprint Public to Boost Its Cloud". Wired. Archived from the original on 2016-07-01. Retrieved 2016-06-27. 
+ ^ Burns, Brendan (July 20, 2018), The History of Kubernetes & the Community Behind It, archived from the original on 2022-02-27 
+ ^ a b Abhishek Verma; Luis Pedrosa; Madhukar R. Korupolu; David Oppenheimer; Eric Tune; John Wilkes (April 21-24, 2015). "Large-scale cluster management at Google with Borg". Proceedings of the European Conference on Computer Systems (EuroSys). Archived from the original on 2017-07-27. 
+ ^ "Borg, Omega, and Kubernetes - ACM Queue". queue.acm.org. Archived from the original on 2016-07-09. Retrieved 2016-06-27. 
+ ^ "Early Stage Startup Heptio Aims to Make Kubernetes Friendly". Retrieved 2016-12-06. 
+ ^ "As Kubernetes Hits 1.0, Google Donates Technology To Newly Formed Cloud Native Computing Foundation". TechCrunch. Archived from the original on 23 September 2015. Retrieved 24 September 2015. 
+ ^ "Cloud Native Computing Foundation". Archived from the original on 2017-07-03. 
+ ^ "Release v1.0: Merge pull request #277 from jackgr/master . helm/helm". GitHub. Retrieved 2021-05-16. 
+ ^ "Helm (package manager) - wikieduonline". www.wikieduonline.com. Retrieved 2021-05-16. 
+ ^ "Helm". helm.sh. Retrieved 2021-05-16. 
+ ^ Conway, Sarah (6 March 2018). "Kubernetes Is First CNCF Project To Graduate" (html). Cloud Native Computing Foundation. Archived from the original on 29 October 2018. Retrieved 3 December 2018. Compared to the 1.5 million projects on GitHub, Kubernetes is No. 9 for commits and No. 2 for authors/issues, second only to Linux. 
+ ^ "Kubernetes version and version skew support policy". Kubernetes. Retrieved 2020-03-03. 
+ ^ a b "Kubernetes 1.19 Release Announcement > Increase Kubernetes support window to one year". Kubernetes. 26 August 2020. Retrieved 2020-08-28. 
+ ^ Sharma, Priyanka (13 April 2017). "Autoscaling based on CPU/Memory in Kubernetes-Part II". Powerupcloud Tech Blog. Medium. Retrieved 27 December 2018. 
+ ^ "Configure Kubernetes Autoscaling With Custom Metrics". Bitnami. BitRock. 15 November 2018. Retrieved 27 December 2018. 
+ ^ a b c d e f g h i "An Introduction to Kubernetes". DigitalOcean. Archived from the original on 1 October 2015. Retrieved 24 September 2015. 
+ ^ a b c "Kubernetes Infrastructure". OpenShift Community Documentation. OpenShift. Archived from the original on 6 July 2015. Retrieved 24 September 2015. 
+ ^ Container Linux by CoreOS: Cluster infrastructure 
+ ^ a b Marhubi, Kamal (2015-09-26). "Kubernetes from the ground up: API server". kamalmarhubi.com. Archived from the original on 2015-10-29. Retrieved 2015-11-02. 
+ ^ Ellingwood, Justin (2 May 2018). "An Introduction to Kubernetes". DigitalOcean. Archived from the original on 5 July 2018. Retrieved 20 July 2018. One of the most important primary services is an API server. This is the main management point of the entire cluster as it allows a user to configure Kubernetes' workloads and organizational units. It is also responsible for making sure that the etcd store and the service details of deployed containers are in agreement. It acts as the bridge between various components to maintain cluster health and disseminate information and commands. 
+ ^ "Deployments". Kubernetes. Retrieved 2022-02-27. 
+ ^ "The Three Pillars of Kubernetes Container Orchestration - Rancher Labs". rancher.com. 18 May 2017. Archived from the original on 24 June 2017. Retrieved 22 May 2017. 
+ ^ a b "Overview of a Replication Controller". Documentation. CoreOS. Archived from the original on 2015-09-22. Retrieved 2015-11-02. 
+ ^ Sanders, Jake (2015-10-02). "Kubernetes: Exciting Experimental Features". Livewyer. Archived from the original on 2015-10-20. Retrieved 2015-11-02. 
+ ^ a b "Intro: Docker and Kubernetes training - Day 2". Red Hat. 2015-10-20. Archived from the original on 2015-10-29. Retrieved 2015-11-02. 
+ ^ Marhubi, Kamal (2015-08-27). "What [..] is a Kubelet?". kamalmarhubi.com. Archived from the original on 2015-11-13. Retrieved 2015-11-02. 
+ ^ "Kubernetes Security | Issues and Best Practices | Snyk". snyk.io. 26 July 2020. Retrieved 2021-05-16. 
+ ^ "rktnetes brings rkt container engine to Kubernetes". kubernetes.io. 11 July 2016. 
+ ^ "Namespaces". kubernetes.io. 
+ ^ "Pods". kubernetes.io. 
+ ^ a b Langemak, Jon (2015-02-11). "Kubernetes 101 - Networking". Das Blinken Lichten. Archived from the original on 2015-10-25. Retrieved 2015-11-02. 
+ ^ Strachan, James (2015-05-21). "Kubernetes for Developers". Medium (publishing platform). Archived from the original on 2015-09-07. Retrieved 2015-11-02. 
+ ^ "DaemonSet". kubernetes.io. 
+ ^ "ReplicaSet". kubernetes.io. Retrieved 2020-03-03. 
+ ^ "Deployments, ReplicaSets, and pods". IBM. 
+ ^ "Service". kubernetes.io. 
+ ^ Langemak, Jon (2015-02-15). "Kubernetes 101 - External Access Into The Cluster". Das Blinken Lichten. Archived from the original on 2015-10-26. Retrieved 2015-11-02. 
+ ^ "Volumes". kubernetes.io. 
+ ^ "StatefulSets". kubernetes.io. 
+ ^ "Container Attached Storage: A primer". Cloud Native Computing Foundation. 2018-04-19. Retrieved 2021-05-16. 
+ ^ "CNCF SURVEY 2019" (PDF). cncf.io.{{cite web}}: CS1 maint: url-status (link) 
+ ^ "Container Attached Storage: A primer". Cloud Native Computing Foundation. 2018-04-19. Retrieved 2020-10-09. 
+ ^ "Container Attached Storage | SNIA". www.snia.org. Retrieved 2020-10-09. 
+ ^ "Cloud Native Application Checklist: Cloud Native Storage". www.replex.io. Retrieved 2020-10-09. 
+ ^ "Introduction - The Cluster API Book". 
+ ^ "5 Cloud Native Trends to Watch out for in 2022". The New Stack. 2022-01-03. Retrieved 2022-02-03. 
+ ^ a b "Kubernetes Patch Releases". GitHub. 4 May 2022. Retrieved 2022-05-09. 
+ ^ "Kubernetes 1.19 Release Announcement". Kubernetes. 26 August 2020. Retrieved 2020-08-28. 

External links[edit]

+ Official website 
+ Kubernetes on GitHub

Virtualization software

Comparison of platform virtualization software

{Hardware
(hypervisors)}{

{Native}{

+ Adeos 
+ CP/CMS 
+ Hyper-V 
+ KVM 

+ oVirt 
+ Red Hat Enterprise Virtualization

+ LDoms / Oracle VM Server for SPARC 
+ Logical Partition (LPAR) 
+ LynxSecure 
+ PikeOS 
+ Proxmox VE 
+ QNX 
+ SIMMON 
+ VMware ESXi 

+ VMware vSphere 
+ vCloud

+ VMware Infrastructure 
+ Xen 

+ Oracle VM Server for x86 
+ XenServer

+ XtratuM 
+ z/VM

{Hosted}{

{Specialized}{

+ Basilisk II 
+ Bochs 
+ Cooperative Linux 
+ DOSBox 
+ DOSEMU 
+ PCem 
+ PikeOS 
+ SheepShaver 
+ SIMH 
+ Windows on Windows 

+ Virtual DOS machine

+ Win4Lin

{Independent}{

+ bhyve 
+ Microsoft Virtual Server 
+ Parallels Workstation (Extreme) 
+ Parallels Desktop for Mac 
+ Parallels Server for Mac 
+ PearPC 
+ QEMU 
+ VirtualBox 
+ Virtual Iron 
+ VMware Fusion 
+ VMware Server 
+ VMware Workstation (Player) 
+ Windows Virtual PC

{Tools}{

+ Ganeti 
+ System Center Virtual Machine Manager 
+ Virtual Machine Manager

{Operating
system}{

{OS containers}{

+ FreeBSD jail 
+ iCore Virtual Accounts 
+ Linux-VServer 
+ LXC 
+ OpenVZ 
+ Solaris Containers 
+ Virtuozzo 
+ Workload Partitions

{Application containers}{

+ Docker 
+ lmctfy 
+ rkt

{Virtual kernel architectures}{

+ Rump kernel 
+ User-mode Linux 
+ vkernel

{Related kernel features}{

+ BrandZ 
+ cgroups 
+ chroot 
+ namespaces 
+ seccomp

{Orchestration}{

+ Amazon ECS 
+ Kubernetes 
+ OpenShift

{Desktop}{

+ Citrix XenApp 
+ Citrix XenDesktop 
+ Remote Desktop Services 
+ VMware Horizon View

{Application}{

+ Ceedo 
+ Citrix XenApp 
+ Dalvik 
+ InstallFree 
+ Microsoft App-V 
+ Remote Desktop Services 
+ Symantec Workspace Virtualization 
+ Turbo 
+ VMware ThinApp 
+ ZeroVM

{Network}{

+ Distributed Overlay Virtual Ethernet (DOVE) 
+ Ethernet VPN (EVPN) 
+ NVGRE 
+ Open vSwitch 
+ Virtual security switch 
+ Virtual Extensible LAN (VXLAN)

See also: List of emulators

Linux containers

Operating-system-level virtualization

{Container host operating systems}{

+ Linux 
+ Container Linux 
+ RancherOS

{Container engines}{

+ Docker 
+ rkt

{Container cluster managers}{

+ Apache Mesos 
+ Kubernetes 
+ Rancher 
+ Nomad 
+ Amazon EC2 Container Service 
+ Docker UCP 
+ Docker Swarm 
+ StackEngine 
+ Tutum

Google free and open-source software

{Software}{

{Applications}{

+ Chromium 
+ OpenRefine 
+ Tesseract

{Programming languages}{

+ Dart 
+ Go 
+ Sawzall

{Frameworks and
development tools}{

+ AMP 
+ Angular 
+ AngularJS 
+ Beam 
+ Bazel 
+ Blockly 
+ Closure Tools 
+ Cpplint 
+ FlatBuffers 
+ Flutter 
+ Gears 
+ Gerrit 
+ Guava 
+ gRPC 
+ Gson 
+ Guetzli 
+ Guice 
+ gVisor 
+ Kubernetes 
+ LevelDB 
+ libvpx 
+ NaCl 
+ OR-Tools 
+ Polymer 
+ TensorFlow

{Operating systems}{

+ AOSP 
+ Chromium OS 
+ Fuchsia 
+ gLinux 
+ Goobuntu

{Related}{

+ Code-in 
+ Google LLC v. Oracle America, Inc. 
+ Open Source Security Foundation 
+ Summer of Code

{Authority control: National libraries }{

+ Germany

Retrieved from "https://en.wikipedia.org/w/index.php?title=Kubernetes&oldid=1095418756"

Categories: 

+ 2014 software
+ Cloud infrastructure
+ Containerization software
+ Free software for cloud computing
+ Free software programmed in Go
+ Linux containerization
+ Linux Foundation projects
+ Software using the Apache license
+ Virtualization software for Linux
+ Orchestration software

Hidden categories: 

+ Pages using the EasyTimeline extension
+ CS1 maint: url-status
+ Articles with short description
+ Short description matches Wikidata
+ Wikipedia introduction cleanup from December 2020
+ All pages needing cleanup
+ Articles covered by WikiProject Wikify from December 2020
+ All articles covered by WikiProject Wikify
+ All articles with unsourced statements
+ Articles with unsourced statements from March 2022
+ Articles with GND identifiers

Navigation menu

Personal tools 

+ Not logged in
+ Talk
+ Contributions
+ Create account
+ Log in

Namespaces 

+ Article
+ Talk

English 

Views 

+ Read
+ Edit
+ View history

More 

Navigation 

+ Main page
+ Contents
+ Current events
+ Random article
+ About Wikipedia
+ Contact us
+ Donate

Contribute 

+ Help
+ Learn to edit
+ Community portal
+ Recent changes
+ Upload file

Tools 

+ What links here
+ Related changes
+ Upload file
+ Special pages
+ Permanent link
+ Page information
+ Cite this page
+ Wikidata item

Print/export 

+ Download as PDF
+ Printable version

In other projects 

+ Wikimedia Commons

Languages 

+ ^^^^^^^
+ ^^^^^^^^^
+ Bosanski
+ Catala
+ ^e^tina
+ Deutsch
+ Eesti
+ Espanol
+ ^^^^^
+ Francais
+ ^^^
+ Bahasa Indonesia
+ Islenska
+ Italiano
+ ^^^^^
+ Lombard
+ Magyar
+ Bahasa Melayu
+ Nederlands
+ ^^^
+ Norsk bokmal
+ Polski
+ Portugues
+ Roman^
+ ^^^^^^^
+ ^^^^ ^^^^
+ Suomi
+ ^^^^^
+ ^^^^^^
+ ^^^^^^^^^^
+ ^^

Edit links

+ This page was last edited on 28 June 2022, at 07:35 (UTC). 
+ Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia(R) is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. 


=======asdf6======== Q\Go K8s\$\725db8978a516879b07a178f4b9a84f3.txt
https://www.interviewbit.com/blog/golang-vs-python/
TITLE: Golang vs Python: Full Difference Explained - InterviewBit

The web development industry has been in the spotlight right from the inception of the Internet, and this industry would be at the center of attraction for years to come. Nevertheless, the technologies that run this industry are constantly changing. Now, there are several programming languages available to design websites. Python and Golang are two the advanced web languages. In today's world, the ability to draft any code is a large advantage, but the biggest concern coders face is not knowing which coding language to start learning. There are multiple languages for every purpose you could think of. Of those common coding languages, developers often face an intensive battle of Golang vs Python. (Go is the official name but the website is Golang.org, so developers ideally refer to it as either interchangeably.)

Apparently, the two are notably dissimilar. Python was developed in 1991, an oldster in coding years, whereas Go was first published in the year 2012 by Google, a relative newcomer among its peers. Programmers at Google launched Golang to expedite productivity and faults in the development process occurring with other programming languages. Like we all know, Golang is a more recently developed language than Python. Golang is quite popular for its speed, whereas Python is regarded to be a slower language. Python is resourceful, while Go is more stringent in syntax and formatting. Nevertheless, they are both considered as answers to a lot of conventional coding questions like which is the most suitable language to learn as a beginner? Which language is best to obtain a computer programming job? Which coding language is most helpful?

When we talk about Python vs Golang in terms of its scope, they can both be used in various realms. Yet, experts recommend Python is far more versatile than Golang. Golang is a language like Python with comprehensive use. Let us take a look at an intense comparison between these two languages in this article.

Table Of Contents

show

+ What is Golang?

+ Features of Golang

+ What is Python?

+ Features of Python

+ Key Differences
+ Golang vs Python: Full Comparison
+ Golang vs Python - Which is better?
+ Conclusion
+ FAQs
+ Additional Resources

What is Golang?

Golang is a procedural, compiled, and statically typed programming language devised by Google. It was developed in 2007 by Ken Thompson, Robert Griesemer, and Rob Pike at Google but launched in the year 2009 as an open-source programming language. Programs are assembled with the help of packages, for effective management of dependencies. Golang also helps environment adopting patterns alike to dynamic languages. For example type inference (y:= 0 is a valid declaration of a variable y of type float).

Go was basically developed for programs related to networking and infrastructure. It was designed to replace conventional high-performance server-side languages like C++ and Java. Now, Go is used for different kinds of applications:
Go is the most sought-after for cloud-based or server-side applications.
DevOps and site reliability automation are also recommended ways to work with Golang.
Several command-line tools are drafted in Go.
Go is practiced in the world of data science and artificial intelligence.
Many employ Golang from micro-controller programming, games, and robotics.
Nevertheless, Go is really popular when it comes to infrastructure. A few of the most common infrastructure tools are written in Go - including Kubernetes, Prometheus, and Docker.

Features of Golang

+ Simplicity: Golang makes reliability, readability and maintainability it's main priority and doesn't compete to prove itself to be feature-rich The developers of Golang incorporate only those traits to the language which are important and do not make the language complex by adding a number of things. You will understand how simple Golang is when you will start using it. Also, if you are checking someone else's Golang code, no matter how big the code base is, each and every line will be very much simple and understandable to you.
+ Powerful Standard Library: Golang has a strong set of library packages, making it simple for you to compose your code. Though its library is not as diverse as Python or Java, it has all the fundamental stuff.
+ Concurrency in Golang: Another incredible feature that has made Golang popular is its concurrency feature. Golang offers Goroutines and channels to deal with concurrency. Concurrency effectively makes use of Multi-processor architecture. Concurrency also aids in the more reliable scaling of large applications. Some notable cases of Projects written in go are - Docker, Hugo, Kubernetes, and Dropbox.
+ Web Application Building: Golang has garnered attention as a web application building language owing to its easy constructs and more agile execution speed. There are several tutorials available on the internet, you can just start with anything.
+ Testing Support: Golang offers a way to test the package that you formulate. With the help of the "go test" command you will be able to test your code composed in "*_test.go" files. To make any program stable, testing is a necessity, you should add a test function along with the actual function every time you draft some code.
+ Speed of Compilation: Well, this is the scenario where Golang wins the hearts of many users as its speed of compilation and completion is much more solid than many well-known programming languages. Golang is readily parsable without a symbol table. Keeping in mind the speed of compilation and execution in mind the design of Golang and its compiler was done.

What is Python?

Python is a general-purpose, high-end, and very sought-after programming language. Python programming language is used in Machine Learning applications, data science, web development, alongside all modern technology in Software Industry. Python is an easy-to-learn syntax that enhances readability and lessens the cost of program maintenance. Python supports packages and supports, which promotes program modularity and reuse of code. The Python interpreter and the comprehensive standard library are accessible in source or binary form without charge for all significant platforms and can be distributed freely.

Below mentioned are a few facts about Python Programming Language:

+ Currently, Python is the most extensively used versatile, high-level programming language.
+ Python enables programming in object-oriented and procedural paradigms.
+ Python programs are comparatively smaller than other programming languages like Java. Developers have to type moderately less and the indentation requirement of the language makes them readable all the time.
+ Almost all tech-giant companies like Google, Facebook, Dropbox use Python language.
+ The biggest plus point of Python is the huge collection of standard libraries which can be used for the following:

+ Machine Learning
+ GUI Applications (including Kivy, PyQt Tkinter, etc. )
+ Web frameworks such as Django (used by YouTube, Instagram, Dropbox)
+ Image processing (like OpenCV, Pillow)
+ Web scraping (including BeautifulSoup, Scrapy, Selenium)
+ Test frameworks
+ Multimedia
+ Scientific computing
+ Text processing

Features of Python

+ Easy to code: Python is a high-end programming language. One can easily learn Python language as compared to other languages. Python is also very simple to code in the Python language and any person can learn the basics of python in a few hours or days. It is also a very programmer-friendly language.
+ Free and Open Source: Python language is available on the official website and you can download it by clicking on the Download Python keyword. As it is open-source, it means that source code is also available to the public. So, you can download it, use it, and share it is as well.
+ Object-Oriented Language: Object-Oriented programming is one of the essential features of python. Python backs the concepts of classes, objects encapsulation, and object-oriented language.
+ GUI Programming Support: By using modules like PyQt5, PyQt4, wxPython, or Tk in python, Graphical User Interfaces (GUI) can be made.
PyQt5 is the most common option for generating graphical apps with Python.
+ High-Level and Interpreted Language: Python is a high-end language. When we formulate programs in Python, there is no need of remembering the system architecture, neither do we need to manage the memory. Python is regarded as an Interpreted Language as Python code is run line by line at a time. Like other programming languages, there is no requirement to compile python code, making it easy to debug our code. Python's source code is transformed into an immediate form called bytecode.
+ Extensible feature and Portable language: Python is an Extensible language. We can formulate some Python code into C or C++ language furthermore, we can compile that code in C/C++ language.
Python is also a very portable language. Like, if we own python code for windows and if we want to run this code on platforms like Unix, Linux, and Mac then there is no need to change it, we can deploy this code on any platform.

Key Differences

Below mentioned are the key differences between Python and Golang:

+ As Python is a scripting language, it has to be interpreted, while Golang is quicker most of the time as it does not have to count on anything at runtime.
+ Python is an ideal language that comes equipped with an easy-to-understand syntax, making it more readable and flexible. Golang is also in the prime league when it comes to clear syntax, which holds zero unnecessary components.
+ Python doesn't come with a built-in concurrency mechanism, whereas Go is packed with a built-in concurrency mechanism.
+ Talking about safety, Python is a well-typed compiled language thereby incorporating a layer of security, while Golang is very decent because every variable should have a type connected with it. It implies a programmer cannot give away the details, which will further lead to flaws.
+ Python is less verbose compared to Go to accomplish the same functionality.
+ Python comes with dozens of libraries as opposed to Go, but gradually Go is also improving in this area.
+ Python still earns the upper hand when it comes to syntax, making it very user-friendly.
+ Python is considered the best when you have to solve data science problems, while Go is best suited for system programming.
+ Python is a dynamically typed language, while Golang is a statically typed language, which helps you to detect flaws at compile-time, further reducing serious glitches later in the production.
+ Python is the best choice for basic programming. Python can become complex if one prefers to build complicated systems. But with Go, the same task can be executed quickly without getting into the subtleties of programming language.
+ Python is more compact than Golang.

Golang vs Python: Full Comparison

{GOLANG}{PYTHON}

{Golang is a procedural programming language that is on concurrent programming.}{Python is a high-end programming language that is based on object-oriented programming}

{Exceptions are not supported by Golang, instead of the exception, it has error.}{Python support exceptions.}

{Object-oriented programming is not supported by Golang. Therefore, it does not have classes and objects.}{Python has class and objects.}

{Golang does not support inheritance.}{It supports inheritance.}

{It supports channel and Goroutines}{Python does not support Goroutines and channels.}

{It supports interfaces.}{It does not support interfaces.}

{Golang is a statically typed language. Hence, it employs a compiler.}{Python is a dynamically typed language. Therefore, it employs an interpreter.}

{Go is more verbose}{Python is less verbose}

{Golang fully supports concurrency}{Python does not come with any in-built concurrency mechanism.}

{Golang is good for system programming}{Python is best for computing and data analysis}

Golang vs Python - Which is better?

When productivity is taken into consideration, Golang is the most suitable language to become a more productive programmer. The syntax is limited and the libraries are much less heavy, it is quicker to get work done in fewer lines of code as there is less code available to write. Python has the edge in terms of versatility solely because of the number of libraries and the range of syntax. Nevertheless, versatility also comes at a price, and that price is productivity. In this battle of Python vs Golang which is the most productive language? Golang wins because it is designed to be more productive, simpler to debug, and most importantly, it's easier to read.

Python is unquestionably the most common choice for developers who want to formulate a machine learning model. The reason is Python is the first choice for machine learning and that it's the home of TensorFlow, a deep learning framework within Python. While learning the basics of computer science like algorithms and data structures, pseudo-code is frequently used. Knowing a programming language like Python, which almost resembles to pseudo-code, is an added benefit that makes learning easier. On the other hand, Golang is super fast, effortless to write, comes along with Go doc which creates documentation automatically, making the life of the programmer easier.

To sum it up, both Python and Golang have their own share of benefits, depending on the programmer's skill and capability to gauge the real-world requirement. Both Python and Golang are very much and clear when it comes to syntax and lessen the task of the developer up to a greater extent. Picking the appropriate language for your coding can indicate the difference between an effective program and a program that needs a lot of maintenance. If your primary purpose of developing a tool is speed and scalability, Golang is your perfect choice. Golang is the language that comes close to the speed of C/C++, at the same time it is very easy to use, and also you can get rid of manual memory management.

But, if you want to generate scripts and tools that run effectively while promoting readability across teams, Python can be your best option. The language reads like regular English and can be well understood by even developers who haven't had experience with Python before.
By default, the indented blocks make the code look neat, and support clean coding. And the various libraries available for free reduce the number of lines you have to use within your code.

FAQs

+ Should I learn Go or Python?

Answer: Python supports concurrent processes and threads, it is a little complicated to use compared to Go, and the performance isn't as great. If you are a student and keen to learn something that will get you a high package salary, opt for Python. If you are already working somewhere as a software engineer and want to enhance your skills, want to go for something different for the future, master Go. If you want to learn something quick and simple, go for Python. Something challenging but fun, Golang.

+ Is Golang going to replace Python soon?

Answer: Python and Golang are both fascinating languages, but it is not really possible that Go will replace Python since they are very distinctive languages with diverse uses.

+ Is Go harder than Python?

Answer: Python is easy. Though Python does not manage to be both quick and simple, but it is not slow and challenging either. It is a comparatively simple language, only less accessible than Go is. The free libraries of Python and commonly used tutorials make it effortless to learn. The syntax is also simple to learn in Python.

+ Does Golang have a future?

Answer: Absolutely, Go has a future, it has skyrocketed in popularity recently and eventually it will become a top-tier programming language soon. In a nutshell, we must agree that Golang is a programming language of the future both in terms of career growth and the development process. There is no doubt that Golang is the programming language of the future.


=======asdf7======== Q\Go K8s\$\d524bf74776e5a4d6ae1ed51b61ea85f.txt
https://www.edureka.co/blog/golang-tutorial/
TITLE: Golang Tutorial - Learn Golang by Examples | Fundamentals of Golang | Edureka

WhatsAppLinkedinTwitterFacebookRedditCopy Link!

Paul Research Analyst at edureka with a proficiency in Ethereum, Cybersecurity and Cryptography! Research Analyst at edureka with a proficiency in Ethereum, Cybersecurity and Cryptography!

+ Bookmark 

Copy Link!

Become a Certified Professional 

Golang has become one of the most trending languages in the developer community because go provides the best of both worlds, by striking a balance between dynamic and statically compiled languages. The code is easy to read, the specification is short, but even so, it includes a built-in web server! Throughout this Golang tutorial, not only will we be covering the reasons that make Go such a fantastic language, but also go over a majority of its concepts. 

Following are the topics that will be covered throughout this Golang Tutorial: 

+ Why Learn Golang? 
+ What makes Golang Special? 
+ Hello World: First Golang Programme 
+ Variables and Constants 
+ Data Types 
+ Operators 
+ Pointers 
+ Printf 
+ Loops 
+ Decision Making 
+ Arrays 
+ Maps 
+ Functions 
+ Recursion 
+ Defer, Recover, Panic 
+ Structures 
+ Interfaces 
+ Simple Webserver using Go

Let's now get started with Golang Tutorial.

Why Learn Golang?

Before you learn any language, you should always know why you're learning the language. Every language serves a special purpose and the very same goes for Golang. So why exactly should someone learn Golang? Well, Golang was built by Google to help solve problems faced by developers at google! At Google, lots of big programs are built for big server software that runs on massive clusters. Before Go, Google was using languages like C++ and Java to solve problems, but these languages didn't really have the fluidity and ease of construction that was needed for problems of such scale. Keeping these things in mind, a few years ago Ken Thompson and Robert Greaser thought about building a new language that would be good for these kinds of problems, and hence Golang was born. Basically, if you're trying to solve a problem of enormous scale or just need efficient and scalable code, Go should be your Go to language!

In the next section of this Golang Tutorial, I will take up a few common questions which every Golang aspirant has in mind.

Is Golang easy to learn? 

Golang is very small, simple, and minimalist. It only has a handful of features. To learn GoLang, if you have an understanding of C like syntax and object-oriented terminologies, then you can easily learn and use Golang.

What is Golang used for?

GoLang is the only language that incorporates all three sought-after capabilities. Namely, ease of coding, efficient code-compilation and efficient execution. To be precise, Go came to offer the following solutions:

+ Fast-paving compilation and execution 
+ A boost to code readability and documentation 
+ Offering a thoroughly consistent language 
+ Facilitating easy versioning of the program

What makes Golang special?

The existing languages have been good enough for large scale programming until recent years, but there have been big changes in the computing environment in the last decade which has included a lot of networking, a lot of cluster computing or the cloud as common folk might know it by. The languages that were being used to implement services until now are at least 10-20 old, so there are a lot of properties of a modern computing environment that these languages don't address directly. Therefore having a modern language that works really well in the modern computing environment is actually important, but you also want it to be efficient because you're going to be running these on hundreds or maybe even thousands of machines. You also don't want to waste resources by having an inefficient interpreter or some of the problems that generally come up with virtual machine implementations.

Does GoLang have a future?

It has a very bright future. In the 6 short years since its birth, Go has skyrocketed to the Top 20 of all language ranking indices:

+ Go is an absolutely minimalist language with only a handful of programming concept 
+ Go has superb built-in support for concurrency 

Is Golang better than Python and C++?

+ For the readability of code, Golang definitely has the upper hand in most cases and trumps Python as a programming language. 
+ Go is much easier to learn and code in than C++ because it is simpler and more compact. Go is significantly faster to compile over C++.

GoLang ticks all these boxes and hence has garnered the much-deserved fame in the developer's community.

I hope this has cleared any speck of doubt you had before you dived any deeper into this awesome language. Let's now move ahead with this Golang Tutorial article and see how to implement it.

How do you learn Golang from scratch?

Now, let's get our hands dirty with the coding and start from scratch. Here we will be starting with a very basic Hello World program.

Hello World: First Golang Programme

func main () {

fmt.Println("Hello World! This is my first Golang programme")

Let's go over the code line by line. 

The first line is a package declaration. Every go program must belong to a package and this particular program belongs to the "main" package. Next, we import the "fmt" or format library which provides the developer with a wide array of functions that allows the formatting of output. Then we create the main function which is the first function that is invoked when a go program is executed. In the main function, we simply invoke the 'Println' function to print our statement.

Variables and Constants

What exactly is a variable? A variable is nothing but a name given to a storage area that the programs can manipulate. Each variable in Go has a specific type, which determines the size and layout of the variable's memory, the range of values that can be stored within that memory, and the set of operations that can be applied to the variable. Next, Constants refer to fixed values that the program may not alter during its execution. These fixed values are also called literals. Constants can be of any of the basic data types like an integer constant, a floating constant, a character constant, or a string literal. There are also enumeration constants as well. Constants are treated just like regular variables except that their values cannot be modified after their definition.

func main () {

var x int = 5 //declaration of variable x

var (
a = 10
b = 15 //declaration of multiple variables
)

y := 7 // shorthand declaration of variables

const pi float64 = 3.14272345 //declaration of constants

var name string = "Aryya Paul" //declaration of a string
}

Data Types

Golang has the three major types of operators that are prevalent in every programming language i.e arithmetic, relational and logical operators.

Data Types - Golang Tutorial - Edureka

{Data Type}{Range}

{uint8}{0 to 255}

{uint16}{0 to 65535}

{uint32}{0 to 4294967295}

{uint64}{0 to 18446744073709551615}

{Data Type}{Range}

{int8}{-128 to 127}

{int16}{-32768 to 32767}

{int32}{-2147483648 to 2147483647}

{int64}{-9223372036854775808 to 9223372036854775808}

Operators

Golang has the three general types of operators that are prevalent in every major programming language. 

Operators - Golang Tutorial - Edureka

Now it's time to see how pointers work in Go. Pointers in Go are easy and fun to learn. Some Go programming tasks are performed more easily with pointers, and other tasks, such as call by reference, cannot be performed without using pointers. So it becomes necessary to learn pointers to become a perfect Go programmer. As you know, every variable is a memory location and every memory location has its address defined which can be accessed using an ampersand (&), which denotes an address in memory.

import "fmt"
// POINTERS

// We pass the value of a variable to the function
x := 0
changeVal(x)
fmt.Println("x =",x)

// If we pass a reference to the variable we can change the value
// in a function
changeVal(&x)
fmt.Println("x =",x)

// Get the address x points to with &
fmt.Println("Memory Address for x =", &x)

// We can also generate a pointer with new

func changeVal(x int) {

// Has no effect on the value of x in main()
x = 2

// * signals that we are being sent a reference to the value
func changeXValNow(x *int){

// Change the value at the memory address referenced by the pointer
// * gives us access to the value the pointer points at

*x = 2 // Store 2 in the memory address x refers to

Printf

Printf is used for format printing our outputs in Golang. It is a part of the format (fmt) library. Below is a table listing out the noteworthy uses of Printf function.

{Function}{Usage}

{fmt.Printf("%f
",pi)}{%f is for floats}

fmt.Printf("%.3f
",pi)

}{You can also define the decimal precision of a float}

{fmt.Printf("%T
",pi)}{%T prints the data type}

{fmt.Printf("%t
",isOver40)}{%t prints booleans}

{fmt.Printf("%d
",100)}{%d is used for integers}

{fmt.Printf("%b
",100)}{%b prints (100) in binary}

{fmt.Printf("%c
",44)}{%c prints the character associated with a keycode}

{fmt.Printf("%x
",17)}{%x prints in hexcode}

{fmt.Printf("%e
",pi)}{%e prints in scientific notation}

Ok, it's time we move on to loops.

Loops

If you're new to programming, a loop is a basic iterating mechanism in computer science and it's used mostly when you need to perform a repetitive pattern in programming. Now in most programming languages, there are three types of loops, namely for, while(exit controlled) and do-while(entry controlled) but Golang has only one type of loop that is the 'for' loop. The syntax of go allows while loops to be implemented with the syntax of a 'for' loop.

// For loops

i := 1

for i <= 10 {
fmt.Println(i)

// Shorthand for i = i + 1

i++
}

// Relational Operators include ==, !=, <, >, <=, and >=

// You can also define a for loop like this, but you need semicolons

for j := 0; j < 5; j++ {

fmt.Println(j);

Decision Making

Decision making is a critical part of programming. In Golang, we can implement decision making using the 'if-else' and 'switch' keywords. Let's see how Golang implements decision making with this piece of code below:

// If Statement

age := 15

if age >= 16 {
fmt.Println("Adult")
} else {
fmt.Println("Not an adult")
}

// You can use else if perform different actions, but once a match
// is reached the rest of the conditions aren't checked

if age >= 16 {
fmt.Println("in school")
} else if age >= 18 {
fmt.Println("in college")
} else {
fmt.Println("probably dead")
}

// Switch statements are used when you have limited options

switch age {
case 16: fmt.Println("Go Drive")
case 18: fmt.Println("Go Vote")
default: fmt.Println("Go Have Fun")
}

An array is a data structure in programming that is used to containerize data of the same type. For example, if you were to store all the student name of a certain class, you would use a string array to store them all. The code below shows how arrays are implemented in Golang.

// An Array holds a fixed number of values of the same type

var favNums2[5] float64

favNums2[0] = 163
favNums2[1] = 78557
favNums2[2] = 691
favNums2[3] = 3.141
favNums2[4] = 1.618

// You access the value by supplying the index number

fmt.Println(favNums2[3])

// Another way of initializing an array

favNums3 := [5]float64 { 1, 2, 3, 4, 5 }

// How to iterate through an array (Use _ if a value isn't used)

for i, value := range favNums3 {

fmt.Println(value, i)

// Slices are like arrays but you leave out the size

numSlice := []int {5,4,3,2,1}

// You can create a slice by defining the first index value to
// take through the last

numSlice2 := numSlice[3:5] // numSlice3 == [2,1]

fmt.Println("numSlice2[0] =", numSlice2[0])

// If you don't supply the first index it defaults to 0
// If you don't supply the last index it defaults to max

fmt.Println("numSlice[:2] =", numSlice[:2])

fmt.Println("numSlice[2:] =", numSlice[2:])

// You can also create an empty slice and define the data type,
// length (receive value of 0), capacity (max size)

numSlice3 := make([]int, 5, 10)

// You can copy a slice to another

copy(numSlice3, numSlice)

fmt.Println(numSlice3[0])

// Append values to the end of a slice

numSlice3 = append(numSlice3, 0, -1)

fmt.Println(numSlice3[6])

Maps

Besides arrays, we also have another data structure called "Maps" which maps unique keys to values. A key is an object that you use to retrieve a value at a later date. Given a key and a value, you can store the value in a Map object. After the value is stored, you can retrieve it by using its key.

// A Map is a collection of key value pairs
// Created with varName := make(map[keyType] valueType)

presAge := make(map[string] int)

presAge["Narendra Modi"] = 42

fmt.Println(presAge["Narendra Modi"])

// Get the number of items in the Map

fmt.Println(len(presAge))

// The size changes when a new item is added

presAge["Rahul Gandhi"] = 43
fmt.Println(len(presAge))

// We can delete by passing the key to delete

delete(presAge, "Rahul Gandhi")
fmt.Println(len(presAge))

Next up, let's move on to functions.

Functions

A function is a group of statements that together perform a task. Every Go program has at least one function, which is main(). You can divide your code into separate functions. How you divide your code among different functions is up to you, but logically, the division should be such that each function performs a specific task. A function declaration tells the compiler about a function name, return type, and parameters.

func main () {

fmt.Println("5 + 4 = ", add(5,4))
fmt.Println(subtract(1,2,3,4,5))

func add(a,b int) int {

return a+b

func subtract(args ... int) {

sub := 0

for _, value := range args {
sub -= value
}

return sub

Recursion

Recursion is the process of repeating items in a self-similar way. The same concept applies to programming languages as well. If a program allows calling a function inside the same function, then it is called a 'recursive function' call. GoLang supports recursion i.e, it allows a function to call itself. But while using recursion, programmers need to be careful to define an exit condition from the function, otherwise, it will go on to become an infinite loop.

func main () {

fmt.Println(factorial(5))

func factorial(num int) int {

if num == 0 {

return 1
}
return num * factorial(num-1)
}

Defer, Panic & Recover

Defer statement defers the execution of a function until the surrounding function returns. They are generally used to execute necessary closing statements, for example closing a file after you are done with it. Multiple defers are pushed into stack and executes in Last In First Out (LIFO) order. Defer generally used to clean up resources like a file, database connection etc. 

Panic is similar to throwing an exception like other languages. Generally when a panic is called, then the normal execution flow stops immediately, but the deferred functions are executed normally. It is a built-in function in Golang.

Recover is another built-in function in go. It helps to regain the normal flow of execution after a panic. Generally, it used with a defer statement to recover panic in a goroutine.

// Defer executes a function after the inclosing function finishes
// Defer can be used to keep functions together in a logical way
// but at the same time execute one last as a clean up operation
// Ex. Defer closing a file after we open it and perform operations

defer printTwo()
printOne()

// Use recover() to catch a division by 0 error

fmt.Println(Div(3, 0))
fmt.Println(Div(3, 2))

// We can catch our own errors and recover with panic & recover

demPanic()

func factorial(num int) int {
if num == 0 {
return 1
}
return num * factorial(num - 1)
}

// Used to demonstrate defer

func printOne(){ fmt.Println(1)}

func printTwo(){ fmt.Println(2)}

// If an error occurs we can catch the error with recover and allow
// code to continue to execute

func Div(num1, num2 int) int {
defer func() {
fmt.Println(recover())
}()
solution := num1 / num2
return solution
}

// Demonstrate how to call panic and handle it with recover

func demPanic(){

defer func() {

// If I didn't print the message nothing would show

fmt.Println(recover())

}()
panic("PANIC")

Go allow you to define variables that can hold several data items of the same kind. A structure is another user-defined data type available in Go programming, which allows you to combine data items of different kinds. Structures are used to represent a record. Suppose you want to keep track of the books in a library. You might want to track the following attributes of each book -

+ Title 
+ Author 
+ Subject 
+ Book ID

In such a scenario, structures are highly useful. To define a structure, you must use type and struct statements. The struct statement defines a new data type, with multiple members for your program. The type statement binds a name with the type which is a struct in our case.

// STRUCTS

rect1 := Rectangle{height: 10, width: 10}

fmt.Println("Rectangle is", rect1.width, "wide")

fmt.Println("Area of the rectangle =", rect1.area())

type Rectangle struct{

height float64
width float64
}

func (rect *Rectangle) area() float64{

return rect.width * rect.height

Interface

Go programming provides another data type called interfaces which represents a set of method signatures. The struct data type implements these interfaces to have method definitions for the method signature of the interfaces.

import "fmt"
import "math"

// STRUCTS AND INTERFACES

rect := Rectangle{20, 50}
circ := Circle{4}

fmt.Println("Rectangle Area =", getArea(rect))
fmt.Println("Circle Area =", getArea(circ))

// An interface defines a list of methods that a type must implement
// If that type implements those methods the proper method is executed
// even if the original is referred to with the interface name

type Shape interface {
area() float64
}

type Rectangle struct{
height float64
width float64
}

type Circle struct{
radius float64
}

func (r Rectangle) area() float64 {
return r.height * r.width
}

func (c Circle) area() float64 {
return math.Pi * math.Pow(c.radius, 2)
} 

func getArea(shape Shape) float64{

return shape.area()

Is Golang good for web development?

Golang web development has proved to be faster than using Python. For powerful tools for web programming, mobile development, microservices there are solid reasons why you should switch to GoLang:

+ Simplicity 
+ Advanced Compilation Capabilities 
+ Concurrency and Faster Performance

Simple Webserver with Go

Go also provides us with the ability to set up a simple web server in a matter of seconds. It goes to show how robust and powerful Go libraries are.

import (
"fmt"
"net/http"
)

// CREATE A HTTP SERVER

// http.ResponseWriter assembles the servers response and writes to 
// the client
// http.Request is the clients request
func handler(w http.ResponseWriter, r *http.Request) {

// Writes to the client
fmt.Fprintf(w, "Hello World
")
}

func handler2(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Hello Earth
")
}

// Calls for function handlers output to match the directory /
http.HandleFunc("/", handler)

// Calls for function handler2 output to match directory /earth
http.HandleFunc("/earth", handler2)

// Listen to port 8080 and handle requests
http.ListenAndServe(":8080", nil)
}

That's it for this Golang Tutorial blog. I hope you guys enjoyed reading it and leave confident enough to practice the fundamentals of Golang on your own. Do stay tuned for more Golang related blogs!

Got a question for us? Please mention it in the comments section of "Golang Tutorial" and we will get back to you.

Upcoming Batches For Web Developer Certification Training Course

{Course Name}{Date}{}

{Web Developer Certification Training Course}{

Class Starts on 6th August,2022

6th August

SAT&SUN (Weekend Batch)}{View Details}

Recommended videos for you

Animation And Testing In AngularJS

Deep Dive into AngularJS Javascript Framework

Web Development Trends and Predictions

Are You Riding The AngularJS Wave Yet?

AngularJS : Superheroic JavaScript MVW Framework

Web Development with HTML5, CSS3 & JavaScript

What's New in Angular 4 - Angular 4 Features

Angular 4 Tutorial - Getting Started With Angular 4

AngularJS-Superheroic JavaScript MVW Framework

Angular JS Tutorial for Beginners

AngularJS - Develop Responsive Single Page Application

A Work Day Of A Web Developer

Trendy Web Designs using HTML5

Angular JS : Develop Responsive Single Page Application

Recommended blogs for you

Know all about the Top 10 IDEs for Web Development

How to Disable JavaScript on Web Browsers?

What are JavaScript Operators and its Types?

Angular ngModel: Know all about the ngModel directive

Angular ngClass : Know All About the ngClass Directive

How To Implement JavaScript Trim Method?

What is the difference Between CSS and CSS3?

Angular Components: What are the Building Blocks of Angular?

How to Implement addEventListener() Method in JavaScript?

Arraylength in JavaScript : Everything you Need to Know

All You Need to Know About Stateprovider in AngularJS

What is a JavaScript Class and how to use it?

Array Methods In JavaScript: Everything You Need To Know About Array methods

Everything you Need to Know About Factory in AngularJS

How to Implement Padding in CSS With Examples

All you Need to Know About "a" tag in HTML

What is AngularJS Bootstrap And How To Use It Practically?

JavaScript Substring() - How is it Different from Substr() & slice()?

How To Best Utilize Onclick In JavaScript?

What are HTML Meta Tags? Is it Really Necessary?

Comments

0 Comments 

Join the discussion Cancel reply

Trending Courses in Front End Web Development

React JS Certification Training Course

+ 8k Enrolled Learners 
+ Weekend 
+ Live Class 

5 (2900)

Angular Certification Training Course

+ 18k Enrolled Learners 
+ Weekend 
+ Live Class 

5 (7050)

Web Developer Certification Training Course

+ 9k Enrolled Learners 
+ Weekend 
+ Live Class 

5 (3250)

HTML Certification Training Course

+ 1k Enrolled Learners 
+ Weekend 
+ Self Paced 

5 (250)

JavaScript Certification Training Course

+ 4k Enrolled Learners 
+ Weekend 
+ Self Paced 

5 (1350)

CSS Certification Training Course

+ 1k Enrolled Learners 
+ Weekend 
+ Self Paced 

5 (100)

jQuery Certification Training Course

+ 2k Enrolled Learners 
+ Weekend 
+ Self Paced 

5 (450)

Browse Categories

Artificial IntelligenceBI and VisualizationBig DataBlockchainCloud ComputingCyber SecurityData ScienceData Warehousing and ETLDatabasesDevOpsDigital MarketingEnterpriseMobile DevelopmentOperating SystemsProgramming & FrameworksProject Management and MethodologiesRobotic Process AutomationSoftware TestingSystems & Architecture

REGISTER FOR FREE WEBINAR 

Send OTP

Years of Experience*Student0-2 Years2-5 Years5-10 Years10+ Years 

REGISTER NOW</form>

Thank you for registering Join Edureka Meetup community for 100+ Free Webinars each month JOIN MEETUP GROUP

Subscribe to our Newsletter, and get personalized recommendations.

Sign up with Google Signup with Facebook 

Already have an account? Sign in.

20,00,000 learners love us! 
Get personalised resources in your inbox.

Sign up with Gmail Sign up with Facebook 

OR

Please provide a valid input

Password must have

At least 1 upper-case and 1 lower-case letter

Minimum 8 characters and Maximum 50 characters

SIGN UP Already have an Edureka Account? Login</form>

Please enter a valid emailid

Forgot Password?

LOGIN Don't have edureka account? Sign Up</form>

resend ?

Password must have

At least 1 upper-case and 1 lower-case letter

Minimum 8 characters and Maximum 50 characters

reset password Don't have edureka account? Sign Up</form>

reset password Don't have edureka account? Sign Up</form>

Send Code Don't have edureka account? Sign Up</form>

Reshape Your Career!

Name* 

Email ID* 

Phone Number* 

Your Total Work Experience* Years of Experience*Student0-2 Years2-5 Years5-10 Years10+ Years 

Apply Now </form>

Awesome

We have recieved your contact details.

You will recieve an email from us shortly.

Main heading

sub heading

Click to avail

You are here:

+ Home 
+ Blog 
+ Front End Web Development 
+ Golang Tutorial - Learn ...

TRENDING CERTIFICATION COURSES

+ DevOps Certification Training 
+ AWS Architect Certification Training 
+ Big Data Hadoop Certification Training 
+ Tableau Training & Certification 
+ Python Certification Training for Data Science 
+ Selenium Certification Training 
+ PMP(R) Certification Exam Training 
+ Robotic Process Automation Training using UiPath 
+ Apache Spark and Scala Certification Training 
+ Microsoft Power BI Training 
+ Online Java Course and Training 
+ Python Certification Course

TRENDING MASTERS COURSES

+ Data Scientist Masters Program 
+ DevOps Engineer Masters Program 
+ Cloud Architect Masters Program 
+ Big Data Architect Masters Program 
+ Machine Learning Engineer Masters Program 
+ Full Stack Web Developer Masters Program 
+ Business Intelligence Masters Program 
+ Data Analyst Masters Program 
+ Test Automation Engineer Masters Program 
+ Post-Graduate Program in Artificial Intelligence & Machine Learning 
+ Post-Graduate Program in Big Data Engineering

COMPANY

+ About us 
+ News & Media 
+ Reviews 
+ Contact us 
+ Blog 
+ Community 
+ Sitemap 
+ Blog Sitemap 
+ Community Sitemap 
+ Webinars

WORK WITH US

+ Careers 
+ Become an Instructor 
+ Become an Affiliate 
+ Become a Partner 
+ Hire from Edureka

DOWNLOAD APP

CATEGORIES 

CATEGORIES

+ Cloud Computing 
+ DevOps 
+ Big Data 
+ Data Science 
+ BI and Visualization 
+ Programming & Frameworks 
+ Software Testing 
+ Project Management and Methodologies 
+ Robotic Process Automation 
+ Frontend Development 
+ Data Warehousing and ETL 
+ Artificial Intelligence 
+ Blockchain 
+ Databases 
+ Cyber Security 
+ Mobile Development 
+ Operating Systems 
+ Architecture & Design Patterns 
+ Digital Marketing

TRENDING BLOG ARTICLES

TRENDING BLOG ARTICLES

+ Selenium tutorial 
+ Selenium interview questions 
+ Java tutorial 
+ What is HTML 
+ Java interview questions 
+ PHP tutorial 
+ JavaScript interview questions 
+ Spring tutorial 
+ PHP interview questions 
+ Inheritance in Java 
+ Polymorphism in Java 
+ Spring interview questions 
+ Pointers in C 
+ Linux commands 
+ Android tutorial 
+ JavaScript tutorial 
+ jQuery tutorial 
+ SQL interview questions 
+ MySQL tutorial 
+ Machine learning tutorial 
+ Python tutorial 
+ What is machine learning 
+ Ethical hacking tutorial 
+ SQL injection 
+ AWS certification career opportunities 
+ AWS tutorial 
+ What Is cloud computing 
+ What is blockchain 
+ Hadoop tutorial 
+ What is artificial intelligence 
+ Node Tutorial 
+ Collections in Java 
+ Exception handling in java 
+ Python Programming Language 
+ Python interview questions 
+ Multithreading in Java 
+ ReactJS Tutorial 
+ Data Science vs Big Data vs Data Analytics 
+ Software Testing Interview Questions 
+ R Tutorial 
+ Java Programs 
+ JavaScript Reserved Words and Keywords 
+ Implement thread.yield() in Java: Examples 
+ Implement Optical Character Recognition in Python 
+ All you Need to Know About Implements In Java

(c) 2022 Brain4ce Education Solutions Pvt. Ltd. All rights Reserved. Terms & Conditions Legal & Privacy

"PMP(R)","PMI(R)", "PMI-ACP(R)" and "PMBOK(R)" are registered marks of the Project Management Institute, Inc. MongoDB(R), Mongo and the leaf logo are the registered trademarks of MongoDB, Inc. 


=======asdf8======== Q\Go K8s\$\09866cb455e9888d5414909a5485a6cb.txt
https://en.wikipedia.org/wiki/Go_(programming_language)
TITLE: Go (programming language) - Wikipedia

For low-end Lollipop+ devices, see Android Go. For the computer program by Google to play the board game Go, see AlphaGo. For the 2003 agent-based programming language, see Go! (programming language).

{}

{Paradigm}{Multi-paradigm: concurrent imperative, object-oriented[1][2]}

{Designed by}{Robert Griesemer
Rob Pike
Ken Thompson}

{Developer}{The Go Authors[3]}

{First appeared}{November 10, 2009; 12 years ago (2009-11-10)}

{}

{Stable release}{

1.18.3[4] / 1 June 2022; 31 days ago (1 June 2022)

{ }

{Typing discipline}{Inferred, static, strong, structural,[5][6] nominal}

{Implementation language}{Go, Assembly language (gc); C++ (gofrontend)}

{OS}{DragonFly BSD, FreeBSD, Linux, macOS, NetBSD, OpenBSD,[7] Plan 9,[8] Solaris, Windows}

{License}{3-clause BSD[3] + patent grant[9]}

{Filename extensions}{.go}

{Website}{go.dev}

{Major implementations}

{gc, gofrontend}

{Influenced by}

{C, Oberon-2, Limbo, Active Oberon, communicating sequential processes, Pascal, Oberon, Smalltalk, Newsqueak, Modula-2, Alef, APL, BCPL, Modula, occam}

{Influenced}

{Odin, Crystal, Zig}

Go is a statically typed, compiled programming language designed at Google[10] by Robert Griesemer, Rob Pike, and Ken Thompson.[11] It is syntactically similar to C, but with memory safety, garbage collection, structural typing,[5] and CSP-style concurrency.[12] It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.[13] 

There are two major implementations: 

+ Google's self-hosting[14] "gc" compiler toolchain, targeting multiple operating systems and WebAssembly.[15] 
+ gofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo;[16] with LLVM the combination is gollvm.[17][a]

A third-party source-to-source compiler, GopherJS,[19] compiles Go to JavaScript for front-end web development. 

Contents

+ 1 History 

+ 1.1 Generics 
+ 1.2 Versioning 

+ 2 Design 

+ 2.1 Syntax 
+ 2.2 Types 

+ 2.2.1 Interface system 
+ 2.2.2 Generic code using parameterized types 

+ 2.3 Package system 
+ 2.4 Concurrency: goroutines and channels 

+ 2.4.1 Suitability for parallel programming 
+ 2.4.2 Lack of race condition safety 

+ 2.5 Binaries 
+ 2.6 Omissions 

+ 3 Style 
+ 4 Tools 
+ 5 Examples 

+ 5.1 Hello world 
+ 5.2 Concurrency 
+ 5.3 Testing 
+ 5.4 Web App 

+ 6 Applications 
+ 7 Reception 

+ 7.1 Naming dispute 
+ 7.2 Criticism 

+ 8 See also 
+ 9 Notes 
+ 10 References 
+ 11 Further reading 
+ 12 External links 

History[edit]

Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases.[20] The designers wanted to address criticism of other languages in use at Google, but keep their useful characteristics:[21] 

+ Static typing and run-time efficiency (like C) 
+ Readability and usability (like Python or JavaScript)[22] 
+ High-performance networking and multiprocessing

Its designers were primarily motivated by their shared dislike of C++.[23][24][25] 

Go was publicly announced in November 2009,[26] and version 1.0 was released in March 2012.[27][28] Go is widely used in production at Google[29] and in many other organizations and open-source projects. 

Mascot of Go programming language is a Gopher shown above.

In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande, and Go Mono is monospaced. Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs.[30][31] 

In April 2018, the original logo was replaced with a stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same.[32]) 

Generics[edit]

The lack of support for generic programming in initial versions of Go drew considerable criticism.[33] The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special cases; Pike called this a weakness that might at some point be changed.[34] The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.[35] 

In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback.[36][37] However, the error handling proposal was eventually abandoned.[38] 

In June 2020, a new draft design document[39] was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go, was provided to allow users to try the new syntax, along with a generics-enabled version of the online Go Playground.[40] 

Generics were finally added to Go in version 1.18.[41] 

Versioning[edit]

Go 1 guarantees compatibility[42] for the language specification and major parts of the standard library. All versions up to the current Go 1.18 release[43] have maintained this promise. 

Each major Go release is supported until there are two newer major releases.[44] 

{Release } {Status } {Release date } {Maintenance end }

{Old version, no longer maintained: go1 } {Old version, no longer maintained: End-of-Life } {2012-03-28 } {2013-12-01 }

{Old version, no longer maintained: go1.1 } {Old version, no longer maintained: End-of-Life } {2013-05-13 } {2014-06-18 }

{Old version, no longer maintained: go1.2 } {Old version, no longer maintained: End-of-Life } {2013-12-01 } {2014-12-10 }

{Old version, no longer maintained: go1.3 } {Old version, no longer maintained: End-of-Life } {2014-06-18 } {2015-08-19 }

{Old version, no longer maintained: go1.4 } {Old version, no longer maintained: End-of-Life } {2014-12-10 } {2016-02-17 }

{Old version, no longer maintained: go1.5 } {Old version, no longer maintained: End-of-Life } {2015-08-19 } {2016-08-15 }

{Old version, no longer maintained: go1.6 } {Old version, no longer maintained: End-of-Life } {2016-02-17 } {2017-02-16 }

{Old version, no longer maintained: go1.7 } {Old version, no longer maintained: End-of-Life } {2016-08-15 } {2017-08-24 }

{Old version, no longer maintained: go1.8 } {Old version, no longer maintained: End-of-Life } {2017-02-16 } {2018-02-16 }

{Old version, no longer maintained: go1.9 } {Old version, no longer maintained: End-of-Life } {2017-08-24 } {2018-08-24 }

{Old version, no longer maintained: go1.10 } {Old version, no longer maintained: End-of-Life } {2018-02-16 } {2019-02-25 }

{Old version, no longer maintained: go1.11 } {Old version, no longer maintained: End-of-Life } {2018-08-24 } {2019-09-03 }

{Old version, no longer maintained: go1.12 } {Old version, no longer maintained: End-of-Life } {2019-02-25 } {2020-02-25 }

{Old version, no longer maintained: go1.13 } {Old version, no longer maintained: End-of-Life } {2019-09-03 } {2020-08-11 }

{Old version, no longer maintained: go1.14 } {Old version, no longer maintained: End-of-Life } {2020-02-25 } {2021-02-16 }

{Old version, no longer maintained: go1.15 } {Old version, no longer maintained: End-of-Life } {2020-08-11 } {2021-08-16 }

{Old version, no longer maintained: go1.16 } {Old version, no longer maintained: End-of-Life } {2021-02-16 } {2022-03-15 }

{Older version, yet still maintained: go1.17 } {Older version, yet still maintained: Maintenance } {2021-08-16 } {Q3 2022 }

{Current stable version: go1.18 } {Current stable version: Current } {2022-03-15 } {Q1 2023 }

{Future release: go1.19 } {Future release: Planned } {Q3 2022 } {Q3 2023 }

Legend:

Old version

Older version, still maintained

Latest version

Latest preview version

Future release

Design[edit]

Go is influenced by C (especially the Plan 9 dialect[45][failed verification - see discussion]), but with an emphasis on greater simplicity and safety. It consists of: 

+ A syntax and environment adopting patterns more common in dynamic languages:[46]

: - Optional concise variable declaration and initialization through type inference (x := 0 instead of int x = 0; or var x = 0;)
: - Fast compilation[47]
: - Remote package management (go get)[48] and online package documentation[49]

+ Distinctive approaches to particular problems:

: - Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement
: - An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance
: - A toolchain that, by default, produces statically linked native binaries without external dependencies

+ A desire to keep the language specification simple enough to hold in a programmer's head,[50] in part by omitting features that are common in similar languages.

Syntax[edit]

Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "Hello, world!", without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = "Hello, world!";. Semicolons still terminate statements;[b] but are implicit when the end of a line occurs.[c] Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[d] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[53] 

Types[edit]

Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), booleans, and character strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding.[54] Record types can be defined with the struct keyword.[55] 

For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[34][56][57] 

Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax.[58][59] There is no pointer arithmetic,[e] except via the special unsafe.Pointer type in the standard library.[60] 

For a pair of types K, V, the type map[K]V is the type of hash tables mapping type-K keys to type-V values. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes.[61] 

Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.[62] For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers: 

type ipv4addr uint32

With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.[63] 

Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.[64] 

Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error.[65] 

Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard: 

// ZeroBroadcast reports whether addr is 255.255.255.255.
func (addr ipv4addr) ZeroBroadcast() bool {
return addr == 0xFFFFFFFF
}

Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[66] 

Interface system[edit]

Go provides two features that replace class inheritance.[citation needed] 

The first is embedding, which can be viewed as an automated form of composition.[67] 

The second are its interfaces, which provides runtime polymorphism.[68]: 266 Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after protocols from the Smalltalk programming language.[69] Multiple sources use the term duck typing when describing Go interfaces.[70][71] Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Since conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing.[72] 

The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as 

import "math"

type Shape interface {
Area() float64
}

type Square struct { // Note: no "implements" declaration
side float64
}

func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No "implements" declaration here either
radius float64
}

func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) }

then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.[68]: 263-268 In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.[68]: 270 

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.[68]: 282-283 

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[73] which checks against a single potential type, and the type switch,[74] which checks against multiple types.[citation needed] 

The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.[68]: 284 Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[75] Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed] 

The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type.[76] 

Interface values are implemented using pointer to data and a second pointer to run-time type information.[77] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[78] 

Generic code using parameterized types[edit]

{}{

This section needs expansion. You can help by adding to it. (March 2022)

Since version 1.18, Go supports generic code using parameterized types.[79] 

Package system[edit]

In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not.[80] The go get command can retrieve packages stored in a remote repository[81] and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.[82] 

Concurrency: goroutines and channels[edit]

The Go language has built-in facilities, as well as library support, for writing concurrent programs. Concurrency refers not only to CPU parallelism, but also to asynchrony: letting slow operations like a database or network read run while the program does other work, as is common in event-based servers.[83] 

The primary concurrency construct is the goroutine, a type of light-weight process. A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang.[84]: 10 

While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,[84]: 151-152 idiomatic concurrent programs instead prefer channels, which send messages between goroutines.[85] Optional buffers store messages in FIFO order[86]: 43 and allow sending goroutines to proceed before their messages are received.[citation needed] 

Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.[87] 

The existence of channels sets Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.[84]: 147 

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.[88] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[89] implementing coroutines (which helped inspire the name goroutine),[90] and implementing iterators.[91] 

Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked),[92] Go does not provide any built-in notion of safe or verifiable concurrency.[93] While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see Sect Lack of race condition safety, below. 

Suitability for parallel programming[edit]

Although Go's concurrency features are not aimed primarily at parallel processing,[83] they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[94] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.[95] 

Lack of race condition safety[edit]

Go's approach to concurrency can be summarized as "don't communicate by sharing memory; share memory by communicating".[96] There are no restrictions on how goroutines access shared data, making race conditions possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[93] Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[97][98] Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called "aliases xor mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.[84]: 155 

Binaries[edit]

The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.[99][100] 

Omissions[edit]

Go deliberately omits certain features common in other languages, including (implementation) inheritance, assertions,[f] pointer arithmetic,[e] implicit type conversions, untagged unions,[g] and tagged unions.[h] The designers added only those facilities that all three agreed on.[103] 

Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[i] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[67] 

Exception handling was initially omitted in Go due to lack of a "design that gives value proportionate to the complexity".[104] An exception-like panic/recover mechanism that avoids the usual try-catch control structure was proposed[105] and released in the March 30, 2010 snapshot.[106] The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package.[107][108] Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom.[11] 

Style[edit]

The Go authors put substantial effort into influencing the style of Go programs: 

+ Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font.[109] golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers.[110] 
+ Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc),[111] testing (go test), building (go build), package management (go get), and so on. 
+ Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables[112] or imports,[113] and implicit type conversions. 
+ The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style. 
+ On day one the Go team published a collection of Go idioms,[111] and later also collected code review comments,[114] talks,[115] and official blog posts[116] to teach Go style and coding philosophy.

Tools[edit]

The main Go distribution includes tools for building, testing, and analyzing code: 

+ go build, which builds Go binaries using only information in the source files themselves, no separate makefiles 
+ go test, for unit testing and microbenchmarks 
+ go fmt, for formatting code 
+ go install, for retrieving and installing remote packages 
+ go vet, a static analyzer looking for potential errors in code 
+ go run, a shortcut for building and executing code 
+ godoc, for displaying documentation or serving it via HTTP 
+ gorename, for renaming variables, functions, and so on in a type-safe way 
+ go generate, a standard way to invoke code generators 
+ go mod, for creating a new module, adding dependencies, upgrading dependencies, etc.

It also includes profiling and debugging support, runtime instrumentation (for example, to track garbage collection pauses), and a race condition tester. 

An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors. 

Examples[edit]

Hello world[edit]

func main() {
fmt.Println("hello world")
}

where "fmt" is the package for formatted I/O, similar to C's C file input/output.[117] 

Concurrency[edit]

The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads ("goroutines"): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).[84]: 152 

import (
"fmt"
"time"
)

func readword(ch chan string) {
fmt.Println("Type a word, then hit Enter.")
var word string
fmt.Scanf("%s", &word)
ch <- word
}

func timeout(t chan bool) {
time.Sleep(5 * time.Second)
t <- false
}

func main() {
t := make(chan bool)
go timeout(t)

ch := make(chan string)
go readword(ch)

select {
case word := <-ch:
fmt.Println("Received", word)
case <-t:
fmt.Println("Timeout.")
}
}

Testing[edit]

The testing package provides support for automated testing of go packages.[118] Target function example: 

func ExtractUsername(email string) string {
at := strings.Index(email, "@")
return email[:at]
}

Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package): 

import (
"testing" 
)

func TestExtractUsername(t *testing.T) {
t.Run("withoutDot", func(t *testing.T) {
username := ExtractUsername("r@google.com")
if username != "r" {
t.Fatalf("Got: %v\n", username)
}
})

t.Run("withDot", func(t *testing.T) {
username := ExtractUsername("jonh.smith@example.com")
if username != "jonh.smith" {
t.Fatalf("Got: %v\n", username)
}
})
}

It is possible to run tests in parallel. 

Web App[edit]

The net/http package provides support for creating web applications. 

This example would show "Hello world!" when localhost:8080 is visited. 

import (
"fmt"
"log"
"net/http" 
)

func helloFunc(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Hello world!")
}

func main() {
http.HandleFunc("/", helloFunc)
log.Fatal(http.ListenAndServe(":8080", nil))
}

Applications[edit]

Some notable open-source applications written in Go include:[119] 

+ Caddy, an open source HTTP/2 web server with automatic HTTPS capability 
+ CockroachDB, an open source, survivable, strongly consistent, scale-out SQL database 
+ Consul, a software for DNS-based service discovery and providing distributed Key-value storage, segmentation and configuration. 
+ Docker, a set of tools for deploying Linux containers 
+ EdgeX, a vendor-neutral open-source platform hosted by the Linux Foundation, providing a common framework for industrial IoT edge computing[120] 
+ Hugo, a static site generator 
+ InfluxDB, an open source database specifically to handle time series data with high availability and high performance requirements 
+ InterPlanetary File System, a content-addressable, peer-to-peer hypermedia protocol[121] 
+ Juju, a service orchestration tool by Canonical, packagers of Ubuntu Linux 
+ Kubernetes container management system 
+ lnd, an implementation of the Bitcoin Lightning Network[122] 
+ Mattermost, a teamchat system 
+ NATS Messaging, an open-source messaging system featuring the core design principles of performance, scalability, and ease of use[123] 
+ OpenShift, a cloud computing platform as a service by Red Hat 
+ Rclone, a command line program to manage files on cloud storage and other high latency services 
+ Snappy, a package manager for Ubuntu Touch developed by Canonical 
+ Syncthing, an open-source file synchronization client/server application 
+ Terraform, an open-source, multiple cloud infrastructure provisioning tool from HashiCorp 
+ TiDB, an open-source, distributed HTAP database compatible with the MySQL protocol from PingCAP 
+ arctil, Web security assessment tool [124]

Other notable companies and sites using Go (generally together with other languages, not exclusively) include: 

+ Cacoo, for their rendering of the user dashboard page and microservice using Go and gRPC[125] 
+ Chango, a programmatic advertising company uses Go in its real-time bidding systems[126] 
+ Cloud Foundry, a platform as a service[127] 
+ Cloudflare, for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites[128][129] 
+ Container Linux (formerly CoreOS), a Linux-based operating system that uses Docker containers[130] and rkt containers 
+ Couchbase, Query and Indexing services within the Couchbase Server[131] 
+ Dropbox, who migrated some of their critical components from Python to Go[132] 
+ Ethereum, The go-ethereum implementation of the Ethereum Virtual Machine blockchain for the Ether cryptocurrency[133] 
+ Gitlab, a web-based DevOps lifecycle tool that provides a Git-repository, wiki, issue-tracking, continuous integration, deployment pipeline features[134] 
+ Google, for many projects, notably including download server dl.google.com[135][136][137] 
+ Heroku, for Doozer, a lock service[12] 
+ Hyperledger Fabric, an open source, enterprise-focused distributed ledger project 
+ MongoDB, tools for administering MongoDB instances[138] 
+ Netflix, for two portions of their server architecture[139] 
+ Nutanix, for a variety of micro-services in its Enterprise Cloud OS[140] 
+ Plug.dj, an interactive online social music streaming website[141] 
+ SendGrid, a Boulder, Colorado-based transactional email delivery and management service.[142] 
+ SoundCloud, for "dozens of systems"[143] 
+ Splice, for the entire backend (API and parsers) of their online music collaboration platform[144] 
+ ThoughtWorks, some tools and applications for continuous delivery and instant messages (CoyIM)[145] 
+ Twitch, for their IRC-based chat system (migrated from Python)[146] 
+ Uber, for handling high volumes of geofence-based queries[147]

See also related query to Wikidata. 

Reception[edit]

The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it "a shame that no popular language has followed [this] particular route".[148] 

Dave Astels at Engine Yard wrote in 2009:[149] 

Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges.

Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,[150] surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran.[151] But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was awarded TIOBE programming language of the year 2016. 

Bruce Eckel has stated:[152] 

The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.

A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found: 

Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.

- R. Hundt[153]

The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the code in the paper.[154] 

Naming dispute[edit]

On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.[155] McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some[156] even saying the issue contradicts Google's motto of: Don't be evil.[157] 

On October 12, 2010, the issue was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment: 

"There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."[157]

Criticism[edit]

Go critics say that: 

+ Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases.[158][159] 
+ Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style.[160] 
+ File semantics in Go standard library are heavily based on POSIX semantics, and they do not map well to the Windows platform.[161][162] Note that this problem is not particular to Go, but other programming languages have solved it through well defined standard libraries. 
+ A study showed that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more.[163]

See also[edit]

+ Free and open-source software portal

+ Comparison of programming languages

Notes[edit]

+ ^ Using alternative backends reduces compilation speed and Go's control over garbage collection but provides better machine-code optimization.[18] 
+ ^ But "To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }".[51] 
+ ^ "if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon".[52] 
+ ^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return. 
+ ^ a b Language FAQ "Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector...."[11] 
+ ^ Language FAQ "Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting...."[11] 
+ ^ Language FAQ "Why are there no untagged unions...? [they] would violate Go's memory safety guarantees."[11] 
+ ^ Language FAQ "Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly."[11] (The tag of an interface type[101] is accessed with a type assertion[102]). 
+ ^ Questions "How do I get dynamic dispatch of methods?" and "Why is there no type inheritance?" in the language FAQ.[11] 

References[edit]

This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license.

+ ^ "Is Go an object-oriented language?". Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. 
+ ^ "Go: code that grows with grace". Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way. 
+ ^ a b "Text file LICENSE". The Go Programming Language. Retrieved October 5, 2012. 
+ ^ https://go.dev/doc/devel/release#go1.18.minor. 
+ ^ a b "Why doesn't Go have "implements" declarations?". golang.org. Retrieved October 1, 2015. 
+ ^ Pike, Rob (December 22, 2014). "Rob Pike on Twitter". Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required. 
+ ^ "lang/go: go-1.4 - Go programming language". OpenBSD ports. December 23, 2014. Retrieved January 19, 2015. 
+ ^ "Go Porting Efforts". Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010. 
+ ^ "Additional IP Rights Grant". The Go Programming Language. Retrieved October 5, 2012. 
+ ^ Kincaid, Jason (November 10, 2009). "Google's Go: A New Programming Language That's Python Meets C++". TechCrunch. Retrieved January 18, 2010. 
+ ^ a b c d e f g "Language Design FAQ". golang.org. January 16, 2010. Retrieved February 27, 2010. 
+ ^ a b Metz, Cade (May 5, 2011). "Google Go boldly goes where no code has gone before". The Register. 
+ ^ "Is the language called Go or Golang?". Retrieved March 16, 2022. The language is called Go. 
+ ^ "Go 1.5 Release Notes". Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C. 
+ ^ "Go 1.11 is Released - The Go Blog". August 24, 2018. Retrieved January 1, 2019. 
+ ^ "Installing GCC: Configuration". Retrieved December 3, 2011. Ada, Go and Objective-C++ are not default languages 
+ ^ "FAQ: Implementation". golang.org. August 2, 2021. Retrieved August 2, 2021. 
+ ^ "gollvm Sect Is gollvm a replacement for the main Go compiler? (gc)". Git at Google. 
+ ^ "A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs". GitHub. April 18, 2020. 
+ ^ "Go at Google: Language Design in the Service of Software Engineering". Retrieved October 8, 2018. 
+ ^ Pike, Rob (April 28, 2010). "Another Go at Language Design". Stanford EE Computer Systems Colloquium. Stanford University. Video available. 
+ ^ "Frequently Asked Questions (FAQ) - The Go Programming Language". golang.org. Retrieved February 26, 2016. 
+ ^ Binstock, Andrew (May 18, 2011). "Dr. Dobb's: Interview with Ken Thompson". Archived from the original on January 5, 2013. Retrieved February 7, 2014. 
+ ^ Pike, Rob (2012). "Less is exponentially more". 
+ ^ Griesemer, Robert (2015). "The Evolution of Go". 
+ ^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. "Hey! Ho! Let's Go!". Google Open Source. Retrieved May 17, 2018. 
+ ^ Shankland, Stephen (March 30, 2012). "Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google". News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++. 
+ ^ "Release History - The Go Programming Language". golang.org. 
+ ^ "Go FAQ: Is Google using Go internally?". Retrieved March 9, 2013. 
+ ^ "Go fonts - The Go Blog". Go. November 16, 2016. Retrieved March 12, 2019. 
+ ^ "Go Font TTFs". GitHub. Retrieved April 2, 2019. 
+ ^ "Go's New Brand". The Go Blog. Retrieved November 9, 2018. 
+ ^ Merrick, Alice (March 9, 2021). "Go Developer Survey 2020 Results". Go Programming Language. Retrieved March 16, 2022. 
+ ^ a b Pike, Rob (September 26, 2013). "Arrays, slices (and strings): The mechanics of 'append'". The Go Blog. Retrieved March 7, 2015. 
+ ^ "E2E: Erik Meijer and Robert Griesemer - Going Go". Channel 9. Microsoft. May 7, 2012. 
+ ^ "Go 2 Draft Designs". Retrieved September 12, 2018. 
+ ^ "The Go Blog: Go 2 Draft Designs". August 28, 2018. 
+ ^ "Proposal: A built-in Go error check function, "try"". Go repository on GitHub. Retrieved March 16, 2022. 
+ ^ "Type Parameters - Draft Design". go.googlesource.com. 
+ ^ "Generics in Go". bitfieldconsulting.com. 
+ ^ "Go 1.18 is released!". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. 
+ ^ "Go 1 and the Future of Go Programs - The Go Programming Language". golang.org. 
+ ^ "Go 1.18 Release Notes - The Go Programming Language". go.dev.{{cite web}}: CS1 maint: url-status (link) 
+ ^ "Release History - The Go Programming Language". golang.org. 
+ ^ "A Quick Guide to Go's Assembler - The Go Programming Language". go.dev. Retrieved December 31, 2021. 
+ ^ Pike, Rob. "The Go Programming Language". YouTube. Retrieved July 1, 2011. 
+ ^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google. Event occurs at 8:53. 
+ ^ "Download and install packages and dependencies - go - The Go Programming Language". See godoc.org for addresses and documentation of some packages. 
+ ^ "GoDoc". godoc.org. 
+ ^ Pike, Rob. "The Changelog" (Podcast). 
+ ^ "Go Programming Language Specification, SectSemicolons". golang.org. 
+ ^ "Effective Go, SectSemicolons". golang.org. 
+ ^ "The Go Programming Language Specification - The Go Programming Language". golang.org. 
+ ^ Pike, Rob (October 23, 2013). "Strings, bytes, runes and characters in Go". 
+ ^ Doxsey, Caleb. "Structs and Interfaces - An Introduction to Programming in Go". www.golang-book.com. Retrieved October 15, 2018. 
+ ^ Gerrand, Andrew. "Go Slices: usage and internals". 
+ ^ The Go Authors. "Effective Go: Slices". 
+ ^ The Go authors. "Selectors - The Go Programming Language Specification". 
+ ^ The Go authors. "Calls - The Go Programming Language Specification". 
+ ^ "Go Programming Language Specification, SectPackage unsafe". golang.org. 
+ ^ "The Go Programming Language Specification - The Go Programming Language". go.dev. Retrieved December 31, 2021. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ "A tour of go". go.dev. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ "The Go Programming Language Specification - The Go Programming Language". go.dev. Retrieved December 31, 2021. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM. 
+ ^ a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse. 
+ ^ "The Evolution of Go". talks.golang.org. Retrieved March 13, 2016. 
+ ^ Diggins, Christopher (November 24, 2009). "Duck Typing and the Go Programming Language". Dr. Dobb's, The world of software development. Retrieved March 10, 2016.{{cite web}}: CS1 maint: url-status (link) 
+ ^ Ryer, Mat (December 1, 2015). "Duck typing in Go". Retrieved March 10, 2016. 
+ ^ "Frequently Asked Questions (FAQ) - The Go Programming Language". golang.org. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ "reflect package - reflect - pkg.go.dev". pkg.go.dev. 
+ ^ "map[string]interface{} in Go". bitfieldconsulting.com. 
+ ^ "Go Data Structures: Interfaces". Retrieved November 15, 2012. 
+ ^ "The Go Programming Language Specification". golang.org. 
+ ^ "Go 1.18 Release Notes: Generics". Go Programming Language. March 15, 2022. Retrieved March 16, 2022. 
+ ^ "A Tutorial for the Go Programming Language". The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared. 
+ ^ "go - The Go Programming Language". golang.org. 
+ ^ "How to Write Go Code". golang.org. The packages from the standard library are given short import paths such as "fmt" and "net/http". For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path 
+ ^ a b Pike, Rob (September 18, 2012). "Concurrency is not Parallelism". 
+ ^ a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005. 
+ ^ "Effective Go". golang.org. 
+ ^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley. 
+ ^ "The Go Memory Model". Retrieved April 10, 2017. 
+ ^ "Go Concurrency Patterns". golang.org. 
+ ^ Graham-Cumming, John (August 24, 2013). "Recycling Memory Buffers in Go". 
+ ^ "tree.go". 
+ ^ Cheslack-Postava, Ewen. "Iterators in Go". 
+ ^ Kernighan, Brian W. "A Descent Into Limbo". 
+ ^ a b "The Go Memory Model". Retrieved January 5, 2011. 
+ ^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015. 
+ ^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137. 
+ ^ Go Authors. "Share Memory By Communicating". 
+ ^ Cox, Russ. "Off to the Races". 
+ ^ Pike, Rob (October 25, 2012). "Go at Google: Language Design in the Service of Software Engineering". Google, Inc. "There is one important caveat: Go is not purely memory safe in the presence of concurrency." 
+ ^ "Frequently Asked Questions (FAQ) - the Go Programming Language". 
+ ^ "A Story of a Fat Go Binary". September 21, 2018. 
+ ^ "Go Programming Language Specification, SectInterface types". golang.org. 
+ ^ "Go Programming Language Specification, SectType assertions". golang.org. 
+ ^ All Systems Are Go. informIT. August 17, 2010. Retrieved June 21, 2018. 
+ ^ "Language Design FAQ". November 13, 2009. Archived from the original on November 13, 2009. 
+ ^ "Proposal for an exception-like mechanism". golang-nuts. March 25, 2010. Retrieved March 25, 2010. 
+ ^ "Weekly Snapshot History". golang.org. 
+ ^ "Panic And Recover". Go wiki. 
+ ^ "Effective Go". golang.org. 
+ ^ "gofmt - The Go Programming Language". golang.org. Retrieved February 5, 2021. 
+ ^ "golang/lint public archive". github.com. 
+ ^ a b "Effective Go". golang.org. 
+ ^ "Unused local variables". yourbasic.org. Retrieved February 11, 2021. 
+ ^ "Unused package imports". yourbasic.org. Retrieved February 11, 2021. 
+ ^ "Code Review Comments". GitHub. Retrieved July 3, 2018. 
+ ^ "Talks". Retrieved July 3, 2018. 
+ ^ "Errors Are Values". Retrieved July 3, 2018. 
+ ^ "fmt - The Go Programming Language". golang.org. Retrieved April 8, 2019. 
+ ^ "testing - The Go Programming Language". golang.org. Retrieved December 27, 2020. 
+ ^ avelino/awesome-go: A curated list of awesome Go frameworks, libraries and software, retrieved January 10, 2018 
+ ^ "EdgeX Foundry Project". GitHub. Retrieved February 6, 2021. 
+ ^ "ipfs/go-ipfs". GitHub. Retrieved June 1, 2018. 
+ ^ "lightningnetwork/lnd", GitHub, retrieved April 29, 2020 
+ ^ "NATS - Open Source Messaging System | Secure, Native Cloud Application Development". 
+ ^ "arctil - Web security assesment tool". 
+ ^ "Test driven development in Go | Cacoo". Cacoo. July 29, 2016. Retrieved June 1, 2018. 
+ ^ "Chango". GitHub. 
+ ^ Heller, Martin (July 17, 2014). "Review: Cloud Foundry brings power and polish to PaaS". JavaWorld. Retrieved January 22, 2019. 
+ ^ Graham-Cumming, John (July 3, 2012). "Go at CloudFlare". 
+ ^ Graham-Cumming, John (November 11, 2013). "What we've been doing with Go". 
+ ^ "Go at CoreOS". November 25, 2014. 
+ ^ "Couchbase". GitHub. 
+ ^ Lee, Patrick (July 7, 2014). "Open Sourcing Our Go Libraries". 
+ ^ "Official Go implementation of the Ethereum protocol". GitHub. ethereum. April 18, 2020. 
+ ^ "Why we use Ruby on Rails to build GitLab". GitLab. Retrieved February 6, 2021. Ruby was optimized for the developer, not for running it in production," says Sid. "For the things that get hit a lot and have to be very performant or that, for example, have to wait very long on a system IO, we rewrite those in Go ... We are still trying to make GitLab use less memory. So, we'll need to enable multithreading. When we developed GitLab that was not common in the Ruby on Rails ecosystem. Now it's more common, but because we now have so much code and so many dependencies, it's going to be a longer path for us to get there. That should help; it won't make it blazingly fast, but at least it will use less memory{{cite web}}: CS1 maint: url-status (link) 
+ ^ "dl.google.com: Powered by Go". golang.org. 
+ ^ Welsh, Matt (August 18, 2013). "Rewriting a Large Production System in Go". 
+ ^ Symonds, David. "High Performance Apps on Google App Engine". 
+ ^ "Mongo DB". GitHub. April 18, 2020. 
+ ^ "The Netflix Tech Blog: Application data caching using SSDs". May 25, 2016. 
+ ^ "golang/go". GitHub. April 18, 2020. 
+ ^ Sacks, Steven. "Search & Advances". plug.dj tech blog. Archived from the original on June 11, 2015. Retrieved June 10, 2015. 
+ ^ Jenkins, Tim (March 6, 2014). "How to Convince Your Company to Go With Golang". SendGrid's Email Deliverability Blog. 
+ ^ Bourgon, Peter. "Go at SoundCloud". Archived from the original on November 11, 2013. 
+ ^ "Go at Google I/O and Gopher SummerFest - The Go Blog". golang.org. 
+ ^ TWSTRIKE (April 17, 2020). "CoyIM". ThoughtWorks STRIKE team. 
+ ^ Hiltner, Rhys (July 5, 2016). "Go's march to low-latency GC". 
+ ^ "How We Built Uber Engineering's Highest Query per Second Service Using Go". Uber Engineering Blog. February 24, 2016. Retrieved March 2, 2016. 
+ ^ Simionato, Michele (November 15, 2009). "Interfaces vs Inheritance (or, watch out for Go!)". artima. Retrieved November 15, 2009. 
+ ^ Astels, Dave (November 9, 2009). "Ready, Set, Go!". engineyard. Retrieved November 9, 2009. 
+ ^ jt (January 11, 2010). "Google's Go Wins Programming Language Of The Year Award". jaxenter. Retrieved December 5, 2012. 
+ ^ "TIOBE Programming Community Index for June 2015". TIOBE Software. June 2015. Retrieved July 5, 2015. 
+ ^ Eckel, Bruce (August 27, 2011). "Calling Go from Python via JSON-RPC". Retrieved August 29, 2011. 
+ ^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days. 
+ ^ Metz, Cade (July 1, 2011). "Google Go strikes back with C++ bake-off". The Register. 
+ ^ Brownlee, John (November 13, 2009). "Google didn't google "Go" before naming their programming language'". Archived from the original on December 8, 2015. Retrieved May 26, 2016. 
+ ^ Claburn, Thomas (November 11, 2009). "Google 'Go' Name Brings Accusations Of Evil'". InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010. 
+ ^ a b "Issue 9 - go - I have already used the name for *MY* programming language". Github. Google Inc. Retrieved October 12, 2010. 
+ ^ Yager, Will. "Why Go is not Good". Retrieved November 4, 2018. 
+ ^ Dobronszki, Janos. "Everyday Hassles in Go". Retrieved November 4, 2018. 
+ ^ "Why are there braces but no semicolons? And why can't I put the opening brace on the next line?". Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style. 
+ ^ "I want off Mr. Golang's Wild Ride". February 28, 2020. Retrieved November 17, 2020. 
+ ^ "proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088". GitHub. May 16, 2019. Retrieved November 17, 2020. 
+ ^ Tu, Tengfei (2019). "Understanding Real-World Concurrency Bugs in Go" (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect{{cite web}}: CS1 maint: url-status (link) 

Further reading[edit]

+ Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1st ed.). Addison-Wesley Professional. p. 400. ISBN 978-0-13-419044-0. 
+ Bodner, Jon (March 2021). Learning Go (1st ed.). O'Reilly. p. 352. ISBN 9781492077213.

External links[edit]

{} {Wikimedia Commons has media related to Go (programming language).}

+ Official website 

Programming languages

+ Comparison 
+ Timeline 
+ History

+ Ada 
+ ALGOL 
+ APL 
+ Assembly 
+ BASIC 
+ C 
+ C++ 
+ C# 
+ COBOL 
+ Erlang 
+ Forth 
+ Fortran 
+ Go 
+ Haskell 
+ Java 
+ JavaScript 
+ Kotlin 
+ Lisp 
+ Lua 
+ ML 
+ Pascal 
+ Perl 
+ PHP 
+ Prolog 
+ Python 
+ R 
+ Ruby 
+ Rust 
+ SQL 
+ Shell 
+ Simula 
+ Smalltalk 
+ Swift 
+ more...

+ Category 
+ Lists: Alphabetical 
+ Categorical 
+ Generational 
+ Non-English-based

Google free and open-source software

{Software}{

{Applications}{

+ Chromium 
+ OpenRefine 
+ Tesseract

{Programming languages}{

+ Dart 
+ Go 
+ Sawzall

{Frameworks and
development tools}{

+ AMP 
+ Angular 
+ AngularJS 
+ Beam 
+ Bazel 
+ Blockly 
+ Closure Tools 
+ Cpplint 
+ FlatBuffers 
+ Flutter 
+ Gears 
+ Gerrit 
+ Guava 
+ gRPC 
+ Gson 
+ Guetzli 
+ Guice 
+ gVisor 
+ Kubernetes 
+ LevelDB 
+ libvpx 
+ NaCl 
+ OR-Tools 
+ Polymer 
+ TensorFlow

{Operating systems}{

+ AOSP 
+ Chromium OS 
+ Fuchsia 
+ gLinux 
+ Goobuntu

{Related}{

+ Code-in 
+ Google LLC v. Oracle America, Inc. 
+ Open Source Security Foundation 
+ Summer of Code

Rob Pike

{Operating systems}{

+ Plan 9 from Bell Labs 
+ Inferno

{Programming languages}{

+ Newsqueak 
+ Limbo 
+ Sawzall 
+ Go

{Software}{

+ acme 
+ Blit 
+ sam 
+ rio 
+ 81/2

{Publications}{

+ The Practice of Programming 
+ The Unix Programming Environment

{Other}{

+ Renee French 
+ Mark V. Shaney 
+ UTF-8

Ken Thompson

{Operating systems}{

+ Unix 
+ Plan 9 from Bell Labs 
+ Inferno

{Programming languages}{

+ B 
+ Go

{Software}{

+ Belle 
+ ed 
+ grep 
+ sam 
+ Space Travel 
+ Thompson shell

{Other}{

+ UTF-8

Authority control 

{National libraries}{

+ Germany 
+ Israel 
+ United States

{Other}{

+ Faceted Application of Subject Terminology

Retrieved from "https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1095996757"

Categories: 

+ Go (programming language)
+ 2009 software
+ American inventions
+ C programming language family
+ Concurrent programming languages
+ Cross-platform free software
+ Cross-platform software
+ Free compilers and interpreters
+ Google software
+ High-level programming languages
+ Procedural programming languages
+ Programming languages
+ Programming languages created in 2009
+ Software using the BSD license
+ Statically typed programming languages
+ Systems programming languages

Hidden categories: 

+ CS1 maint: url-status
+ Articles with short description
+ Short description matches Wikidata
+ Use mdy dates from October 2018
+ All articles with failed verification
+ Articles with failed verification from June 2022
+ All articles with unsourced statements
+ Articles with unsourced statements from December 2016
+ Articles to be expanded from March 2022
+ All articles to be expanded
+ Articles using small message boxes
+ Commons category link is on Wikidata
+ Articles prone to spam from June 2013
+ Articles with GND identifiers
+ Articles with J9U identifiers
+ Articles with LCCN identifiers
+ Articles with FAST identifiers

Navigation menu

Personal tools 

+ Not logged in
+ Talk
+ Contributions
+ Create account
+ Log in

Namespaces 

+ Article
+ Talk

English 

Views 

+ Read
+ Edit
+ View history

More 

Navigation 

+ Main page
+ Contents
+ Current events
+ Random article
+ About Wikipedia
+ Contact us
+ Donate

Contribute 

+ Help
+ Learn to edit
+ Community portal
+ Recent changes
+ Upload file

Tools 

+ What links here
+ Related changes
+ Upload file
+ Special pages
+ Permanent link
+ Page information
+ Cite this page
+ Wikidata item

Print/export 

+ Download as PDF
+ Printable version

In other projects 

+ Wikimedia Commons

Languages 

+ Afrikaans
+ ^^^^^^^
+ Az^rbaycanca
+ ^^^^^
+ ^^^^^^^^^^
+ ^^^^^^^^^
+ Brezhoneg
+ Catala
+ ^e^tina
+ Dansk
+ Deutsch
+ ^^^^^^^^
+ Espanol
+ Euskara
+ ^^^^^
+ Francais
+ ^^^^^^^
+ ^^^
+ ^^^^^^^
+ Hrvatski
+ Bahasa Indonesia
+ Islenska
+ Italiano
+ ^^^^^
+ ^^^^^^^^
+ Latvie^u
+ Magyar
+ ^^^^^^
+ Bahasa Melayu
+ Nederlands
+ ^^^
+ Norsk bokmal
+ O^zbekcha/^^^^^^^
+ Polski
+ Portugues
+ Roman^
+ ^^^^^^^
+ ^^^^^
+ Simple English
+ Sloven^ina
+ Sloven^^ina
+ ^^^^^^ / srpski
+ Suomi
+ Svenska
+ ^^^^^
+ Turkce
+ ^^^^^^^^^^
+ ^^^^
+ Ti^ng Vi^t
+ ^^
+ ^^
+ ^^

Edit links

+ This page was last edited on 1 July 2022, at 17:02 (UTC). 
+ Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia(R) is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. 


=======asdf9======== Q\Go K8s\$\0b56989882eb99c2f72d6ca5603156f4.txt
https://www.whizlabs.com/blog/introduction-to-kubernetes/
TITLE: Kubernetes Tutorial - An Introduction to Kubernetes (NEW)

This blog post is all about Kubernetes which is an open-source platform that helps to manage container workloads in Cloud. Here, In this Kubernetes Tutorial, we help you to learn Kubernetes from the scratch.

Kubernetes has emerged as one of the most exciting technologies in the world of DevOps that has gained a lot of attention of the DevOps professionals. Kubernetes, or commonly known as k8s, is an open-source, portable and extensible platform, for managing containerized workload and services. This container orchestration system is put to automating the deployment, scaling, as well as management of the application. 

As one of the top DevOps tools, the primary aim of Kubernetes is to provide a platform that allows streamlining of deployment, scaling, and operations of application containers across a cluster of hosts. Plenty of cloud services provide Kubernetes based platform as a service (PaaS) as well as infrastructure as a service (IaaS).

Currently, Kurbenetes works with a plethora of tools like Docker. Kubernetes has helped in optimizing the app development for cloud, and naturally, many professionals are driven to learn Kubernetes and excel in it. In this article, we'll help you understand the basics of Kubernetes through an introduction to Kubernetes 

Introduction to Kubernetes

The introduction to Kubernetes first happened in the year 2014, by none other than the technology giant Google. A few Google engineers worked upon it, alongside Brendan Burns, Joe Breda, and Craig McLuckie. The design and development of Kubernetes relied heavily upon the Borg System of Google. Incidentally, a majority of the contributors had already worked upon Borg. 

The project was initially given the name of Project Seven of Nine, based on a Star Trek reference. The logo contains seven spokes, which stand for that codename. They used C++ language to write the original Borg project. However, the rewritten system is implemented in Go. Kubernetes v1.0 was introduced in 2015 for use. Google, along with the release, decided to partner with Linux Foundation. 

Together they formed the Cloud Native Computing Foundation, and Kubernetes was on offer as a seed technology. By March 2018, Kubernetes reached the 9th place in commits at GitHub and 2nd in authors and issues to Linux Kernel. 

What are the Kubernetes objects?

It is essential to learn Kubernetes objects to understand how Kubernetes works. The Kubernetes operates as a set of building blocks that that collectively provide a mechanism for applications. It is extensible and loosely coupled to meet up the different workload expectations. The Kubernetes Objects are the resources that help to exert control over the computer and storage resources. 

The key objects are:

+ Pods: Pod is the basic scheduling unit of a Kubernetes. A single pod can consist of a single or even more container that are co-located on the same host machine and can easily share resources. It can add a higher level of abstraction by grouping containerized components. Each pod also has a unique Pod IP address. 
+ Services: A set of pods, that can work together, as one tier or even multi-tier is known as Kubernetes services. Kubernetes can provide two modes of service discovery, using Kubernetes DNS or using environmental variables. 
+ Volumes: In the Kubernetes container the filesystems provide ephemeral storage. It implies that upon restarting the container will wipe out the data, making the storage very limiting. However, the Kubernetes volumes provide lifelong storage in the pod itself. 
+ Namespaces: To ensure that the non-overlapping of resources, Kubernetes provides a partition known as namespaces. They can be used in the case of many users, teams, or projects. 

How does Kubernetes work?

The Kubernetes has a primary/replica architecture. Kubernetes architecture consists of a lot of components. These components can be divided into the ones that manage an individual node, and the others are a part of the control plane. It is essential to understand the architecture if you wish to learn Kubernetes. 

Key areas of Kubernetes architecture are:

Kubernetes Node: 

A node is a machine which deploys the workloads or containers. It is also commonly referred to as a Minion or Worker. Each node is the cluster needs to run a container runtime like Docker. Apart from that, it requires a series of other components for easy communication with the primary, for network configuration of these components. The other components are:

+ Kubelet: A kubelet is a component that ensures that each node is in a running state and that all the containers are healthy. The process of stating, stopping, and maintaining application containers is taken care by kubelet. It monitors the state of the pod, and if they are not in the desired state, the pod re-deploys the same node. 
+ Kube-proxy: The Kube-proxy handles the implementation of a load balancer and a network proxy. The primary aim of this component is to route traffic to the right container on the basis of IP and port number. 
+ Container runtime: A container resides inside the pod. A container is the lowest level of micro-services. It ideally holds running applications, libraries, and their dependencies. 

Kubernetes Architecture 

Kubernetes Control Plane:

The primary or the control plane is the major component of the Kubernetes architecture. It is responsible for managing the workload and directing the communication across the systems. The control plane consists of various parts, each having its own process. They can run either on a single primary node and also on multiple primaries supporting high-availability clusters. The various components are:

+ etcd: etcd is a data store which a CoreOS can develop. It is lightweight, persistent, distributes, and stores key-value configuration data. 
+ API Server: The API server is yet another important component of the Kubernetes. It server Kubernetes using JSON, over HTTP. The API can provide for both the internal and external interface to Kubernetes. 
+ Scheduler: A schedule is a pluggable component which selects which node an unscheduled pod will run on, based upon the resource availability. It is the duty of the scheduler to make sure that the workload is not scheduled in excess of the available resources. 
+ Controller Manager: A controller is a reconciliation loop, that works to drive actual cluster state towards the desired cluster state. It is ensured by the management of the set of controllers. 

Add-ons:

The add ons are run through pods and services, and they operate just like any other application that is running in a cluster. The only underlying difference here is that they implement the features of Kubernetes cluster. The few important add ons are: 

+ DNS 
+ Web UI 
+ Container resource monitoring 
+ Cluster-level logging 

Kubernetes certifications are among the top 5 DevOps certifications. Read our previous blog to know about Top DevOps Certifications.

What are the Uses of Kubernetes?

The production of real apps can span across multiple containers. These containers need to be deployed across multiple server hosts. Here, the problem arises that of the security for containers being multi-layered and complicated. Kubernetes come to the rescue here. It easily provides the management capabilities and orchestration which is required to deploy the containers at a scale. The orchestration allows one to build application services that can span over multiple containers, schedule these containers over clusters, scale these containers, and manage the health of these containers as well. By learning Kubernetes and using them, you can easily ensure IT security.

For better functioning, Kubernetes needs to be integrated with various other components as well. They are storage, network, security, telemetry, and many others. Only then it can provide a comprehensive and complete infrastructure.

Kubernetes can also fix many problems with container proliferation. It refers to the sorting of containers together in a pod. The pod adds a layer of abstraction to the grouped containers, which can help in scheduling workload and providing necessary services to these containers, like storage and network. Other components of the Kubernetes can help with loading the balance across these pods. They make sure that you have the right number of containers which are running to support the workloads. 

What are the Advantages of Kubernetes? 

With the introduction of Kubernetes, the developers enjoy many benefits. Majorly, it provides the platform to schedule and also runs a container on clusters of physical or virtual machines. Furthermore, it can also help in fully implementing and relying on the container based infrastructure. Since the Kubernetes runs on automation od the operational tasks, it allows you to do the same things like other platforms, but for the containers. 

Some major advantages to learn Kubernetes are:

+ Make better use of the hardware to maximize the resources needed to run enterprise apps 
+ Orchestrate containers over multiple hosts 
+ Mount or add storage to run apps 
+ Control and automate application deployment 
+ Scale the containerized applications 
+ Health check and also self-heal the apps 

How to Learn Kubernetes?

If you pose a keen interest in learning Kubernetes, and to make use of the technology, you can avail proper tutorials. The tutorial covers all the basic of the Kubernetes orchestration systems. It includes a few modules which contain background information about the features, concepts, and also offers an interactive online study material. This tutorial will help a candidate to lean Kubernetes, and master the task of managing a simple cluster, and also the containerized applications. 

The online tutorials teach about:

+ Deploying a containerized application on a cluster 
+ Scale the deployment 
+ Update the application with a new version of the software 
+ Debug the containerized application 

Let us also see how to deploy Kubernetes clusters on MacOS using "minikube" which is intended for the development purpose. 

What is Minikube

Minikube is a utility allowing you to run Kubernetes(K8s) on the local machine. Minikube runs a single node cluster on the local machine so that we can try Kubernetes locally while developing the applications. Minikube is useful for those who are new to K8s and it enables you to try out Kubernetes deployments and test configurations. 

Kubernetes Basics

Let us recollect some of the basics before starting to install the minikube.

How to install Minikube?

Step 1: 

Run the following command to check if virtualization is supported on the MacOS. 

sysctl -a | grep machdep.cpu.features

If you see the VMX in the output, the virtualization feature is enabled on your system. 

Step 2: 

We need to install kubectl. If you have already installed it, please confirm by running the command:

kubectl version

If not, install the kubectl by running the following command:

brew install kubectl

Step 3: 

In this step, we will install Hypervisor. Various hypervisors are available, install any of the following. 

+ Hyperkit 
+ VirtualBox 
+ VMware Fusion 

Run the following command to install the Hyperkit.

brew install hyperkit

To verify that we have installed both kubectl and hyperkit, let's run the following command. 

brew list

Step 4: 

We have installed the necessary tools. Now, let's install the minikube. Run the following command to install the minikube on MacOS.

brew install minikube

Run the following command to make sure the minikue is installed successfully.

minikube version

Step 6: 

We have successfully installed the minikube. Let's start the minikube by running the following command. 

minikube start

We can verify the status of minikube by running the following command. 

minikube status

Now, we have successfully installed Minikube and are ready to play with Kubernetes local cluster.

How to install Kubernetes on Ubuntu with kubeadm

In this tutorial, we will see how to install Kubernetes on Ubuntu 20.04. 

Kubernetes works on various cloud platforms or even on-premise servers. K8s works by managing clusters at scale. A cluster is a set of hosts running containerized applications and services. 

For this tutorial, I have created two Ubuntu EC2 instances on Amazon Web Services (AWS). You can utilize Whizlabs HandsOn Labs platform to create instances and learn to install Kubernetes.

Prerequisites before installing Kubernetes on Ubuntu

+ 2 or more Ubuntu 20.04 Linux servers. The minimum system requirements for Kubernetes is 2CPUs and 2 GB of RAM 
+ SSH access to the servers with root privileges 
+ One server will act as a master node and the other will act as a worker node. 
+ Both servers needs to be able to connect with each other 
+ Docker installed on both of the nodes. (If you don't have the Docker installed, you can follow this article and install Docker container to proceed further) 

Installing Kubernetes on Ubuntu 20.04

I assume that you have the above set up and ready to install kubernetes on it. Let's see the steps involved in installing kubernetes. Please remember that the following steps need to be run on both the Ubuntu nodes. 

Step 1: Install Packages

Connect to the nodes using SSH connection and run the following commands one by one on both systems. 

sudo apt install apt-transport-https curl

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" >> ~/kubernetes.list sudo mv ~/kubernetes.list /etc/apt/sources.list.d

After running the above commands, let's update the nodes once. 

sudo apt update

Step 2: Install Kubernetes Tools

In this step, we will be installing the kubernetes tools kubectl, kubeadm, kubelet, kubernetes-cni on both the nodes. 

Installing Kubectl 

The kubectl is the kubernetes command line tool that allows us to run the commands inside a cluster. 

sudo apt install kubectl

If you get the error, try running the command apt-get-update and then run this command again.

On a successful install, you'll get the below message on the terminal.

Installing Kubeadm

Kubectl is a tool developed and maintained by the official Kubernetes(K8s) community. Kubeadm helps setting up a minimum viable kubernetes cluster without much complex configuration.

sudo apt install kubeadm

Installing Kubelet

Kubelet is an agent that will be running on each node and handles the communication between the master node and worker nodes.

sudo apt install kubelet

Installing kubernetes-cni

The kubernetes-cni enables the networking and communication between the containers. 

sudo apt-get install -y kubernetes-cni

Step 3: Setting up the hostnames

For easier identification, we can set unique hostnames to the nodes. For this tutorial, I have named the nodes as whizlabs-master and whizlabs-worker. 

You can set the hostnames as you wish by running the following command. 

sudo hostnamectl set-hostname whizlabs-master

To set the hostnames for the worker, run the following command.

sudo hostnamectl set-hostname whizlabs-worker

Make sure you run these commands on respective machines. Run the first command on the node which you want to use as a master and the second on a worker node.

Step 4: Disable swap memory

The swap memory must be disabled on all the nodes to run kubernetes. 

sudo swapoff -a

The above command will disable the swap memory temporarily or until the system reboot. We can permanently disable the swap memory by making the changes to fstab file. 

Step 5: Let Iptables see bridged traffic

Run the following commands one by one. We need to set the value to 1 for the master and worker nodes to correctly see bridged traffic. 

lsmod | grep br_netfilter

sudo modprobe br_netfilter

sudo sysctl net.bridge.bridge-nf-call-iptables=1

Step 6: Docker driver setup 

Kubernetes recommends that the docker should run with systemd as the driver. 

sudo mkdir /etc/docker 

cat <<EOF | sudo tee /etc/docker/daemon.json 

{ "exec-opts": ["native.cgroupdriver=systemd"], 

"log-driver": "json-file", 

"log-opts": { "max-size": "100m" }, 

"storage-driver": "overlay2" 

EOF

Also run the following commands to enable docker on the system bootup.

sudo systemctl enable docker

sudo systemctl daemon-reload

sudo systemctl restart docker

Step 7: Initialize the Kubernetes Master Node

Run the following command on the master node.

sudo kubeadm init -pod-network-cidr=10.1.0.0/16

Step 8: Deploying a POD network

Let us check the firewall status and deploy a POD network. The default port for the kubernetes is 6443. So, we need to add a firewall rule on the both master and worker nodes to allow 6443. Run the following command to add firewall rules.

sudo ufw allow 6443 

sudo ufw allow 6443/tcp

To deploy a pod network, run the following commands on the master node.

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml

To check if all the services are running as expected, run the following command:

kubectl get pods -all-namespaces

Step 9: Join worker nodes to the cluster

Now, we have one master node and one worker node. Login to the worker node and run the following command:

sudo kubeadm join 127.0.0.188:6443 -token u81y02.91gqwkxx6rnhnnly -discovery-token-ca-cert-hash sha256:4482ab1c66bf17992ea02c1ba580f4af9f3ad4cc37b24f189db34d6e3fe95c2d

Now, go back to the master node and check if the worker node is showing on the cluster. 

kubectl get nodes

We have successfully set up the kubernetes cluster. Our cluster is now ready to run the applications on it. You can now start creating the kubernetes deployments and test the applications in real time. 

To try a sample application deployment, you can run the following command to deploy the nginx web server. 

kubectl create deployment nginx -image=nginx

The above command will deploy the application. To make the service accessible to the internet, we need to create a service. For that, we need to run the following command to expose the port 80.

kubectl create service nodeport nginx -tcp=80:80

Try these commands and learn to install Kubernetes on Ubuntu 20.04 .

Summary

Though the concept of containers has existed for over a decade now, its popularity is only recent. Mainstream Unix-based operating systems had built-in support for the containers, but it was truly only Docker that could democratize the containers by making them accessible and manageable. Kubernetes is based on 15 years worth of experience of running production workloads at Google. 

The container orchestration has significantly impacted each and every aspect of the modern day software development and deployment. Kubernetes plays a major role in driving the adoption of containers in both successful enterprises as well as emerging startups. 

If you want to learn Kubernetes and give your DevOps career a new edge, join Kubernetes online course and become an expert on Kubernetes with AWS and Docker.

Have any questions? Just write in the comment section below or submit at Whizlabs Helpdesk, we'll be happy to answer you.

+ About the Author
+ More from Author

About Dharmalingam N

Dharmalingam.N holds a master degree in Business Administration and writes on a wide range of topics ranging from technology to business analysis. He has a background in Relationship Management. Some of the topics he has written about and that have been published include; project management, business analysis and customer engagement.

+ 11 Kubernetes Security Best Practices you should follow in 2022 - May 30, 2022
+ How to run Kubernetes on AWS - A detailed Guide! - May 30, 2022
+ Free questions on CompTIA Network+ (N10-008) Certification Exam - April 13, 2022
+ 25 Free Questions on Microsoft Azure AI Fundamentals (AI-900) - March 25, 2022
+ How to Integrate Jenkins with GitHub? - March 22, 2022
+ How to Create CI/CD Pipeline Inside Jenkins ? - March 22, 2022
+ How to Install Jenkins on Amazon EC2 (Amazon Linux AMI) ? - March 22, 2022
+ 25 Free Questions on CompTIA A+ (220-1002) Core 2 Certification - March 10, 2022

Spread the love

Previous articleDocker Certified Associate Online Course Launched

Next articleHow to Create a Skill for Amazon Alexa?

Dharmalingam N

RELATED ARTICLESMORE FROM AUTHOR

Amazon Web Services 

25 Free Questions on AWS Certified DevOps Engineer Professional Exam

DevOps 

25 Free Questions on Docker Certified Associate Exam

DevOps 

Free Questions on HashiCorp Consul Associate Certification Exam

LEAVE A REPLY Cancel reply

Please enter your comment!

Please enter your name here

You have entered an incorrect email address!

Please enter your email address here

+ Terms of Use 
+ Refund Policy 
+ Privacy policy 
+ Forum 
+ Legal 
+ Contact Us 

(c) Copyright 2021. Whizlabs Education INC. All Rights Reserved. The certification names are the trademarks of their respective owners.

Popular Courses:

AWS Certified Solutions Architect Associate | AWS Certified Cloud Practitioner | Microsoft Azure Exam AZ-204 Certification | Microsoft Azure Exam AZ-900 Certification | Google Cloud Certified Associate Cloud Engineer | Microsoft Power Platform Fundamentals (PL-900) | AWS Certified SysOps Administrator Associate

Categories:

Cloud Computing | AWS | Azure | GCP | DevOps | Cyber Security | Microsoft Power Platform

Disclaimer:

PMI(R), PMBOK(R) Guide, PMP(R), PMI-RMP(R), PMI-PBA(R), CAPM(R), PMI-ACP(R) and R.E.P. Logo are registered trademarks of the Project Management Institute, Inc.
PRINCE2(R) is a [registered] trade mark of AXELOS Limited, used under permission of AXELOS Limited. All rights reserved.


=======asdf10======== Q\Go K8s\$\f9dfa5c86d83212ab08e99f3656ee8c6.txt
https://www.trio.dev/blog/golang-vs-rust
TITLE: Golang vs. Rust: Which One To Choose in 2022? | Trio Developers

Golang vs. Rust: Which Programming Language To Choose in 2022?

Cordenne Brewster * 9 min read 

With the new year, comes new ideas. And for you, this might mean new ideas to scale your tech startup. Or specifically, it might mean ranking Golang vs. Rust against each other to see what language would be best to optimize operations. If so, you've come to the right place.
While Go and Rust are not the most commonly used languages, they are still often compared for those who do consider using them. 

Both languages are, after all, one of the few languages developed in the aughts and twenty-tens, making them stand out in a room full of languages that have dipped their toes in the past two centuries. 

When Golang vs. Rust gets its due diligence, it will be clear that the two languages have strong similarities. Although from the perspective of six distinct categories, it's clear that Rust has more advantages than go. 
This Go vs. Rust side-by-side comparison distinguishes the languages using the following attributes:

+ Performance 
+ Features 
+ Ease of Development 
+ Maintenance 
+ Popularity 
+ Community 

This article will highlight the differences of each language that will ultimately lead you to making the right decision for your tech stack. Keep reading to find out what they are!

Golang vs. Rust: Side-by-Side Comparison

Check out this Golang vs. Rust side-by-side comparison. This way, you can make sure you're getting the best of your desired features from your chosen language.

Performance

Both Go and Rust hold their performance measures as prized possessions. As new languages, it's pertinent that they not only perform well, but better than the languages that came before them. 

Although the two languages do seem to be faster than other languages with their feature set, the question now is how they perform against each other? Well, a simple benchmark test proves that Rust is faster than Go in a multitude of tasks. 

TLDR: Where speed and performance are concerned, Rust out-performs Go. 

Features 

Key features of Go like binaries and package management pale in comparison to Rust's long list of features: zero-cost abstraction, error messages, move semantics, data race prevention, pattern matching, etc. 

TLDR: Golang vs. Rust highlights that Rust is more feature-heavy than Go. Rust wins. 

Ease & Speed of Development 

Go's readability makes it easy to learn and therefore coding should be a relative breeze. With Rust, in contrast, sophisticated concepts like borrowing and ownership make the language more difficult to understand. Rust has a steep learning curve and it's not afraid to admit that.

TLDR: Go is easier to learn and use than Rust. Go wins.

Maintenance

Maintenance entails everything you need to do to ascertain your programs are running properly and continue to do so. Short story short, maintaining your codebase will be easier to do in Go versus Rust, because Go code is just all-around simpler. 

TLDR: Due to Rust's complexity, Go will be easier to maintain than Rust. Go wins. 

Community

Open-source languages tend to have strong communities of support behind them. Developer communities play a big part in helping newcomers to a language become familiar with its features and how to use it best. 

Naturally, measuring the support of a community is not very objective. But many bloggers never fail to boast about Rust's strong community, which is a good indicator of its robustness. 

TLDR: Without a doubt, both Rust and Go have strong communities, but Rust's community gets the most visibility in this Golang vs. Rust stand-off. Simply put, Rust wins. 

Popularity

It's hard to define the popularity of languages as young as Go and Rust. In spite of all the features and advantages you've gotten a glimpse of, neither Rust nor Go could tackle the popularity of classic languages like JavaScript, Python, or Java. 

Less than 10% of developers use either Rust or Go according to Stack Overflow. Still, Go is stationed in the 14th spot for top language and Rust lags behind in the 26th spot. 

These positions come from the TIOBE Index for January 2021 which uses several factors to determine popularity like popular search engines, computer science courses, and the word of skilled engineers. 

TLDR: In comparing Golang vs. Rust, Go is more popular than Rust. 

Now that you've seen Golang vs. Rust side by side, here's a more in-depth look at Rust and Golang.

What Is Golang?

Go - often stylized as 'Golang' - is a statically typed, compiled programming language. Designed by Google developers, the language is modeled after C and with the intent to compete against C++. Golang is also compared to Python because of its uncomplicated syntax. 

As Go is statically typed, this means the language is stricter when it comes to variable declarations. The benefit of this restrictive behavior is better error detection, especially where syntax is concerned. 

Compilers typically perform static type-checking towards this effect. Compiled languages are converted (or compiled) to machine code before execution. In consequence, compiled languages are overall faster than interpreted languages. 

Compiled languages also offer more control of hardware elements. This, in addition to the intentional design of the language, means memory management and multithreading are pointed Go features. 

Garbage collection is one Go component ensuring effective memory management. One of the disappointments of C that Go hopes to improve on is its lack of memory safety. Go, in turn, uses a garbage collector to allocate memory in managed heaps. 

In short, this means unused memory is used for new objects, and unused objects are 'trashed' from memory. Garbage collected programs tend to run faster given that they do not suffer from memory leaks. 

Another feature of Go with high notoriety is goroutines. Goroutines are a means of building functions or methods that can run concurrently with other functions or methods. 

Go's concurrency emphasizes the language's capacity for multithreading, the ability for a central processing unit (CPU) to process several things at once. Naturally, this leads to enhanced speed and efficiency. 

For trivia's sake, it's worth noting that Go was first announced in November 2009, aging the language a bit over a decade old. In effect, Go is significantly younger than its influencers such as Python and C, which were developed in the last century. 

What Are the Advantages of Golang?

To decide between Golang vs. Rust, it's probably a good idea for you to know just what Go has in store. The following are a few distinct advantages that make Go a good language for your next project. 

Comprehensive 

From Golang's tools to its libraries to its documentation, the language is fully comprehensive and ready to rock. But seriously, jokes aside, Go is equipped with extensive documentation, convenient tooling, and minimalistic dependencies. 

GoDoc - a Go package that extracts and generates documentation while you code - deserves a special shoutout. 

Fast

Many of the aforementioned features contribute to Go's marked performance. Speed, in particular - granted through garbage collection, swift compilation, and concurrency among other things - is likely Go's defining feature. 

Benchmarks show that Go can perform as much as 100 times faster than Python in some areas. Go is routinely faster than Java as well.

Portable

Go can be compiled nicely and neatly on multiple platforms. No more grappling over what operating system to run because of compatibility issues. Proceed with your preferred system. 

Readable

While Go's run-time efficiency is a C trait, Go borrows its readability from Python. The Go syntax is very accessible to the common programmer, particularly if they are fluent in English. 

Surface-level details like indentation and spacing are automized by gofmt. And golint does additional style checks. 

Go's ease of use prompts newcomers to take an immediate liking to the language. 

When Is the Use of Golang Recommended?

Go can be used for a range of different project types. That said, Go's 2019 survey results list web development, databases, and network programming as its primary usage cases. Most Go developers maintain that Go has an affinity for networking services due to its aptitude for concurrency. 

More often than not, Go is prized as a premier language for backend web development. Speedy execution on a web page is paramount to establishing brand awareness online in more ways than you might think. 

The language also provides official support for the Google Cloud Platform. Google Cloud offers a variety of services where the concept of cloud computing is integral to their execution. Hence Go does exceptionally well where high-performing cloud applications are involved.

Does using Go for your next project sound like a good idea? Consider talking to Trio about hiring Go developers. 

What Companies Use Golang?

Though Golang vs. Rust shouldn't be determined based on a popularity contest, knowing how and why major companies decide to use Go can help you better understand the language's potential. 

Google

Some believe a bit of corporate interest has a great effect on a technology's life span and performance. Whether or not this is true, the fact that Go was designed by Google engineers and always has the company's support in its corner should hint at Go's stability. 

Google's internal projects are regularly built using Go, including Google Chrome, Google Earth, and Youtube. 

Twitch

Twitch is a live streaming service where gamers find comfort in sharing gameplay videos. But with real-time chats and an unimaginable amount of videos being constantly streamed at once, overload is the name of the game. 

With Go, Twitch was able to improve its garbage collection. The refined memory management signifies a smoother user experience for Twitch users. 

SoundCloud

Soundcloud is yet another streaming service, but only for music. Recently, SoundCloud has become a popular platform for underground artists to make their debut. 

The platform sports both Golang and Ruby on Rails in its tech stack. Static analysis, a method of debugging code before execution, is one utility that won over SoundCloud's favor for Go. 

What Is Rust?

Rust is a statically typed, compiled programming language with support for multiple programming paradigms. The language was designed to prioritize safety and performance, with safe concurrency being the primary goal. 

Syntactically, Rust mirrors C++. Unlike Go or C++, garbage collection is not a feature of Rust; instead, Rust uses a borrow checker to validate memory safety.

The borrow checker enforces data ownership rules and prevents data races. The term data race describes two or more pointers accessing the same memory location. 

Programming in the large refers to the type of coding Rust was designed for. This type of programming involves large groups programming or small groups programming over an extended period of time. 

To allow for this type of programming, Rust works to accommodate and encourage highly concurrent and highly safe systems. 

Mozilla employees first started experimenting with what would later become Rust in 2006. After a stable release about three years later, Rust is now used in key parts of the Firefox browser. 

In the year 2016 and every year after, Rust has been voted the "most loved programming language," as recorded by the Stack Overflow Developer Survey. 

If any of this invigorates some positive bias towards Rust, you should talk to Trio about how to hire Rust developers for your next project. 

What Are the Advantages of Rust?

Any fair battle of the languages, including of course Golang vs. Rust, warrants a nonpartisan breakdown of each language. Now having a brief overview of Rust, here are its advantages.

Performant

By utilizing a compiler, Rust is almost by definition faster than your average interpreted language, like Python for example. But even when it comes to languages like Java with a JIT compiler specifically designed for enhancing performance, Rust is still faster. 

Intentional 

There are a couple of Rust characteristics which make it clear that Rust's designers had every intention to build a disciplined language that would embellish the developer experience. 

For one, Rust promises zero-cost abstractions. Abstractions are understood as the extra twists and turns involved in using high-level language. High-level code must be translated or interpreted to a low-level language and/or machine code to be run. 

These abstractions normally slow down performance, if only just a little bit. But in Rust, there is no difference in speed between low-level code and an abstract program. In other words, abstractions don't require sacrificing performance. They're without a cost. 

Safe

Rust uses a very strict compiler that checks each and every variable with scrutiny, ensuring memory safety. Type safety is perhaps Rust's greatest pitch. 

There are no segfaults (or segmentation faults. Segfaults cause programs to crash by attempting to read and write an illegal memory location. But Rust's ownership system analyzes your program's memory at compile-time, effectively preventing these issues. 

Concurrent

Concurrency is a well-known feature of Rust, in a similar fashion to Go. Rust's borrow checker, on the other hand, distinguishes the languages from others of its kind. The unique way in which Rust approaches concurrency equates to multithreading absent of undefined behavior. 

When Is the Use of Rust Recommended?

Rust is the type of programming language you can use nearly everywhere. But some places are better suited for it than others. 

For example, because of its high-quality performance and zero-cost abstractions, systems programming is one field where Rust thrives. Systems programmers are a type of software engineer who works closely on the hardware side of development. 

Since Rust takes some inspiration from C++, it's not surprising that the language would have some middle-level capabilities. Middle-level languages are the opportunistic compromise between low-level and high-level languages. 

They're often used to make operating systems or computer applications as they can handle the level of complexity it takes to manage memory on the hardware side of things. But despite the lack of abstraction, they're still readable by the human eye, which is rare to find in machine code. 

Although there is always some dissent in the developer community about what counts as a middle-level language or not, Rust is recognized for being a modern language with machine-oriented prospects. 

What Companies Use Rust?

Although Go has the support of several big-name companies, Golang vs. Rust wouldn't be a just comparison without letting Rust be privy to the same recognition. Here are some major companies using Rust right now. 

Firefox

As mentioned, Rust is integrated with Firefox. This integration is cleverly dubbed 'oxidation' and has a whole wiki page dedicated to the project. 

Although most people pick Chrome as a favorite, Firefox is actually better at keeping things efficient while handling multiple tabs at once. 

Yelp 

Yelp is an online platform centered around listing recommendations and hosting reviews for businesses, customarily restaurants. Developers at Yelp created their own Rust framework for A/B testing - a means of testing the performance of one page variant versus another. 

This framework is put to work across all Yelp apps and websites. Yelp decided to go with Rust because it's as fast as C, but safer. 

Dropbox

Dropbox is a cloud service that can store large amounts of data securely and with ease. Much of the core file-storage system depends on Rust, providing greater efficiency. 

Go and Rust shares a considerable amount of similarities. They are both very young languages, intentionally made, with memory safety and concurrency built-in. The languages also demonstrate higher performance than their competitors. 

The differences between these languages, needless to say, set them apart. Go is simple. Rust is complex. And their features and priorities differ in meaningful ways. 

Golang vs. Rust has produced a tie, meaning you'll have to decide for yourself what's best for your business. 

To get some more intel on how to go about hiring developers, check out this article on the Trio blog. 

Table of Contents 

Frequently Asked Questions 

What is Golang? 

Go - often stylized as 'Golang' - is a statically typed, compiled programming language. Designed by Google developers, the language is modeled after C and with the intent to compete against C++. Golang is also compared to Python because of its uncomplicated syntax.

What is Rust? 

Rust is a statically typed, compiled programming language with support for multiple programming paradigms. The language was designed to prioritize safety and performance, with safe concurrency being the primary goal.

When is the use of Golang recommended? 

Go can be used for a range of different project types. That said, Go's 2019 survey results list web development, databases, and network programming as its primary usage cases.

When is the use of Rust recommended? 

Rust is the type of programming language you can use nearly everywhere. But because of its high-quality performance and zero-cost abstractions, systems programming is one field where Rust thrives.

Read Next 

Synchronous vs. Asynchronous Programming: What's the Difference? 

Click here to learn how using synchronous and asynchronous programming can optimize your software projects!

Cordenne Brewster * 6 min read 

Top 11 JavaScript Developer Interview Questions for 2022 

Thinking about hiring a JavaScript developer! Here are 11 JavaScript developer interview questions to get you started!

Cordenne Brewster * 4 min read 

Top 12 Places To Find Developers For Your Company in 2022 

Stay tuned to learn just what those places are and how to find software developers in a variety of networks. 

Cordenne Brewster * 6 min read 

Build possibility with Trio

Our partners are growing and innovating their businesses faster with Trio.


=======asdf11======== Q\Go K8s\$\2e856dcbc0e296dd3aadf5eb9b6b0a9a.txt
https://www.bmc.com/blogs/what-is-kubernetes/
TITLE: What is Kubernetes (K8s)? A Kubernetes Basics Tutorial - BMC Software | Blogs

What is Kubernetes (K8s)? A Kubernetes Basics Tutorial

May 6, 2020 

9 minute read

Toye Idowu, Dan Merron 

In this post, we're going to explain Kubernetes, also known as K8s. In this introduction, we'll cover:

+ What Kubernetes is 
+ What it can't do 
+ The problems it solves 
+ K8s architectural components 
+ Installation 
+ Alternative options 

This article assumes you are new to Kubernetes and want to get a solid understanding of its concepts and building blocks.

(This article is part of our Kubernetes Guide. Use the right-hand menu to navigate.)

To begin to understand the usefulness of Kubernetes, we have to first understand two concepts: immutable infrastructure and containers.

+ Immutable infrastructure is a practice where servers, once deployed, are never modified. If something needs to be changed, you never do so directly on the server. Instead, you'll build a new server from a base image, that have all your needed changes baked in. This way we can simply replace the old server with the new one without any additional modification. 
+ Containers offer a way to package code, runtime, system tools, system libraries, and configs altogether. This shipment is a lightweight, standalone executable. This way, your application will behave the same every time no matter where it runs (e.g, Ubuntu, Windows, etc.). Containerization is not a new concept, but it has gained immense popularity with the rise of microservices and Docker. 

Armed with those concepts, we can now define Kubernetes as a container or microservice platform that orchestrates computing, networking, and storage infrastructure workloads. Because it doesn't limit the types of apps you can deploy (any language works), Kubernetes extends how we scale containerized applications so that we can enjoy all the benefits of a truly immutable infrastructure. The general rule of thumb for K8S: if your app fits in a container, Kubernetes will deploy it.

By the way, if you're wondering where the name "Kubernetes" came from, it is a Greek word, meaning helmsman or pilot. The abbreviation K8s is derived by replacing the eight letters of "ubernete" with the digit 8.

The Kubernetes Project was open-sourced by Google in 2014 after using it to run production workloads at scale for more than a decade. Kubernetes provides the ability to run dynamically scaling, containerised applications, and utilising an API for management. Kubernetes is a vendor-agnostic container management tool, minifying cloud computing costs whilst simplifying the running of resilient and scalable applications.

Kubernetes has become the standard for running containerised applications in the cloud, with the main Cloud Providers (AWS, Azure, GCE, IBM and Oracle) now offering managed Kubernetes services.

Kubernetes basic terms and definitions

To begin understanding how to use K8S, we must understand the objects in the API. Basic K8S objects and several higher-level abstractions are known as controllers. These are the building block of your application lifecycle.

Basic objects include:

+ Pod. A group of one or more containers. 
+ Service. An abstraction that defines a logical set of pods as well as the policy for accessing them. 
+ Volume. An abstraction that lets us persist data. (This is necessary because containers are ephemeral-meaning data is deleted when the container is deleted.) 
+ Namespace. A segment of the cluster dedicated to a certain purpose, for example a certain project or team of devs. 

Controllers, or higher-level abstractions, include:

+ ReplicaSet (RS). Ensures the desired amount of pod is what's running. 
+ Deployment. Offers declarative updates for pods an RS. 
+ StatefulSet. A workload API object that manages stateful applications, such as databases. 
+ DaemonSet. Ensures that all or some worker nodes run a copy of a pod. This is useful for daemon applications like Fluentd. 
+ Job. Creates one or more pods, runs a certain task(s) to completion, then deletes the pod(s). 

Micro Service

A specific part of a previously monolithic application. A traditional micro-service based architecture would have multiple services making up one, or more, end products. Micro services are typically shared between applications and makes the task of Continuous Integration and Continuous Delivery easier to manage. Explore the difference between monolithic and microservices architecture.

Images

Typically a docker container image - an executable image containing everything you need to run your application; application code, libraries, a runtime, environment variables and configuration files. At runtime, a container image becomes a container which runs everything that is packaged into that image.

Pods

A single or group of containers that share storage and network with a Kubernetes configuration, telling those containers how to behave. Pods share IP and port address space and can communicate with each other over localhost networking. Each pod is assigned an IP address on which it can be accessed by other pods within a cluster. Applications within a pod have access to shared volumes - helpful for when you need data to persist beyond the lifetime of a pod. Learn more about Kubernetes Pods.

Namespaces

Namespaces are a way to create multiple virtual Kubernetes clusters within a single cluster. Namespaces are normally used for wide scale deployments where there are many users, teams and projects.

Replica Set

A Kubernetes replica set ensures that the specified number of pods in a replica set are running at all times. If one pod dies or crashes, the replica set configuration will ensure a new one is created in its place. You would normally use a Deployment to manage this in place of a Replica Set. Learn more about Kubernetes ReplicaSets.

Deployments

A way to define the desired state of pods or a replica set. Deployments are used to define HA policies to your containers by defining policies around how many of each container must be running at any one time.

Coupling of a set of pods to a policy by which to access them. Services are used to expose containerised applications to origins from outside the cluster. Learn more about Kubernetes Services.

Nodes

A (normally) Virtual host(s) on which containers/pods are run.

Kubernetes architecture and components

A K8S cluster is made of a master node, which exposes the API, schedules deployments, and generally manages the cluster. Multiple worker nodes can be responsible for container runtime, like Docker or rkt, along with an agent that communicates with the master.

Master components

These master components comprise a master node:

+ Kube-apiserver. Exposes the API. 
+ Etcd. Key value stores all cluster data. (Can be run on the same server as a master node or on a dedicated cluster.) 
+ Kube-scheduler. Schedules new pods on worker nodes. 
+ Kube-controller-manager. Runs the controllers. 
+ Cloud-controller-manager. Talks to cloud providers. 

Node components

+ Kubelet. Agent that ensures containers in a pod are running. 
+ Kube-proxy. Keeps network rules and perform forwarding. 
+ Container runtime. Runs containers. 

What benefits does Kubernetes offer?

Out of the box, K8S provides several key features that allow us to run immutable infrastructure. Containers can be killed, replaced, and self-heal automatically, and the new container gets access to those support volumes, secrets, configurations, etc., that make it function.

These key K8S features make your containerized application scale efficiently:

+ Horizontal scaling.Scale your application as needed from command line or UI. 
+ Automated rollouts and rollbacks.Roll out changes that monitor the health of your application-ensuring all instances don't fail or go down simultaneously. If something goes wrong, K8S automatically rolls back the change. 
+ Service discovery and load balancing.Containers get their own IP so you can put a set of containers behind a single DNS name for load balancing. 
+ Storage orchestration.Automatically mount local or public cloud or a network storage. 
+ Secret and configuration management.Create and update secrets and configs without rebuilding your image. 
+ Self-healing.The platform heals many problems: restarting failed containers, replacing and rescheduling containers as nodes die, killing containers that don't respond to your user-defined health check, and waiting to advertise containers to clients until they're ready. 
+ Batch execution.Manage your batch and Continuous Integration workloads and replace failed containers. 
+ Automatic binpacking.Automatically schedules containers based on resource requirements and other constraints. 

What won't Kubernetes do?

Kubernetes can do a lot of cool, useful things. But it's just as important to consider what Kubernetes isn't capable of:

+ It does not replace tools like Jenkins-so it will not build your application for you. 
+ It is not middleware-so it will not perform tasks that a middleware performs, such as message bus or caching, to name a few. 
+ It does not care which logging solution is used. Have your app log to stdout, then you can collect the logs with whatever you want. 
+ It does not care about your config language (e.g., JSON). 

K8s is not opinionated with these things simply to allow us to build our app the way we want, expose any type of information and collect that information however we want.

Kubernetes competitors

Of course, Kubernetes isn't the only tool on the market. There are a variety, including:

+ Docker Compose-good for staging but not production-ready. 
+ Nomad-allows for cluster management and scheduling but it does not solve secret and config management, service discover, and monitoring needs. 
+ Titus-Netflix's open-source orchestration platform doesn't have enough people using it in production. 

Overall, Kubernetes offers the best out-of-the-box features along with countless third-party add-ons to easily extend its functionality.

Getting Started with Kubernetes

Typically, you would install Kubernetes on either on premise hardware or one of the major cloud providers. Many cloud providers and third parties are now offering Managed Kubernetes services however, for a testing/learning experience this is both costly and not required. The easiest and quickest way to get started with Kubernetes in an isolated development/test environment is minikube.

How to install Kubernetes

Installing K8S locally is simple and straightforward. You need two things to get up and running: Kubectl and Minikube.

+ Kubectl is a CLI tool that makes it possible to interact with the cluster. 
+ Minikube is a binary that deploys a cluster locally on your development machine. 

With these, you can start deploying your containerized apps to a cluster locally within just a few minutes. For a production-grade cluster that is highly available, you can use tools such as:

+ Kops 
+ EKS, which is an AWS managed service 
+ GKE, provided by Google 

Minikube allows you to run a single-node cluster inside a Virtual Machine (typically running inside VirtaulBox). Follow the official Kubernetes documentation to install minikube on your machine. https://kubernetes.io/docs/setup/minikube/.

With minikube installed you are now ready to run a virtualised single-node cluster on your local machine. You can start your minikube cluster with;

$ minikube start

Interacting with Kubernetes clusters is mostly done via the kubectl CLI or the Kubernetes Dashboard. The kubectl CLI also supports bash autocompletion which saves a lot of typing (and memory). Install the kubectl CLI on your machine by using the official installation instructions https://kubernetes.io/docs/tasks/tools/install-kubectl/.

To interact with your Kubernetes clusters you will need to set your kubectl CLI context. A Kubernetes context is a group of access parameters that defines which users have access to namespaces within a cluster. When starting minikube the context is automatically switched to minikube by default. There are a number of kubectl CLI commands used to define which Kubernetes cluster the commands execute against.

$ kubectl config get-context
$ kubectl config set-context <context-name>

$ Kubectl config delete-context <context-name>

Deploying your first containerised application to Minikube

So far you should have a local single-node Kubernetes cluster running on your local machine. The rest of this tutorial is going to outline the steps required to deploy a simple Hello World containerised application, inside a pod, with an exposed endpoint on the minikube node IP address. Create the Kubernetes deployment with;

$ kubectl run hello-minikube --image=k8s.gcr.io/

echoserver:1.4 --port=8080

We can see that our deployment was successful so we can view the deployment with;

$ kubectl get deployments

Our deployment should have created a Kubernetes Pod. We can view the pods running in our cluster with;

$ kubectl get pods

Before we can hit our Hello World application with a HTTP request from an origin from outside our cluster (i.e. our development machine) we need to expose the pod as a Kubernetes service. By default, pods are only accessible on their internal IP address which has no access from outside the cluster.

$ kubectl expose deployment hello-minikube --

type=NodePort

Exposing a deployment creates a Kubernetes service. We can view the service with:

$ kubectl get services

When using a cloud provider you would normally set -type=loadbalancer to allocate the service with either a private or public IP address outside of the ClusterIP range. minikube doesn't support load balancers, being a local development/testing environment and therefore -type=NodePort uses the minikube host IP for the service endpoint. To find out the URL used to access your containerised application type;

$ minikube service hello-minikube --url

Curl the response from your terminal to test that our exposed service is reaching our pod.

$ curl http://<minikube-ip>:<port>

Now we have made a HTTP request to our pod via the Kubernetes service, we can confirm that everything is working as expected. Checking the the pod logs we should see our HTTP request.

$ kubectl logs hello-minikube-c8b6b4fdc-sz67z

To conclude, we are now running a simple containerised application inside a single-node Kubernetes cluster, with an exposed endpoint via a Kubernetes service.

Minikube for learning

Minikube is great for getting to grips with Kubernetes and learning the concepts of container orchestration at scale, but you wouldn't want to run your production workloads from your local machine. Following the above you should now have a functioning Kubernetes pod, service and deployment running a simple Hello World application.

From here, if you are looking to start using Kubernetes for your containerized applications, you would be best positioned looking into building a Kubernetes Cluster or comparing the many Managed Kubernetes offerings from the popular cloud providers.

Additional resources

For more on Kubernetes, explore these resources:

+ Kubernetes Guide, with 20+ articles and tutorials 
+ BMC DevOps Blog 
+ The State of Kubernetes in 2020 

Beginning Kubernetes: Knowledge & Tutorials for Getting Started

In this comprehensive e-book, we take a deep dive into the distributed computing platform Kubernetes, also known as K8s.

Download e-book > 

Download e-book > 

These postings are my own and do not necessarily represent BMC's position, strategies, or opinion.

See an error or have a suggestion? Please let us know by emailing blogs@bmc.com.

Kubernetes 

BMC Brings the A-Game

BMC works with 86% of the Forbes Global 50 and customers and partners around the world to create their future. With our history of innovation, industry-leading automation, operations, and service management solutions, combined with unmatched flexibility, we help organizations free up time and space to become an Autonomous Digital Enterprise that conquers the opportunities ahead.
Learn more about BMC >

You may also like

How To Create Your First Flutter App

DevOps Interview Questions

Top Agile Certifications

Workflow Orchestration: An Introduction

What is FinDevOps?

Serverless Best Practices

About the author

Toye Idowu

Olatoye is a Certified Kubernetes Administrator and experienced DevOps/Platform engineering Consultant with a demonstrated history of working in the Information Technology and Services industry.

View all posts 

About the author

Dan Merron

Dan Merron is a seasoned DevOps Consulting Professional with experience in private, public and financial sectors working with popular container, automation and scripting tools. You can visit his website or find him on Github or LinkedIn.

View all posts 

+ Contact 
+ Free Trials 
+ Legal 
+ Privacy Policy 
+ Update my preferences 
+ Trust Center 

(c)Copyright 2005-2022 BMC Software, Inc. Use of this site signifies your acceptance of BMC's Terms of Use. BMC, the BMC logo, and other BMC marks are assets of BMC Software, Inc. These trademarks are registered and may be registered in the U.S. and in other countries.


=======asdf12======== Q\Go K8s\$\93c1185c8102f37bb6284b69427a346d.txt
https://blog.logrocket.com/using-sql-database-golang/
TITLE: Using an SQL database in Golang - LogRocket Blog

Nwani Victory Follow A software engineer focused on building scalable and sustainable software. Outside working hours, he doubles as a technical writer, creating technical articles focused on modern web technologies and public cloud providers. 

Using an SQL database in Golang

November 3, 2021 11 min read 3237 

The principle of processes within the Twelve-factor app methodology asserts that an application executes as stateless processes. This means that data that needs persisting should be stored in an external backing service such as a database.

When applying this principle to your Golang written applications, you might need to use an SQL database to persist data.

Within this tutorial, we'll learn how to build a console-based reminder application written in Golang that uses an SQL database.

We will focus on the Microsoft SQL Server and connect the Golang application to a database within an SQL Server to store a user's reminders. We are choosing Microsoft SQL Server over MySQL not because one is better than the other, but because one has less tutorials than the other. Besides that, MSSQL syntax is easier than MySQL.

Here's what we'll cover:

+ Golang and SQL prerequisites 
+ Using the Microsoft SQL Server 

+ Installing the Microsoft SQL Server 

+ Creating an SQL Server database 

+ Creating the Reminders table 

+ Building a Golang console application 

+ Creating the Go application 

+ Building the database package 

+ Building the main function 
+ Inserting a reminder record 
+ Retrieving a reminder record 
+ Deleting a reminder record 

+ Testing the Golang console application 
+ Further considerations 

+ Using a validation library 
+ Using a CLI library 
+ Handling query timeouts 

Golang and SQL prerequisites

To follow along with building a console application, it is recommended that you have the following:

+ A basic understanding of the Go programming language 
+ Golang installed on your local computer 
+ Docker installed on your local computer 

Using the Microsoft SQL Server

The Microsoft SQL Server is a relational database management system (RDBMS) that contains several components. One of these components is the database engine that manages the data stored within the SQL Server.

For this tutorial we will use the database engine component of the SQL Server. To establish a connection to the database engine, we need the database package from Golang's standard library and the go-mssqldb package.

To get started, let's install the SQL Server instance as a Docker image on a local computer.

Installing the Microsoft SQL Server

We can now install the Microsoft SQL Server instance through a Docker image from the computer's terminal.

We made a custom demo for .
No really. Click here to check it out.

Click here to see the full demo with network requests 

Execute the Docker pull command below from your terminal to pull a container image for the 2019 Microsoft SQL server instance from DockerHub:

docker pull mcr.microsoft.com/mssql/server:2019-latest

Next, execute the Docker run command below to run the pulled container image using Docker. The following command contains arguments that pass into the container image as environment variables to configure the container.

Make sure to change the INSTANCE_PASSWORD placeholder in the command to a more secure password and remember the password, because we'll use it later:

sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=INSTANCE_PASSWORD" \
-p 1433:1433 --name sql1 -h sql1 \
-d mcr.microsoft.com/mssql/server:2019-latest

You can further execute the docker ps command to see the MSSQL container running in the background.

Creating an SQL Server database

In the previous section, we pulled the Microsoft SQL Server image to run the SQL server instance. Now, let's proceed to create a database for our Golang application within the SQL Server instance.

To create a database, you can either use a database GUI tool, such as the SQL Server Management Studio (SSMS), or through the sqlcmd CLI utility.

We'll continue by connecting to the Docker image running the SQL server instance to create a database from the terminal.

First, execute the Docker exec command below to start a Bash shell within the Docker container running the SQL Server instance. This step enables us access the sqlcmd tool within the container:

sudo docker exec -it sql1 "bash"

Next, connect with sqlcmd by executing the command below inside the interactive Bash shell started above.

Again, note that you must change the INSTANCE_PASSWORD placeholder below with the password you used when running the Docker image:

/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "INSTANCE_PASSWORD"

To begin creating the database, type in the SQL query below to create a database named goConsole:

CREATE DATABASE goConsole

Next, run the batch separator command below to execute the SQL query you typed above:

GO 

To further confirm the database was created, we can type the SELECT statement below to retrieve all available databases by their name:

SELECT Name from sys.Databases

Then, run the command below to execute the SELECT statement above:

GO

Five databases created within your new SQL Server instance will then print out:

Creating the Reminders table

To create a Reminders table within the goConsole database for our reminder application, type in the two SQL queries below, first with the USE statement to set the current database from master to goConsole:

USE goConsole

Next, type in the CREATE TABLE statement below to create a table within the goConsole database named Reminders:

CREATE TABLE Reminders ( ID int IDENTITY(1, 1), title varchar(75), description varchar(175), alias varchar(70)) 

The Reminders table will create when the SQL query above executes and will contain the ID, title, description, and alias columns.

Using the IDENTITY function with the ID column ensures the ID column value automatically increments by 1 each time a new record inserts to the Reminders table.

Continue to run the Go command below to execute the two SQL queries we typed above:

GO 

Now that the database is created, let's proceed to to the Golang aspects of this tutorial.

Building a Golang console application

Within this section, we will build a simplified console application to use the goConsole database that we just created. However, before we move forward, it is important that we understand Golangs sql package and methods.

Golang's sql package comes from Golang's standard library, and it provides an interface around SQL databases. To use an SQL database, the we must use the sql package with the driver for the SQL database.

We'll see how this is done when we use the go-mssqldb database driver with the sql package.

Golang methods are similar to functions, however, a method has a receiver argument attached to it.

Within this tutorial, we'll create a struct type to contain a field that stores a point to the database handler from the sql package and create methods that have a receiver of the struct type.

Also note that we will only implement the CREATE, RETRIEVE, and DELETE operations of a reminder data without alerts.

Creating the Go application

To begin creating the Go application, Execute the two commands below to create a new directory for storing the Go project and move into the mssql-go-cli directory:

# create a new directory
mkdir mssql-go-cli

# move into new directory
cd mssql-go-cli

Next, execute the Go command below to bootstrap a Go project with a go.mod file to manage the dependencies within this project:

go mod init mssql-go-cli

Execute the go get command below to install the go-mssqldb package to connect your Microsoft SQL database from this Go application:

go get github.com/denisenkom/go-mssqldb github.com/joho/godotenv/cmd/godotenv

Finally, create a main.go file and add the content of the code block below into the file. The code within the main function serves as a boilerplate for the application while we implement the real logic in the next section:

// main.go
package main
import "fmt"

func main() {
fmt.Println("-> Welcome to the Reminders Console App built using Golang and Microsoft SQL Server") 
}

When the application runs through the go run main.go command, a string prints to the console, as shown below:

At this point, we have the Go application working without being connected to the SQL Server. So, let's create a custom database package next that contains the code for establishing a connection to the SQL Server instance.

Building the database package

A Go package is a collection of file(s) containing Go code within a directory. Hence, to create the database package for this application, we must create a new directory within the mssql-go-cli project directory.

To do this, create a directory named database and create a file within the new directory named database.go.

Next, add the content of the code block below into the database.go file to create an exported Database struct with an exported SqlDb field. The field's data type points to the DB struct:

// ./database/database.go
package database

import (
"context"
"database/sql"
)

type Database struct {
SqlDb *sql.DB
}

var dbContext = context.Background()

The struct exported from the database package then initializes in the main function in the next step.

Building the main function

Let's proceed to refactor the main.go file to prompt a user for an action and accept input from the console.

Add the content of the code block below into the main.go file:

// ./main.go
package main

import (
"bufio"
"database/sql"
"fmt"
_ "github.com/denisenkom/go-mssqldb"
"github.com/joho/godotenv"
"mssql-go-cli/database"
"os"
)

func main() {
envErr := godotenv.Load(); if envErr != nil {
fmt.Printf("Error loading credentials: %v", envErr)
}

var (
password = os.Getenv("MSSQL_DB_PASSWORD")
user = os.Getenv("MSSQL_DB_USER")
port = os.Getenv("MSSQL_DB_PORT")
database = os.Getenv("MSSQL_DB_DATABASE")
)

connectionString := fmt.Sprintf("user id=%s;password=%s;port=%s;database=%s", user, password, port, database)

sqlObj, connectionError := sql.Open("mssql", database.ConnectionString); if connectionError != nil {
fmt.Println(fmt.Errorf("error opening database: %v", connectionError))
}

data := database.Database{
SqlDb: sqlObj,
}

fmt.Println("-> Welcome to Reminders Console App, built using Golang and Microsoft SQL Server")
fmt.Println("-> Select a numeric option; \n [1] Create a new Reminder \n [2] Get a reminder \n [3] Delete a reminder")

consoleReader := bufio.NewScanner(os.Stdin)
consoleReader.Scan()
userChoice := consoleReader.Text()

switch userChoice {
case "1":
var (
titleInput,
descriptionInput,
aliasInput string
)
fmt.Println("You are about to create a new reminder. Please provide the following details:")

fmt.Println("-> What is the title of your reminder?")
consoleReader.Scan()
titleInput = consoleReader.Text()

fmt.Println("-> What is the description of your reminder?")
consoleReader.Scan()
descriptionInput = consoleReader.Text()

fmt.Println("-> What is an alias of your reminder? [ An alias will be used to retrieve your reminder ]")
consoleReader.Scan()
aliasInput = consoleReader.Text()

data.CreateReminder(titleInput, descriptionInput, aliasInput)

case "2":
fmt.Println("-> Please provide an alias for your reminder:")
consoleReader.Scan()
aliasInput := consoleReader.Text()

data.RetrieveReminder(aliasInput)

case "3":
fmt.Println("-> Please provide the alias for the reminder you want to delete:")
consoleReader.Scan()
deleteAlias := consoleReader.Text()

data.DeleteReminder(deleteAlias)

default:
fmt.Printf("-> Option: %v is not a valid numeric option. Try 1 , 2 , 3", userChoice)
}
}

At a quick glance, when the above main function executes, text prints to the console to inform users of the available actions to either create, retrieve, or delete a reminder. Then, the user's input will match one of the cases within the switch expression.

To better understand the code, let's break the file down and go through the major parts gradually.

Understanding the main function's code

To begin, the environmental variables within the .env file load into the application through the Load function from the dotenv package. We an then open the database by calling sql.Open() and storing the result in the SqlDb field within the Database struct.

From line 36 of the code block, a message prints to the console to inform the user of the actions to either create, retrieve, or delete a reminder. The scanner from the bufio package then reads an input from the console and stores the text value in the userChoice variable.

We can then use the userChoice variable as a condition expression for the switch statement contained within the code.

Whenever any of the cases within the switch statement match, a user is further prompted to provide more details through the console and these details pass as an argument to a helper function that executes an SQL query against the database.

For example, the first case matches a 1 console input to create a reminder. When matched, a user is further prompted for a title, description, and alias details for the reminder about to be created.

The variables declared above store the provided details and pass as arguments into a createReminder function to perform a CREATE operation on the connected Microsoft SQL database.

At this juncture, we now have an application that accepts user inputs through the console. However, these inputs are not yet stored in the goConsole database because the methods in the switch cases have not been created.

Let's proceed to create the createReminder, retrieveReminder, and deleteReminder methods in a separate file within the database package.

Inserting a reminder record

To begin building the first function for inserting a reminder record, create a file within the database directory named operations.go and add the code below into the operations.go file:

// ./database/operations.go
package database
import (
"database/sql"
"fmt"
)

func (db Database) CreateReminder(titleInput, aliasInput, descriptionInput string) (int64, error) {
var err error

err = db.SqlDb.PingContext(dbContext); if err != nil {
return -1, err
}

queryStatement := `
INSERT INTO reminders(title, description, alias ) VALUES (@Title, @Description, @Alias);
select isNull(SCOPE_IDENTITY(), -1);
`

query, err := db.SqlDb.Prepare(queryStatement); if err != nil {
return -1, err
}

defer query.Close()

newRecord := query.QueryRowContext(dbContext,
sql.Named("Title", titleInput),
sql.Named("Description", descriptionInput),
sql.Named("Alias", aliasInput),
)

var newID int64
err = newRecord.Scan(&newID); if err != nil {
return -1, err
}

return newID, nil
}

The exported CreateReminder method within the code block above accepts the string details of a reminder. The first thing the function does is call the PingContext() method to verify that a connection is active.

Next, an SQL statement, prepared using the Prepare() method, is stored in the queryStatement variable. The SQL statement then executes by passing the dbContext and query arguments into the QueryRowContext method.

Take note of how the method's parameters add to the SQL statement using arguments through the NamedArg() method rather than directly formatting the parameters into the SQL statement.

This process reduces the risk of an SQL injection attack. However, you can adopt a data validation library later on.

Retrieving a reminder record

To retrieve a reminder record, first add the exported RetrieveReminder method within the code block below the existing methods in the operations.go file.

The RetrieveReminder method first checks whether the database connection is alive or not, and then executes an SQL query to retrieve a reminder record from the database and print out the data to the console:

// ./database/operations.go

func (db Database) RetrieveReminder() error {
err := db.SqlDb.PingContext(dbContext); if err != nil {
return err
}

sqlStatement := fmt.Sprintf("SELECT title, description, alias FROM REMINDERS;")

data, queryErr := db.SqlDb.QueryContext(dbContext, sqlStatement); if queryErr != nil {
return queryErr
}

for data.Next() {
var title, description, alias string

nErr := data.Scan(&title, &description, &alias); if nErr != nil {
return nErr
}

fmt.Printf("--> Your Reminder: \n \t Title: %v \n \t Description: %v \n \t Alias: %v \n",
title, description, alias,
)

return nil
}

return nil
}

Above, using the QueryContext() method, a SELECT SQL statement executes to read the title, description, and alias values from the reminder table.

The QueryContext() method then returns the selected table rows in a result set that we can further iterate upon in the for loop.

The Scan() method within the for loop further copies the value of the column iterated upon into the title, description, and alias variables; after this, they format into a string and print to the console.

Deleting a reminder record

To delete a reminder record, add the deleteReminder method below to the existing CreateReminder and RetrieveReminder methods in the operations.go file:

// ./database/operations.go

func (db Database) DeleteReminder(alias string) error {
var err error

err = db.SqlDb.PingContext(dbContext); if err != nil {
fmt.Printf("Error checking db connection: %v", err)
}

queryStatement := `DELETE FROM reminders WHERE alias = @alias;`

_, err = db.SqlDb.ExecContext(dbContext, queryStatement, sql.Named("alias", alias))
if err != nil {
return err
}

fmt.Printf("Reminder with %v alias deleted", alias)

return nil
}

The DeleteReminder method above accepts an string alias value in its signature. The DELETE SQL query statement uses a WHERE clause to specify which reminder to delete.

The query statement then prepares and the function's alias parameter is used as the condition of the WHERE clause in the SQL statement.

For this scenario, the ExecContext() method executes the DELETE SQL statement because we do not execute any row to return from the query.

Testing the Golang console application

From the last three sections, we implemented three methods to CREATE, READ, and DELETE records from the connected goConsole database. Let's now proceed to test the entire console application.

The following steps walk us through the testing process using the available options of the console application.

To begin, execute the command below to run the application; type 1 into the console to select the first item within the message printed to the console for creating a reminder.

The application further prompts us for a title, description, and alias value for the reminder about to be created:

go run ./main.go

Again, execute the command below to run the application. This time, type 2 into the console to select the second option for retrieving saved reminders:

go run ./main.go

Execute the command below to run the application for the final test. This time, type 3 into the console to select the last option to delete the saved reminder. The application further prompts us to specify the alias of the reminder we want to delete:

go run ./main.go

At this point, we can conclude that we built a simplified console application that uses an SQL Server database to handle data.

Further considerations

Within this article we focused on the aspects of using a SQL Server database. If you want to leverage the code written here for building a more complex application, consider the following.

Using a validation library

Ensure you use a data validation library to validate user input before using it in your SQL query. This reduces the risk of an SQL injection attack against the connected database.

Examples of data validation libraries for Golang include go-ozzo and govalidator.

Using a CLI library

Secondly, use a library to create CLI applications. To avoid complicating the tutorial, we relied on a switch statement to handle the application flow. However, you can improve the flow by using a CLI library for Golang such as Cobra.

Handling query timeouts

Golang has been able to provide support for handling timeouts, which are used to execute queries with timeout and cancellation. What this entails is that we can cancel a database query if the client cancels the request or also set a timeout to cancel a query. These can be achieved using the Golang's context.Context instance:

func retrieveReminder(w http.ResponseWriter, r *http.Request) {
ctx, cancel := context.WithTimeout(dbContext, 3*time.Second)
defer cancel()

_, err := db.QueryContext(ctx, "SELECT sleep(15)")

With that in place, we can do this to prevent our server from performing unwanted tasks or even taking longer to provide resources, in this case our reminders.

Within this tutorial we built a console application that uses Golang's native database package and the go-mssqldb package to connect and perform CRUD operations on a SQL Server database.

The code for the console application built within the tutorial is available within this public GitHub repository. Feel free to clone the repository and use the application as a starting point for your own Golang application.

LogRocket: Full visibility into your web and mobile apps

LogRocket is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.

In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.

Try it for free.

Share this:

+ Twitter
+ Reddit
+ LinkedIn
+ Facebook
+ 

Nwani Victory Follow A software engineer focused on building scalable and sustainable software. Outside working hours, he doubles as a technical writer, creating technical articles focused on modern web technologies and public cloud providers. 

+ Uncategorized

+ #go 

" Using Drizzle and React to write DApp frontends

Theatre.js: Create intricate and powerful animations in JavaScript "

Pathfinding in Rust: A tutorial with examples 

Greg Stoll
Jul 1, 2022 5 min read 

Handling user authentication with Remix 

Emmanuel John
Jul 1, 2022 19 min read 

Using barrel exports to organize React components 

Nelson Michael
Jul 1, 2022 5 min read 

Leave a Reply Cancel reply 

Have you listened to our podcast? Check it out:

PodRocket|Ep. 30 Rocket Surgery: Kaelan and Chris Coyier compare notes 

Are you up to speed on all of this new CSS stuff? Chris Coyier and Kaelan compare notes on CSS and frontend development (they also discuss MDN plus).

Listen now 

PodRocket|Ep. 26 Redux is alive and well with Mark Erikson 

What is modern Redux? What is it with the obsession of declaring Redux dead? In this episode, Ben and Brian interview Mark Erikson to talk about all things Redux.

Listen now 

PodRocket|Ep. 34 Rome and Rome Tools, Inc. with Sebastian McKenzie and Jamie Kyle 

In this episode, Ben and Kaelan talk to Sebastian McKenzie and Jamie Kyle about Rome Tools, Inc., the roadmap for Rome, and the experience of getting funding as an open-source tool.

Listen now 

PodRocket|Ep. 29 Continuing education with Eve Porcello 

In this episode, we talk to Eve Porcello about her experience teaching web development and Moon Highway, a training and curriculum development company she runs.


=======asdf13======== Q\Go K8s\$\0fe2f5bf6fbabaaf0923e42e51c24a29.txt
https://www.simplilearn.com/tutorials/kubernetes-tutorial/kubernetes-interview-questions
TITLE: Top 40 Kubernetes Interview Questions and Answers for 2022 | Simplilearn

Kubernetes comes from a Greek word meaning 'captain,' 'helmsman,' or 'governor.' The term is now also used in the DevOps and on-premises software development world to refer to a powerful bundle of solutions that equips operations engineers to scale and service server (and box) setups effortlessly. 

This Kubernetes interview questions article will help you prepare for any interview or certification exam that you may need to take once you've completed the Kubernetes training. So, without further ado, let's jump right in and learn the top Kubernetes interview questions and answers.

Enhance your Kubernetes skills and gain credibility in the field with the Certified Kubernetes Administrator Certification Training. Enroll now!

Kubernetes Interview Questions and Answers

1. What is Kubernetes?

This is one of the most basic Kubernetes interview questions yet one of the most important ones! Kubernetes is an open-source container orchestration tool or system that is used to automate tasks such as the management, monitoring, scaling, and deployment of containerized applications. It is used to easily manage several containers (since it can handle grouping of containers), which provides for logical units that can be discovered and managed.

DevOps Engineer Master's Program

Bridge between software developers and operationsExplore Course

2. What are K8s? 

K8s is another term for Kubernetes. 

3. What is orchestration when it comes to software and DevOps? 

Orchestration refers to the integration of multiple services that allows them to automate processes or synchronize information in a timely fashion. Say, for example, you have six or seven microservices for an application to run. If you place them in separate containers, this would inevitably create obstacles for communication. Orchestration would help in such a situation by enabling all services in individual containers to work seamlessly to accomplish a single goal. 

4. How are Kubernetes and Docker related?

This is one of the most frequently asked Kubernetes interview questions, where the interviewer might as well ask you to share your experience working with any of them. Docker is an open-source platform used to handle software development. Its main benefit is that it packages the settings and dependencies that the software/application needs to run into a container, which allows for portability and several other advantages. Kubernetes allows for the manual linking and orchestration of several containers, running on multiple hosts that have been created using Docker. 

5. What are the main differences between the Docker Swarm and Kubernetes?

Docker Swarm is Docker's native, open-source container orchestration platform that is used to cluster and schedule Docker containers. Swarm differs from Kubernetes in the following ways:

+ Docker Swarm is more convenient to set up but doesn't have a robust cluster, while Kubernetes is more complicated to set up but the benefit of having the assurance of a robust cluster 
+ Docker Swarm can't do auto-scaling (as can Kubernetes); however, Docker scaling is five times faster than Kubernetes 
+ Docker Swarm doesn't have a GUI; Kubernetes has a GUI in the form of a dashboard 
+ Docker Swarm does automatic load balancing of traffic between containers in a cluster, while Kubernetes requires manual intervention for load balancing such traffic 
+ Docker requires third-party tools like ELK stack for logging and monitoring, while Kubernetes has integrated tools for the same 
+ Docker Swarm can share storage volumes with any container easily, while Kubernetes can only share storage volumes with containers in the same pod 
+ Docker can deploy rolling updates but can't deploy automatic rollbacks; Kubernetes can deploy rolling updates as well as automatic rollbacks 

6. What is the difference between deploying applications on hosts and containers?

Deploying Applications consist of an architecture that has an operating system. The operating system will have a kernel that holds various libraries installed on the operating system needed for an application.

Whereas container host refers to the system that runs the containerized processes. This kind is isolated from the other applications; therefore, the applications must have the necessary libraries. The binaries are separated from the rest of the system and cannot infringe any other application.

7. What are the features of Kubernetes?

+ Kubernetes places control for the user where the server will host the container. It will control how to launch. So, Kubernetes automates various manual processes. 
+ Kubernetes manages various clusters at the same time. 
+ It provides various additional services like management of containers, security, networking, and storage. 
+ Kubernetes self-monitors the health of nodes and containers. 
+ With Kubernetes, users can scale resources not only vertically but also horizontally that too easily and quickly. 

8. What are the main components of Kubernetes architecture?

There are two primary components of Kubernetes Architecture: the master node and the worker node. Each of these components has individual components in them.

9. Explain the working of the master node in Kubernetes?

The master node dignifies the node that controls and manages the set of worker nodes. This kind resembles a cluster in Kubernetes. The nodes are responsible for the cluster management and the API used to configure and manage the resources within the collection. The master nodes of Kubernetes can run with Kubernetes itself, the asset of dedicated pods.

Free Course: Introduction to Kubernetes

Master the Fundamentals of KubernetesEnroll Now

10. What is the role of Kube-apiserver?

This kind validates and provides configuration data for the API objects. It includes pods, services, replication controllers. Also, it provides REST operations and also the frontend of the cluster. This frontend cluster state is shared through which all other component interacts.

11. What is a node in Kubernetes?

A node is the smallest fundamental unit of computing hardware. It represents a single machine in a cluster, which could be a physical machine in a data center or a virtual machine from a cloud provider. Each machine can substitute any other machine in a Kubernetes cluster. The master in Kubernetes controls the nodes that have containers. 

12. What does the node status contain?

The main components of a node status are Address, Condition, Capacity, and Info.

13. What process runs on Kubernetes Master Node? 

The Kube-api server process runs on the master node and serves to scale the deployment of more instances.

14. What is a pod in Kubernetes?

In this Kubernetes interview question, try giving a thorough answer instead of a one-liner. Pods are high-level structures that wrap one or more containers. This is because containers are not run directly in Kubernetes. Containers in the same pod share a local network and the same resources, allowing them to easily communicate with other containers in the same pod as if they were on the same machine while at the same time maintaining a degree of isolation.

15. What is the job of the kube-scheduler?

The kube-scheduler assigns nodes to newly created pods.

16. What is a cluster of containers in Kubernetes? 

A cluster of containers is a set of machine elements that are nodes. Clusters initiate specific routes so that the containers running on the nodes can communicate with each other. In Kubernetes, the container engine (not the server of the Kubernetes API) provides hosting for the API server.

Post Graduate Program in DevOps

Designed in collaboration with Caltech CTMEExplore Course

17. What is the Google Container Engine?

The Google Container Engine is an open-source management platform tailor-made for Docker containers and clusters to provide support for the clusters that run in Google public cloud services. 

18. What are Daemon sets?

A Daemon set is a set of pods that runs only once on a host. They are used for host layer attributes like a network or for monitoring a network, which you may not need to run on a host more than once.

19. What is 'Heapster' in Kubernetes?

In this Kubernetes interview question, the interviewer would expect a thorough explanation. You can explain what it is and also it has been useful to you (if you have used it in your work so far!). A Heapster is a performance monitoring and metrics collection system for data collected by the Kublet. This aggregator is natively supported and runs like any other pod within a Kubernetes cluster, which allows it to discover and query usage data from all nodes within the cluster.

20. What is Minikube?

With the help of Minikube, users can Kubernetes locally. This process lets the user run a single-node Kubernetes cluster on your personal computer, including Windows, macOS, and Linus PCs. With this, users can try out Kubernetes also for daily development work.

21. What is a Namespace in Kubernetes?

Namespaces are used for dividing cluster resources between multiple users. They are meant for environments where there are many users spread across projects or teams and provide a scope of resources.

22. Name the initial namespaces from which Kubernetes starts?

+ Default 
+ Kube - system 
+ Kube - public 

23. What is the Kubernetes controller manager?

The controller manager is a daemon that is used for embedding core control loops, garbage collection, and Namespace creation. It enables the running of multiple processes on the master node even though they are compiled to run as a single process.

24. What are the types of controller managers?

The primary controller managers that can run on the master node are the endpoints controller, service accounts controller, namespace controller, node controller, token controller, and replication controller.

25. What is etcd?

Kubernetes uses etcd as a distributed key-value store for all of its data, including metadata and configuration data, and allows nodes in Kubernetes clusters to read and write data. Although etcd was purposely built for CoreOS, it also works on a variety of operating systems (e.g., Linux, BSB, and OS X) because it is open-source. Etcd represents the state of a cluster at a specific moment in time and is a canonical hub for state management and cluster coordination of a Kubernetes cluster.

26. What are the different services within Kubernetes?

Different types of Kubernetes services include: 

+ Cluster IP service 
+ Node Port service 
+ External Name Creation service and 
+ Load Balancer service 

Free Course: Introduction to DevOps Tools

Master the Fundamentals of DevOps ToolsEnroll Now

27. What is ClusterIP?

The ClusterIP is the default Kubernetes service that provides a service inside a cluster (with no external access) that other apps inside your cluster can access. 

28. What is NodePort? 

The NodePort service is the most fundamental way to get external traffic directly to your service. It opens a specific port on all Nodes and forwards any traffic sent to this port to the service.

29. What is the LoadBalancer in Kubernetes? 

The LoadBalancer service is used to expose services to the internet. A Network load balancer, for example, creates a single IP address that forwards all traffic to your service. 

30. What is the Ingress network, and how does it work?

An ingress is an object that allows users to access your Kubernetes services from outside the Kubernetes cluster. Users can configure the access by creating rules that define which inbound connections reach which services.

How does it work- This is an API object that provides the routing rules to manage the external users' access to the services in the Kubernetes cluster through HTTPS/ HTTP. With this, users can easily set up the rules for routing traffic without creating a bunch of load balancers or exposing each service to the nodes.

31. What do you understand by Cloud controller manager?

You must have heard about Public, Private and hybrid clouds. With the help of cloud infrastructure technologies, you can run Kubernetes on them. In the context of Cloud Controller Manager, it is the control panel component that embeds the cloud-specific control logic. This process lets you link the cluster into the cloud provider's API and separates the elements that interact with the cloud platform from components that only interact with your cluster. 

This also enables the cloud providers to release the features at a different pace compared to the main Kubernetes project. It is structured using a plugin mechanism and allows various cloud providers to integrate their platforms with Kubernetes.

32. What is Container resource monitoring?

This refers to the activity that collects the metrics and tracks the health of containerized applications and microservices environments. It helps to improve health and performance and also makes sure that they operate smoothly.

33. What is the difference between a replica set and a replication controller?

A replication controller is referred to as RC in short. It is a wrapper on a pod. This provides additional functionality to the pods, which offers replicas. 

It monitors the pods and automatically restarts them if they fail. If the node fails, this controller will respawn all the pods of that node on another node. If the pods die, they won't be spawned again unless wrapped around a replica set. 

Replica Set, on the other hand, is referred to as rs in short. It is told as the next-generation replication controller. This kind of support has some selector types and supports the equality-based and the set-based selectors. 

It allows filtering by label values and keys. To match the object, they have to satisfy all the specified label constraints.

34. What is a headless service?

A headless service is used to interface with service discovery mechanisms without being tied to a ClusterIP, therefore allowing you to directly reach pods without having to access them through a proxy. It is useful when neither load balancing nor a single Service IP is required. 

35. What are federated clusters?

The aggregation of multiple clusters that treat them as a single logical cluster refers to cluster federation. In this, multiple clusters may be managed as a single cluster. They stay with the assistance of federated groups. Also, users can create various clusters within the data center or cloud and use the federation to control or manage them in one place. 

You can perform cluster federation by doing the following: 

Cross cluster that provides the ability to have DNS and Load Balancer with backend from the participating clusters. 

Users can sync resources across different clusters in order to deploy the same deployment set across the various clusters.

DevOps Engineer Exam Practice Test

Assess your understanding of the DevOps conceptsTry answering

36. What is Kubelet?

The kubelet is a service agent that controls and maintains a set of pods by watching for pod specs through the Kubernetes API server. It preserves the pod lifecycle by ensuring that a given set of containers are all running as they should. The kubelet runs on each node and enables the communication between the master and slave nodes.

37. What is Kubectl?

Kubectl is a CLI (command-line interface) that is used to run commands against Kubernetes clusters. As such, it controls the Kubernetes cluster manager through different create and manage commands on the Kubernetes component

38. Give examples of recommended security measures for Kubernetes.

Examples of standard Kubernetes security measures include defining resource quotas, support for auditing, restriction of etcd access, regular security updates to the environment, network segmentation, definition of strict resource policies, continuous scanning for security vulnerabilities, and using images from authorized repositories.

39. What is Kube-proxy? 

Kube-proxy is an implementation of a load balancer and network proxy used to support service abstraction with other networking operations. Kube-proxy is responsible for directing traffic to the right container based on IP and the port number of incoming requests.

40. How can you get a static IP for a Kubernetes load balancer? 

A static IP for the Kubernetes load balancer can be achieved by changing DNS records since the Kubernetes Master can assign a new static IP address.

Jumpstart Your Career with Kubernetes Training

Having a good understanding of DevOps and on-premises software development can be quite useful in helping you gain a holistic view of the subject matter. Ultimately, taking the Kubernetes Certification Training Course and taking your time to study and understand what you've learned while preferably putting it into practice is the best way to prepare for an Kubernetes interview, and the Kubernetes interview questions that you've learned here are the icing on the cake. The more familiar you are with these types of Kubernetes interview questions, the better able you will be to show off your skills and Kuberenetes knowledge.

In addition to these Kubernetes interview questions, there are many other helpful DevOps interview questions that deserve to be looked at.

Find our DevOps Engineer Online Bootcamp in top cities:

{Name}{Date}{Place}{}

{ DevOps Engineer }{Class starts on 15th Jul 2022, 
Weekdays batch}{Your City}{View Details}

{ DevOps Engineer }{Class starts on 16th Jul 2022, 
Weekend batch}{Chicago}{View Details}

{ DevOps Engineer }{Class starts on 23rd Jul 2022, 
Weekend batch}{Houston}{View Details}

About the Author

Simplilearn

Simplilearn is one of the world's leading providers of online training for Digital Marketing, Cloud Computing, Project Management, Data Science, IT, Software Development, and many other emerging technologies.

Recommended Programs

DevOps Engineer 

17417 Learners

Container Orchestration using Kubernetes 

8134 Learners

DevOps Certification Training 

20658 Learners

*Lifetime access to high-quality, self-paced e-learning content.

Explore Category

Find DevOps Engineer Master's Program in these cities

DevOps Engineer Training in AtlantaDevOps Engineer Training in AustinDevOps Engineer Training in BostonDevOps Engineer Training in ChicagoDevOps Engineer Training in DallasDevOps Engineer Training in DenverDevOps Engineer Training in HoustonDevOps Engineer Training in IrvingDevOps Engineer Training in JacksonvilleDevOps Engineer Training in Jersey CityDevOps Engineer Training in Kansas CityDevOps Engineer Training in Los AngelesDevOps Engineer Training in MiamiDevOps Engineer Training in Mountain ViewDevOps Engineer Training in NashvilleDevOps Engineer Training in New YorkDevOps Engineer Training in PhiladelphiaDevOps Engineer Training in PortlandDevOps Engineer Training in RaleighDevOps Engineer Training in RichmondDevOps Engineer Training in RochesterDevOps Engineer Training in San FranciscoDevOps Engineer Training in San JoseDevOps Engineer Training in SeattleDevOps Engineer Training in SunnyvaleDevOps Engineer Training in TampaDevOps Engineer Training in TurnerDevOps Engineer Training in Washington D.C

Recommended Resources

How to Become a DevOps Engineer?: Roles, Responsibilities, and Skills Required

DevOps Engineer Resume Guide

Ebook
+ 

What is a DevOps Engineer? DevOps Engineer Salary in India, US and Other Regions

Article
+ 

What is DevOps: DevOps Core, Working, and Uses Explained

Why DevOps

DevOps Career Guide: A Comprehensive Playbook To Becoming A DevOps Engineer

Ebook

prevNext

(c) 2009 -2022- Simplilearn Solutions

Follow us!

Refer and Earn

Company

About usCareers In the media Alumni speak Grievance redressalContact us

Work with us

Become an instructorBlog as guest

Discover

SkillupSkillup SitemapResourcesRSS feedSimplilearn Coupons and Discount OffersCity Sitemap

For Businesses

Corporate trainingPartnersDigital TransformationGovernment

Learn On the Go!

Get the Android AppGet the iOS App

Trending Post Graduate Programs

Project Management Certification Course | Cyber Security Certification Course | PG in Data Science Program | Data Analytics Bootcamp Program | Business Analysis Certification Course | Digital Marketing Certification Program | Lean Six Sigma Certification Course | Cloud Computing Certification Course | Data Engineering Bootcamp | AI and Machine Learning Course | Full Stack Web Development Course

Trending Master Programs

PMP Plus Certification Training Course | Big Data Engineering Courses | Data Science Certification Course | Data Analyst Certification Course | Artificial Intelligence Course | Cloud Architect Certification Training Course | DevOps Engineer Certification Training Course | Advanced Digital Marketing Course | Cyber Security Expert Course | MEAN Stack Developer Course

Trending Courses

PMP Certification Training Course | Big Data Hadoop Certification Training Course | Data Science with Python Certification Course | Machine Learning Certification Course | AWS Solutions Architect Certification Training Course | CISSP Certification Training | Certified ScrumMaster (CSM) Certification Training | ITIL 4 Foundation Certification Training Course | Java Certification Course | Python Certification Training Course

Trending Resources

Python Tutorial | JavaScript Tutorial | Java Tutorial | Angular Tutorial | Node.js Tutorial | Docker Tutorial | Git Tutorial | Kubernetes Tutorial | Power BI Tutorial | CSS Tutorial

+ Terms of Use
+ Privacy Policy
+ Refund Policy
+ Reschedule Policy
+ 
+ (c) 2009-2022 - Simplilearn Solutions. All Rights Reserved. The certification names are the trademarks of their respective owners.

smpl_2022-07-04

+ Disclaimer
+ PMP, PMI, PMBOK, CAPM, PgMP, PfMP, ACP, PBA, RMP, SP, and OPM3 are registered marks of the Project Management Institute, Inc.


=======asdf14======== Q\Go K8s\$\8499bc9730e0092dc4d0afb883209e69.txt
https://www.infoworld.com/article/3268073/what-is-kubernetes-your-next-application-platform.html
TITLE: What is Kubernetes? Your next application platform | InfoWorld

Welcome! Here are the latest Insider stories.

+ Choosing your Java IDE 
+ JetBrains Fleet: The future of IDEs? 
+ Review: Visual Studio Code shines for Java 
+ Review: Redpanda gives Kafka a run for its money 

More Insider Sign Out 

NEW Insider PRO Learn More 

Latest Insider

+ Review: YugabyteDB does PostgreSQL proud 
+ Review: Databricks Lakehouse Platform 
+ Review: The 10 best JavaScript editors 
+ Review: The 6 best JavaScript IDEs 

NEW FROM IDG

Learn More

Welcome! Check out the latest Insider stories here.

More from the Foundry Network

+ About Us | 
+ Contact | 
+ Republication Permissions | 
+ Privacy Policy | 
+ Cookie Policy | 
+ Member Preferences | 
+ Advertising | 
+ Foundry Careers | 
+ Ad Choices | 
+ E-commerce Links | 
+ California: Do Not Sell My Personal Info | 

+ Follow Us 
+ 
+ 
+ 

What's new in Kubernetes 1.22

RELATED STORIES 

How Docker broke in half

SPONSORED BY Advertiser Name Here Sponsored item title goes here as designed 

What is Docker? The spark for the container revolution

Lessons learned securing Kubernetes in the cloud

+ Home 
+ Containers 
+ Kubernetes 

What is Kubernetes? Your next application platform

By abstracting away management complexities, Kubernetes unlocks the potential of containers

+ 
+ 
+ 
+ 
+ 
+ 
+ 

By Serdar Yegulalp 

Senior Writer, InfoWorld | 

StockSnap (CC0) 

Table of Contents 

+ What is container orchestration? 
+ What is Kubernetes? 
+ Google and Kubernetes 
+ Kubernetes vs. other projects 
+ Kubernetes vs. Mesos 
+ Kubernetes architecture: How Kubernetes works 
+ Kubernetes advantages 
+ Where to get Kubernetes 
+ Kubernetes tutorial 
+ Kubernetes certification 

Show More 

Kubernetes is a popular open source platform for container orchestration - that is, for the management of applications built out of multiple, largely self-contained runtimes called containers. Containers have become increasingly popular since the Docker containerization project launched in 2013, but large, distributed containerized applications can become increasingly difficult to coordinate. By making containerized applications dramatically easier to manage at scale, Kubernetes has become a key part of the container revolution.

What is container orchestration?

Containers support VM-like separation of concerns but with far less overhead and far greater flexibility. As a result, containers have reshaped the way people think about developing, deploying, and maintaining software. In a containerized architecture, the different services that constitute an application are packaged into separate containers and deployed across a cluster of physical or virtual machines. But this gives rise to the need for container orchestration-a tool that automates the deployment, management, scaling, networking, and availability of container-based applications.

Kubernetes is an open source project that has become one of the most popular container orchestration tools around; it allows you to deploy and manage multi-container applications at scale. While in practice Kubernetes is most often used with Docker, the most popular containerization platform, it can also work with any container system that conforms to the Open Container Initiative (OCI) standards for container image formats and runtimes. And because Kubernetes is open source, with relatively few restrictions on how it can be used, it can be used freely by anyone who wants to run containers, most anywhere they want to run them-on-premises, in the public cloud, or both.

Google and Kubernetes

Kubernetes began life as a project within Google. It's a successor to-though not a direct descendent of-Google Borg, an earlier container management tool that Google used internally. Google open sourced Kubernetes in 2014, in part because the distributed microservices architectures that Kubernetes facilitates makes it easy to run applications in the cloud. Google sees the adoption of containers, microservices, and Kubernetes as potentially driving customers to its cloud services (although Kubernetes certainly works with Azure and AWS as well). Kubernetes is currently maintained by the Cloud Native Computing Foundation, which is itself under the umbrella of the Linux Foundation.

Kubernetes vs. other projects

Kubernetes is not the only way to manage containers at scale, although it has emerged as the most common and broadly supported choice. A few of the other options deserve discussion.

Kubernetes vs. Docker and Docker swarm mode

Kubernetes doesn't replace Docker, but augments it. However, Kubernetes does replace some of the higher-level technologies that have emerged around Docker.

One such technology is Docker swarm mode, a system for managing a cluster of Docker Engines referred to as a "swarm" - essentially a small orchestration system. It's still possible to use Docker swarm mode instead of Kubernetes, but Docker Inc. has chosen to make Kubernetes a key part of Docker support going forward.

However, note that Kubernetes is significantly more complex than Docker swarm mode, and requires more work to deploy. But again, the work is intended to provide a big payoff in the long run-a more manageable, resilient application infrastructure. For development work, and smaller container clusters, Docker swarm mode presents a simpler choice. 

Kubernetes vs. Mesos

Another project you might have heard about as a competitor to Kubernetes is Mesos. Mesos is an Apache project that originally emerged from developers at Twitter; it was actually seen as an answer to the Google Borg project.

Mesos does in fact offer container orchestration services, but its ambitions go far beyond that: it aims to be a sort of cloud operating system that can coordinate both containerized and non-containerized components. To that end, a lot of different platforms can run within Mesos-including Kubernetes itself.

Kubernetes architecture: How Kubernetes works

Kubernetes's architecture makes use of various concepts and abstractions. Some of these are variations on existing, familiar notions, but others are specific to Kubernetes.

Kubernetes clusters

The highest-level Kubernetes abstraction, the cluster, refers to the group of machines running Kubernetes (itself a clustered application) and the containers managed by it. A Kubernetes cluster must have a master, the system that commands and controls all the other Kubernetes machines in the cluster. A highly available Kubernetes cluster replicates the master's facilities across multiple machines. But only one master at a time runs the job scheduler and controller-manager.

Kubernetes nodes and pods

Each cluster contains Kubernetes nodes. Nodes might be physical machines or VMs. Again, the idea is abstraction: Whatever the app is running on, Kubernetes handles deployment on that substrate. Kubernetes even makes it possible to ensure that certain containers run only on VMs or only on bare metal.

Nodes run pods, the most basic Kubernetes objects that can be created or managed. Each pod represents a single instance of an application or running process in Kubernetes, and consists of one or more containers. Kubernetes starts, stops, and replicates all containers in a pod as a group. Pods keep the user's attention on the application, rather than on the containers themselves. Details about how Kubernetes needs to be configured, from the state of pods on up, is kept in Etcd, a distributed key-value store.

Pods are created and destroyed on nodes as needed to conform to the desired state specified by the user in the pod definition. Kubernetes provides an abstraction called a controller for dealing with the logistics of how pods are spun up, rolled out, and spun down. Controllers come in a few different flavors depending on the kind of application being managed. For instance, the StatefulSet controller is used to deal with applications that need persistent state. The Deployment controller is used to scale an app up or down, update an app to a new version, or roll back an app to a known-good version if there's a problem.

Kubernetes services

Because pods live and die as needed, we need a different abstraction for dealing with the application lifecycle. An application is supposed to be a persistent entity, even when the pods running the containers that comprise the application aren't themselves persistent. To that end, Kubernetes provides an abstraction called a service.

A service in Kubernetes describes how a given group of pods (or other Kubernetes objects) can be accessed via the network. As the Kubernetes documentation puts it, the pods that constitute the back-end of an application might change, but the front-end shouldn't have to know about that or track it. Services make this possible.

A few more pieces internal to Kubernetes round out the picture. The scheduler parcels out workloads to nodes so that they're balanced across resources and so that deployments meet the requirements of the application definitions. The controller manager ensures that the state of the system-applications, workloads, etc.-matches the desired state defined in Etcd's configuration settings.

It is important to keep in mind that none of the low-level mechanisms used by containers, such as Docker itself, are replaced by Kubernetes. Rather, Kubernetes provides a larger set of abstractions for using these mechanisms for the sake of keeping apps running at scale.

Kubernetes policies

Policies in Kubernetes ensure that pods adhere to certain standards of behavior. Policies prevent pods from using excessive CPU, memory, process IDs, or disk space, for example. Such "limit ranges" are expressed in relative terms for CPU (e.g., 50% of a hardware thread) and absolute terms for memory (e.g., 200MB). These limits can be combined with resource quotas to ensure that different teams of Kubernetes users (as opposed to applications generally) have equal access to resources.

Kubernetes Ingress

Kubernetes services are thought of as running within a cluster. But you'll want to be able to access these services from the outside world. Kubernetes has several components that facilitate this with varying degrees of simplicity and robustness, including NodePort and LoadBalancer, but the component with the most flexibility is Ingress. Ingress is an API that manages external access to a cluster's services, typically via HTTP.

Ingress does require a bit of configuration to set up properly. Matthew Palmer, who wrote a book on Kubernetes development, steps you through the process on his website.

Kubernetes Dashboard

One Kubernetes component that helps you keep on top of all of these other components is Dashboard, a web-based UI with which you can deploy and troubleshoot apps and manage cluster resources. Dashboard isn't installed by default, but adding it isn't too much trouble.

Related video: What is Kubernetes?

In this 90-second video, learn about Kubernetes, the open-source system for automating containerized applications, from one of the technology's inventors, Joe Beda, founder and CTO at Heptio.

Kubernetes advantages

Because Kubernetes introduces new abstractions and concepts, and because the learning curve for Kubernetes is high, it's only normal to ask what the long-term payoffs are for using Kubernetes. Here's a rundown of some of the specific ways running apps inside Kubernetes becomes easier.

Kubernetes manages app health, replication, load balancing, and hardware resource allocation for you

One of the most basic duties Kubernetes takes off your hands is the busywork of keeping an application up, running, and responsive to user demands. Apps that become "unhealthy," or don't conform to the definition of health you describe for them, can be automatically healed.

Another benefit Kubernetes provides is maximizing the use of hardware resources including memory, storage I/O, and network bandwidth. Applications can have soft and hard limits set on their resource usage. Many apps that use minimal resources can be packed together on the same hardware; apps that need to stretch out can be placed on systems where they have room to grow. And again, rolling out updates across a cluster, or rolling back if updates break, can be automated.

Kubernetes eases the deployment of preconfigured applications with Helm charts

Package managers such as Debian Linux's APT and Python's Pip save users the trouble of manually installing and configuring an application. This is especially handy when an application has multiple external dependencies.

Helm is essentially a package manager for Kubernetes. Many popular software applications must run in Kubernetes as a group of interdependent containers. Helm provides a definition mechanism, a "chart," that describes how an application or service can be run as a group of containers inside Kubernetes.

You can create your own Helm charts from scratch, and you might have to if you're building a custom app to be deployed internally. But if you're using a popular application that has a common deployment pattern, there is a good chance someone has already composed a Helm chart for it and published it in the Artifact Hub. Another place to look for official Helm charts is the Kubeapps.com directory.

Kubernetes simplifies management of storage, secrets, and other application-related resources

Containers are meant to be immutable; the code and data you put into them isn't supposed to change. But applications need state, meaning they need a reliable way to deal with external storage volumes. That's made all the more complicated by the way containers live, die, and are reborn across the lifetime of an app.

Kubernetes provides abstractions to allow containers and apps to deal with storage in the same decoupled way as other resources. Many common kinds of storage, from Amazon EBS volumes to plain old NFS shares, can be accessed via Kubernetes storage drivers, called volumes. Normally, volumes are bound to a specific pod, but a volume subtype called a "Persistent Volume" can be used for data that needs to live on independently of any pod.

Containers often need to work with "secrets"-credentials like API keys or service passwords that you don't want hardcoded into a container or stashed openly on a disk volume. While third-party solutions are available for this, like Docker secrets and HashiCorp Vault, Kubernetes has its own mechanism for natively handling secrets, although it does need to be configured with care. 

Kubernetes applications can run in hybrid cloud and multicloud environments

One of the long-standing dreams of cloud computing is to be able to run any app in any cloud, or in any mix of clouds public or private. This isn't just to avoid vendor lock-in, but also to take advantage of features specific to individual clouds.

Related: 

+ Kubernetes 
+ Docker 
+ Containers 
+ Cloud Computing 
+ Software Development 
+ Linux 

1 2 Page 1 Next 

Page 1 of 2

How to choose a low-code development platform 

InfoWorld Follow us 

+ About Us 
+ Contact 
+ Republication Permissions 
+ Privacy Policy 
+ Cookie Policy 
+ Member Preferences 
+ Advertising 
+ Foundry Careers 
+ Ad Choices 
+ E-commerce Links 
+ California: Do Not Sell My Personal Info 

Copyright (c) 2022 IDG Communications, Inc.


=======asdf15======== Q\Go K8s\$\0dae2cc49531eb29c4be59b73f86fd4e.txt
https://azure.microsoft.com/en-us/topic/what-is-kubernetes/
TITLE: What is Kubernetes? | Microsoft Azure

Build intelligent edge solutions with world-class developer tools, long-term support, and enterprise-grade security.

+ Azure RTOS 

Making embedded IoT development and connectivity easy

+ Azure Machine Learning 

Use an enterprise-grade service for the end-to-end machine learning lifecycle

+ Azure Percept 

Accelerate edge intelligence from silicon to service

Add location data and mapping visuals to business applications and solutions

Products Management and governance 

Management and governance

Simplify, automate, and optimize the management and compliance of your cloud resources

+ Microsoft Azure portal 

Build, manage, and monitor all Azure products in a single, unified console

+ Microsoft Purview 

Govern, protect, and manage your data estate

+ Azure mobile app 

Stay connected to your Azure resources-anytime, anywhere

+ Cloud Shell 

Streamline Azure administration with a browser-based shell

+ Azure Advisor 

Your personalized Azure best practices recommendation engine

+ Azure Backup 

Simplify data protection with built-in backup management at scale

+ Microsoft Cost Management 

Monitor, allocate, and optimize cloud costs with transparency, accuracy, and efficiency using Microsoft Cost Management

+ Azure Policy 

Implement corporate governance and standards at scale

+ Azure Site Recovery 

Keep your business running with built-in disaster recovery service

+ Azure Chaos Studio 

Improve application resilience by introducing faults and simulating outages

Full observability into your applications, infrastructure, and network

Products Media 

Media

Deliver high-quality video content anywhere, any time, and on any device

+ Media Services 

Encode, store, and stream video and audio at scale

+ Encoding 

Studio grade encoding at cloud scale

+ Azure Media Player 

A single player for all your playback needs

+ Live and On-Demand Streaming 

Deliver content to virtually all devices with ability to scale

+ Content Protection 

Securely deliver content using AES, PlayReady, Widevine, and Fairplay

Fast, reliable content delivery network with global reach

Products Migration 

Migration

Simplify and accelerate your migration to the cloud with guidance, tools, and resources

+ Azure Migrate 

Discover, assess, right-size, and migrate your on-premises virtual machines (VMs) to Azure

+ Azure Site Recovery 

Keep your business running with built-in disaster recovery service

+ Azure Database Migration Service 

Accelerate your data migration to Azure

+ Azure Data Box 

Appliances and solutions for data transfer to Azure and edge compute

+ Microsoft Cost Management 

Monitor, allocate, and optimize cloud costs with transparency, accuracy, and efficiency using Microsoft Cost Management

Products Mixed reality 

Mixed reality

Blend your physical and digital worlds to create immersive, collaborative experiences

+ Spatial Anchors 

Create multi-user, spatially aware mixed reality experiences

+ Remote Rendering 

Render high-quality, interactive 3D content with real-time streaming

+ Azure Digital Twins 

Use IoT spatial intelligence to create models of physical environments

+ Kinect DK 

Build for mixed reality using AI sensors

+ Object Anchors 

Automatically align and anchor 3D content to objects in the physical world

Products Mobile 

Mobile

Build and deploy cross-platform and native apps for any mobile device

+ Notification Hubs 

Send push notifications to any platform from any back end

+ Visual Studio App Center 

Build, test, release, and monitor your mobile and desktop apps

+ Xamarin 

Create cloud-powered mobile apps faster

Add location data and mapping visuals to business applications and solutions

Add cognitive capabilities to apps with APIs and AI services

+ Spatial Anchors 

Create multi-user, spatially aware mixed reality experiences

+ Azure Communication Services 

Build rich communication experiences with the same secure platform used by Microsoft Teams

Products Networking 

Networking

Connect cloud and on-premises infrastructure and services to provide your customers and users the best possible experience

+ Virtual Network 

Create your own private network infrastructure in the cloud

+ Load Balancer 

Deliver high availability and network performance to your apps

+ Application Gateway 

Build secure, scalable, highly available web front ends in Azure

+ VPN Gateway 

Establish secure, cross-premises connectivity

+ Azure DNS 

Host your Domain Name System (DNS) domain in Azure

Fast, reliable content delivery network with global reach

+ Azure DDoS Protection 

Protect your Azure resources from distributed denial-of-service (DDoS) attacks

+ Azure Orbital 

Satellite ground station and scheduling services for fast downlinking of data

+ Azure ExpressRoute 

Experience a fast, reliable, and private connection to Azure

+ Azure Network Function Manager 

Extend Azure management for deploying 5G and SD-WAN network functions on edge devices

+ Azure Virtual Network Manager 

Centrally manage virtual networks in Azure from a single pane of glass

+ Azure Private Link 

Private access to services hosted on the Azure platform, keeping your data on the Microsoft network

Products Security 

Security

Protect your enterprise from advanced threats across hybrid cloud workloads

+ Microsoft Sentinel 

Cloud-native SIEM and intelligent security analytics

+ Microsoft Defender for Cloud 

Extend threat protection to any infrastructure

+ Application Gateway 

Build secure, scalable, highly available web front ends in Azure

+ Key Vault 

Safeguard and maintain control of keys and other secrets

+ VPN Gateway 

Establish secure, cross-premises connectivity

+ Azure DDoS Protection 

Protect your Azure resources from distributed denial-of-service (DDoS) attacks

+ Azure Bastion 

Fully managed service that helps secure remote access to your virtual machines

+ Web Application Firewall 

A cloud-native web application firewall (WAF) service that provides powerful protection for web apps

+ Azure Firewall 

Cloud-native and intelligent network firewall security

+ Azure Firewall Manager 

Central network security policy and route management for globally distributed, software-defined perimeters

Products Storage 

Storage

Get secure, massively scalable cloud storage for your data, apps, and workloads

+ Azure Disk Storage 

High-performance, highly durable block storage

+ Azure Data Lake Storage 

Scalable, secure data lake for high-performance analytics

+ Azure Files 

Simple, secure and serverless enterprise-grade cloud file shares

+ Azure NetApp Files 

Enterprise-grade Azure file shares, powered by NetApp

+ Azure Backup 

Simplify data protection with built-in backup management at scale

+ Azure Blob Storage 

Massively scalable and secure object storage

+ Azure Data Box 

Appliances and solutions for data transfer to Azure and edge compute

+ Archive Storage 

Industry leading price point for storing rarely accessed data

Products Web 

Web

Build, deploy, and scale powerful web applications quickly and efficiently

+ Web Apps 

Quickly create and deploy mission-critical web apps at scale

Fast, reliable content delivery network with global reach

+ Azure SignalR Service 

Add real-time web functionalities easily

+ Azure Web PubSub 

Easily build real-time messaging web applications using WebSockets and the publish-subscribe pattern

Add location data and mapping visuals to business applications and solutions

+ Static Web Apps 

Streamlined full-stack development from source code to global high availability

+ Azure Communication Services 

Build rich communication experiences with the same secure platform used by Microsoft Teams

+ Azure Fluid Relay 

Easily add real-time collaborative experiences to your apps with Fluid Framework

Products Virtual desktop infrastructure 

Virtual desktop infrastructure

Empower employees to work securely from anywhere with a cloud-based virtual desktop infrastructure

+ Azure Virtual Desktop 

Enable a secure, remote desktop experience from anywhere

+ VMware Horizon Cloud on Microsoft Azure 

Provision Windows desktops and apps with VMware and Azure Virtual Desktop

+ Citrix Virtual Apps and Desktops for Azure 

Provision Windows desktops and apps on Azure with Citrix and Azure Virtual Desktop

+ Solutions 

View all solutions (40+) 

Home Solutions 

View all solutions (40+) 

+ Use cases 
+ Industry solutions 
+ Organization type 
+ Resources 

Solutions Use cases 

Use cases

+ Application development 

Build, manage, and continuously deliver cloud apps-with any platform or language

+ AI 

Analyze images, comprehend speech, and make predictions using data

+ Cloud migration and modernization 

Simplify and accelerate your migration and modernization with guidance, tools, and resources

+ Data and analytics 

Gather, store, process, analyze, and visualize data of any variety, volume, or velocity

+ Hybrid cloud and infrastructure 

Bring the agility and innovation of the cloud to your on-premises workloads

+ Internet of Things 

Connect, monitor, and control devices with secure, scalable, and open edge-to-cloud solutions

+ Security and governance 

Help protect data, apps, and infrastructure with trusted security services

Back Application development 

Application development

+ Development and testing 

Simplify and accelerate development and testing (dev/test) across any platform.

+ DevOps 

Bring together people, processes, and products to continuously deliver value to customers and coworkers.

+ DevSecOps 

Build secure apps on a trusted platform. Embed security in your developer workflow and foster collaboration with a DevSecOps framework.

+ E-commerce 

Give customers what they want with a personalized, scalable, and secure shopping experience.

+ Low-code application development on Azure 

Turn your ideas into applications faster using the right tools for the job.

+ Microservice applications 

Create reliable apps and functionalities at scale and bring them to market faster.

+ Mobile 

Reach your customers everywhere, on any device, with a single mobile app build.

+ Modern application development 

Respond to changes faster, optimize costs, and ship confidently.

+ Serverless computing 

Build apps faster by not having to manage infrastructure.

+ Messaging services on Azure 

Connect modern applications with a comprehensive set of messaging services on Azure.

+ Application and data modernization 

Accelerate time to market, deliver innovative experiences, and improve security with Azure application and data modernization.

+ Business SaaS apps 

Use business insights and intelligence from Azure to build software as a service (SaaS) apps

+ Azure SaaS Development Kit 

Move to a SaaS model faster with a kit of prebuilt code, templates, and modular resources.

Back AI 

AI

+ AI 

Build mission-critical solutions to analyze images, comprehend speech, and make predictions using data.

+ Knowledge mining 

Uncover latent insights from across all of your business data with AI.

Back Cloud migration and modernization 

Cloud migration and modernization

+ Azure migration and modernization center 

Save money and improve efficiency by migrating and modernizing your workloads to Azure with proven tools and guidance.

+ .NET apps migration 

Optimize costs, operate confidently, and ship features faster by migrating your ASP.NET web apps to Azure.

+ Development and testing 

Simplify and accelerate development and testing (dev/test) across any platform.

+ Linux on Azure 

Enhanced security and hybrid capabilities for your mission-critical Linux workloads.

+ Mainframe and midrange migration 

Reduce infrastructure costs by moving your mainframe and midrange apps to Azure.

+ SAP on Azure 

Bring the intelligence, security, and reliability of Azure to your SAP applications.

+ SQL Server migration 

Move your SQL Server databases to Azure with few or no application code changes.

+ Windows Server migration 

Run your Windows workloads on the trusted cloud for Windows Server.

+ Open-source database migration 

Explore tools and resources for migrating open-source databases to Azure while reducing costs.

+ Application and data modernization 

Accelerate time to market, deliver innovative experiences, and improve security with Azure application and data modernization.

+ Integration services on Azure 

Seamlessly integrate applications, systems, and data for your enterprise.

Back Data and analytics 

Data and analytics

+ Blockchain 

Reduce fraud and accelerate verifications with immutable shared record keeping.

+ Business intelligence 

Drive faster, more efficient decision making by drawing deeper insights from your analytics.

+ Cloud-scale analytics 

Accelerate time to insights with an end-to-end cloud analytics solution.

Back Hybrid cloud and infrastructure 

Hybrid cloud and infrastructure

+ Backup and disaster recovery 

Minimize disruption to your business with cost-effective backup and disaster recovery solutions.

+ High-performance computing (HPC) 

Get fully managed, single tenancy supercomputers with high-performance storage and no data movement.

+ Hybrid and multicloud solutions 

Bring innovation anywhere to your hybrid environment across on-premises, multicloud, and the edge.

+ Azure private multi-access edge compute (MEC) 

Deliver ultra-low-latency networking, applications and services at the enterprise edge.

+ Business-critical applications 

Run your mission-critical applications on Azure for increased operational agility and security.

+ Quantum computing 

Experience quantum impact today with the world's first full-stack, quantum computing cloud ecosystem.

+ Azure public multi-access edge compute (MEC) 

Deliver ultra-low-latency networking, applications, and services at the mobile operator edge.

Back Internet of Things 

Internet of Things

+ Azure IoT 

Connect devices, analyze data, and automate processes with secure, scalable, and open edge-to-cloud solutions.

+ Azure Industrial IoT 

Build open, interoperable IoT solutions that secure and modernize industrial systems.

+ Azure IoT for safer workplaces 

Help safeguard physical work environments with scalable IoT solutions designed for rapid deployment.

+ IoT security 

Strengthen your security posture with end-to-end security for your IoT solutions.

+ IoT for sustainability 

Meet environmental sustainability goals and accelerate conservation projects with IoT technologies.

Back Security and governance 

Security and governance

+ Azure governance 

Ensure compliance using built-in cloud governance capabilities.

+ Backup and disaster recovery 

Minimize disruption to your business with cost-effective backup and disaster recovery solutions.

+ Azure network security 

Cloud-native network security for protecting your applications, network, and workloads.

Solutions Industry solutions 

Industry solutions

+ Energy 

Modernize operations to speed response rates, boost efficiency, and reduce costs

+ Financial services 

Transform customer experience, build trust, and optimize risk management

+ Gaming 

Build, quickly launch, and reliably scale your games across platforms

+ Government 

Implement remote government access, empower collaboration, and deliver secure services

+ Healthcare 

Boost patient engagement, empower provider collaboration, and improve operations

+ Manufacturing 

Improve operational efficiencies, reduce costs, and generate new revenue opportunities

+ Media and entertainment 

Create content nimbly, collaborate remotely, and deliver seamless customer experiences

+ Retail 

Personalize customer experiences, empower your employees, and optimize supply chains

Solutions Organization type 

Organization type

+ Startups 

Get started easily, run lean, stay agile, and grow fast with Azure for startups

+ Nonprofits 

Accelerate mission impact, increase innovation, and optimize efficiency-with world-class security

Solutions Resources 

+ Reference architectures 

Find reference architectures, example scenarios, and solutions for common workloads on Azure

+ COVID-19 resources 

We're in this together-explore Azure resources and tools to help you navigate COVID-19

+ Azure Marketplace 

Search from a rich catalog of more than 17,000 certified apps and services

+ Customer enablement 

Plan a clear path forward for your cloud journey with proven tools, guidance, and resources

+ Pricing 

Home Pricing 

How to buy

+ Azure pricing 

Get the best value at every stage of your cloud journey

+ Free Azure services 

See which services offer free monthly amounts

+ Pay as you go 

Only pay for what you use, plus get free services

+ Flexible purchase options 

Find the options that work best for you

+ Azure benefits and incentives 

Explore special offers, benefits, and incentives

Pricing tools and resources

+ Pricing calculator 

Estimate the costs for Azure products and services

+ TCO calculator 

Estimate your total cost of ownership and cost savings

+ Optimize your costs 

Learn how to manage and optimize your cloud spend

+ Cloud economics 

Understand the value and economics of moving to Azure

+ Partners 

Home Partners 

Find a partner

+ Azure Marketplace 

Find, try, and buy trusted apps and services

+ Find a partner 

Get up and running in the cloud with help from an experienced partner

Become a partner

+ Azure Partner Zone 

Find the latest content, news, and guidance to lead customers to the cloud

+ Azure technology partners 

Build, extend, and scale your apps on a trusted cloud platform

+ Publish your app 

Reach more customers-sell directly to over 4M users a month in the commercial marketplace

+ Resources 

Home Resources 

Learning

+ Get started with Azure 
+ Training and certifications 
+ Customer stories 
+ Analyst reports, white papers, and e-books 
+ Videos 
+ Learn more about cloud computing 

Technical resources

+ Documentation 
+ Developer resources 
+ Quickstart templates 

Community

+ Developer community 
+ Students 
+ Developer stories 

What's new

+ Updates 
+ Blog 
+ Events and Webinars 

+ Docs 
+ Support 
+ Contact Sales 
+ Free account 
+ Sign in 

Sign in 

+ Contact Sales 
+ Free account 

+ Home 
+ Kubernetes 

Kubernetes is open-source orchestration software for deploying, managing, and scaling containers

+ Overview 
+ Why Use Kubernetes 
+ Beyond Kubernetes 
+ DevOps and Kubernetes 
+ Example Workflow 
+ Azure Kubernetes Service (AKS) 
+ Community 
+ FAQs 
+ Resources 
+ More 

+ Free account 

Kubernetes explained

Modern applications are increasingly built using containers, which are microservices packaged with their dependencies and configurations. Kubernetes (pronounced "koo-ber-net-ees") is open-source software for deploying and managing those containers at scale-and it's also the Greek word for helmsmen of a ship or pilot. Build, deliver, and scale containerized apps faster with Kubernetes, sometimes referred to as "k8s" or "k-eights."

Explore Kubernetes with this simple learning path 

How Kubernetes works

As applications grow to span multiple containers deployed across multiple servers, operating them becomes more complex. To manage this complexity, Kubernetes provides an open source API that controls how and where those containers will run.

Kubernetes orchestrates clusters of virtual machines and schedules containers to run on those virtual machines based on their available compute resources and the resource requirements of each container. Containers are grouped into pods, the basic operational unit for Kubernetes, and those pods scale to your desired state.

Kubernetes also automatically manages service discovery, incorporates load balancing, tracks resource allocation, and scales based on compute utilization. And, it checks the health of individual resources and enables apps to self-heal by automatically restarting or replicating containers.

Watch more videos on Kubernetes basics 

+ Watch how Kubernetes works 
+ See Common Kubernetes scenarios 

Why use Kubernetes?

Keeping containerized apps up and running can be complex because they often involve many containers deployed across different machines. Kubernetes provides a way to schedule and deploy those containers-plus scale them to your desired state and manage their lifecycles. Use Kubernetes to implement your container-based applications in a portable, scalable, and extensible way.

Make workloads portable

Because container apps are separate from their infrastructure, they become portable when you run them on Kubernetes. Move them from local machines to production among on-premises, hybrid, and multiple cloud environments-all while maintaining consistency across environments.

Scale containers easily

Define complex containerized applications and deploy them across a cluster of servers or even multiple clusters with Kubernetes. As Kubernetes scales applications according to your desired state, it automatically monitors and maintains container health.

Build more extensible apps

A large open-source community of developers and companies actively builds extensions and plugins that add capabilities such as security, monitoring, and management to Kubernetes. Plus, the Certified Kubernetes Conformance Program requires every Kubernetes version to support APIs that make it easier to use those community offerings.

E-Book: Learn practical skills to get up and running with Kubernetes 

Get started with Kubernetes

See how to begin deploying and managing containerized applications.

Follow the learning path

Get hands-on experience with Kubernetes components, capabilities, and solutions.

Get the guide 

Build on a complete Kubernetes platform

While Kubernetes itself offers portability, scalability, and extensibility, adding end-to-end development, operations, and security control allows you to deploy updates faster-without compromising security or reliability-and save time on infrastructure management. As you adopt Kubernetes, also consider implementing:

Infrastructure automation or serverless Kubernetes to eliminate routine tasks like provisioning, patching, and upgrading.

See examples 
+ 

Tools for containerized app development and continuous integration and continuous deployment (CI/CD) workflows.

See examples 
+ 

Services to manage security, governance, identity and access.

See examples 

Harness Kubernetes with DevOps practices

As a Kubernetes app grows-adding containers, environments, and teams-release frequency tends to increase, along with developmental and operational complexity. Employing DevOps practices in Kubernetes environments allows you to move quickly at scale with enhanced security.

Deliver code faster with CI/CD

While containers provide a consistent application packaging format that eases the collaboration between development and operations teams, CI/CD can accelerate the move from code to container and to Kubernetes cluster in minutes by automating those tasks.

Set up CI/CD for Kubernetes 

Manage resources effectively with infrastructure as code

Infrastructure as code establishes consistency and visibility of compute resources across teams-reducing the likelihood of human error. This practice works with the declarative nature of Kubernetes applications powered by Helm. Combining the two allows you to define apps, resources, and configurations in a reliable, trackable, and repeatable way.

Deploy a Kubernetes cluster with Terraform 

Accelerate the feedback loop with constant monitoring

Shorten the time between bugs and fixes with a complete view of your resources, cluster, Kubernetes API, containers, and code-from container health monitoring to centralized logging. That view helps you prevent resource bottlenecks, trace malicious requests, and keep your Kubernetes applications healthy.

See how real-time container insights work 

Balance speed and security with DevOps

Bring real-time observability into your DevOps workflow without sacrificing velocity. Apply compliance checks and reconfigurations automatically to secure your build and release pipeline-and your Kubernetes application as a result.

See continuous security in action 

Example DevOps workflow with Kubernetes

+ Rapidly iterate, test, and debug different parts of an application together in the same Kubernetes cluster. 
+ Merge and check code into a GitHub repository for continuous integration. Then, run automated builds and tests as a part of continuous delivery. 
+ Verify the source and integrity of container images. Images are held in quarantine until they pass scanning. 
+ Provision Kubernetes clusters with tools like Terraform. Helm charts installed by Terraform define the desired state of app resources and configurations. 
+ Enforce policies to govern deployments to the Kubernetes cluster. 
+ The release pipeline automatically executes pre-defined deployment strategy with each code. 
+ Add policy audit and automatic remediation to the CI/CD pipeline. For example, only the release pipeline has permission to create new pods in your Kubernetes environment. 
+ Enable app telemetry, container health monitoring, and real-time log analytics. 
+ Address issues with insights and inform plans for the next sprint. 

Learn more about Kubernetes deployment strategy 

Build on the strengths of Kubernetes with Azure

Automate provisioning, upgrading, monitoring, and scaling with the fully managed Microsoft Azure Kubernetes Service (AKS). Get serverless Kubernetes, a simpler development-to-production experience, and enterprise-grade security and governance.

Learn more about AKS 

Draw inspiration and innovation from the Kubernetes community

Kubernetes was created by-and thrives because of-the thousands of individuals and hundreds of organizations who have given their wisdom, code, and continuing support to the people who use it. Build the success of your software on top of their impassioned contributions.

35,000
Contributors 

180,000
Commits 

Top project
in GitHub 

Microsoft contributions to Kubernetes

Bringing open-source ingenuity to enterprises

To make Kubernetes easier for organizations to adopt-and easier for developers to use-Microsoft has tripled the number of employees who participate in the open source project in just three years. Now the third-leading corporate contributor, Microsoft works to make Kubernetes more enterprise-friendly and accessible by bringing the latest learnings and best practices from working with diverse customers to the Kubernetes community.

FAQs - Kubernetes

+ Where should I start? 

Follow this curated journey to begin learning Kubernetes.

+ What are some common use cases for Kubernetes? 

Kubernetes is useful in scenarios ranging from moving applications to the cloud to simplifying challenges in machine learning and AI.

Key use cases include:

+ Migrating existing applications to the cloud 
+ Simplifying deployment and management of microservices-based applications 
+ Scaling with ease 
+ IoT device deployment and management 
+ Machine learning 

+ What are Kubernetes best practices? 

See best practices and architectural patterns created by the thousands of technical professionals and partners who use Kubernetes.

+ What is a Kubernetes deployment? 

A Kubernetes deployment allows you to describe your desired application deployment state. Kubernetes scheduler ensures the actual state matches your desired state-and maintains that state in the event one or more pods crash. Kubernetes deployments also allow you to consistently upgrade your applications without downtime.

See Kubernetes deployment strategies

+ How do I deploy to Kubernetes using DevOps practices? 

Deployment to Kubernetes using DevOps typically involves a respository such as Git for version management. The repository serves as the beginning of the CI/CD line. Depending on the approach you use, changes in the repository trigger integration, build, delivery, and deployment activities. 

See how AKS works with Azure DevOps in detail

+ What is Kubernetes vs. Docker? 

Kubernetes and Docker work together.

Docker provides an open standard for packaging and distributing containerized applications. Using Docker, you can build and run containers, and store and share container images.

Kubernetes orchestrates and manages the distributed, containerized applications that Docker creates. It also provides the infrastructure needed to deploy and run those applications on a cluster of machines. 

Learn more about Kubernetes vs. Docker 

More about Kubernetes

+ Learn Kubernetes basics 
+ See Kubernetes best practices 
+ Learn more about containers 

Learn about AKS

+ Explore Azure Kubernetes Service (AKS) 

Watch AKS videos and on demand Azure webinars for demos, top features, and technical sessions.


=======asdf16======== Q\Go K8s\$\2a8fbe4b38ad4c413ba6378ec74b5f9d.txt
https://azure.microsoft.com/en-in/topic/what-is-kubernetes/
TITLE: What is Kubernetes? | Microsoft Azure

Build intelligent edge solutions with world-class developer tools, long-term support and enterprise-grade security.

+ Azure RTOS 

Making embedded IoT development and connectivity easy

+ Azure Machine Learning 

Enterprise-grade machine learning service to build and deploy models faster

+ Azure Percept 

Accelerate edge intelligence from silicon to service

Simple and secure location APIs provide geospatial context to data

Products Management and Governance 

Management and Governance

Simplify, automate and optimise the management and compliance of your cloud resources

+ Microsoft Azure portal 

Build, manage, and monitor all Azure products in a single, unified console

+ Azure Purview 

A unified data governance solution that maximizes the business value of your data

+ Azure mobile app 

Stay connected to your Azure resources-anytime, anywhere

+ Cloud Shell 

Streamline Azure administration with a browser-based shell

+ Azure Advisor 

Your personalised Azure best practices recommendation engine

+ Azure Backup 

Simplify data protection and protect against ransomware

+ Azure Cost Management and Billing 

Manage your cloud spending with confidence

+ Azure Policy 

Implement corporate governance and standards at scale for Azure resources

+ Azure Site Recovery 

Keep your business running with built-in disaster recovery service

+ Azure Chaos Studio 

Improve application resilience by introducing faults and simulating outages

Full observability into your apps, infrastructure, and network

Products Media 

Media

Deliver high-quality video content anywhere, any time and on any device

+ Media Services 

Encode, store, and stream video and audio at scale

+ Encoding 

Studio grade encoding at cloud scale

+ Azure Media Player 

A single player for all your playback needs

+ Live and On-Demand Streaming 

Deliver content to virtually all devices with scale to meet business needs

+ Content Protection 

Securely deliver content using AES, PlayReady, Widevine and Fairplay

Ensure secure, reliable content delivery with broad global reach

Products Migration 

Migration

Simplify and accelerate your migration to the cloud with guidance, tools and resources

+ Azure Migrate 

Discover, assess, right-size, and migrate your on-premises virtual machines (VMs) to Azure

+ Azure Site Recovery 

Keep your business running with built-in disaster recovery service

+ Azure Database Migration Service 

Simplify on-premises database migration to the cloud

+ Data Box 

Appliances and solutions for data transfer to Azure and edge compute

+ Azure Cost Management and Billing 

Manage your cloud spending with confidence

Products Mixed Reality 

Mixed Reality

Blend your physical and digital worlds to create immersive, collaborative experiences

+ Spatial Anchors 

Create multi-user, spatially aware mixed reality experiences

+ Azure Remote Rendering 

Render high-quality, interactive 3D content and stream it to your devices in real time

+ Azure Digital Twins 

Build next-generation IoT solutions that model entire environments in real time

+ Kinect DK 

Build computer vision and speech models using a developer kit with advanced AI sensors

+ Object Anchors 

Automatically align and anchor 3D content to objects in the physical world

Products Mobile 

Mobile

Build and deploy cross-platform and native apps for any mobile device

+ Notification Hubs 

Send push notifications to any platform from any back end

+ Visual Studio App Centre 

Continuously build, test, release and monitor your mobile and desktop apps

+ Xamarin 

Create cloud-powered mobile apps faster

Simple and secure location APIs provide geospatial context to data

Deploy high-quality AI models as APIs

+ Spatial Anchors 

Create multi-user, spatially aware mixed reality experiences

+ Azure Communication Services 

Build rich communication experiences with the same secure platform capabilities used by Microsoft Teams

Products Networking 

Networking

Connect cloud and on-premises infrastructure and services to provide your customers and users the best possible experience

+ Virtual Network 

Provision private networks, optionally connect to on-premises datacenters

+ Load Balancing 

Explore Azure load balancing services and find the best solution for your workloads using an easy-to-use service selection tool

+ Application Gateway 

Build secure, scalable and highly available web front ends in Azure

+ VPN Gateway 

Establish secure, cross-premises connectivity

+ Azure DNS 

Host your DNS domain in Azure

Ensure secure, reliable content delivery with broad global reach

+ Azure DDoS Protection 

Protect your applications from Distributed Denial of Service (DDoS) attacks

+ Azure Orbital 

Satellite ground station and scheduling service connected to Azure for fast downlinking of data

+ Azure ExpressRoute 

Dedicated private network fiber connections to Azure

+ Azure Network Function Manager 

Extend Azure management for deploying 5G and SD-WAN network functions on edge devices

+ Azure Virtual Network Manager 

Centrally manage virtual networks in Azure from a single pane of glass

+ Azure Private Link 

Private access to services hosted on the Azure platform, keeping your data on the Microsoft network

Products Security 

Security

Protect your enterprise from advanced threats across hybrid cloud workloads

+ Azure Sentinel 

Put cloud-native SIEM and intelligent security analytics to work to help protect your enterprise

+ Security Center 

Unify security management and enable advanced threat protection across hybrid cloud workloads

+ Application Gateway 

Build secure, scalable and highly available web front ends in Azure

+ Key Vault 

Safeguard and maintain control of keys and other secrets

+ VPN Gateway 

Establish secure, cross-premises connectivity

+ Azure DDoS Protection 

Protect your applications from Distributed Denial of Service (DDoS) attacks

+ Azure Bastion 

Private and fully managed RDP and SSH access to your virtual machines

+ Web Application Firewall 

A cloud-native web application firewall (WAF) service that provides powerful protection for web apps

+ Azure Firewall 

Cloud-native, next-generation firewall to protect your Azure Virtual Network resources

+ Azure Firewall Manager 

Central network security policy and route management for globally distributed, software-defined perimeters

Products Storage 

Storage

Get secure, massively scalable cloud storage for your data, apps and workloads

+ Azure Disk Storage 

High-performance, highly durable block storage

+ Azure Data Lake Storage 

Massively scalable, secure data lake functionality built on Azure Blob Storage

+ Azure Files 

Simple, secure and serverless enterprise-grade cloud file shares

+ Azure NetApp Files 

Enterprise-grade Azure file shares, powered by NetApp

+ Azure Backup 

Simplify data protection and protect against ransomware

+ Azure Blob Storage 

Massively scalable and secure object storage

+ Data Box 

Appliances and solutions for data transfer to Azure and edge compute

+ Archive Storage 

Industry leading price point for storing rarely accessed data

Products Web 

Web

Build, deploy, and scale powerful web applications quickly and efficiently

+ Web Apps 

Quickly create and deploy mission-critical web apps at scale

Ensure secure, reliable content delivery with broad global reach

+ Azure SignalR Service 

Add real-time web functionalities easily

+ Azure Web PubSub 

Easily build real-time messaging web applications using WebSockets and the publish-subscribe pattern

Simple and secure location APIs provide geospatial context to data

+ Static Web Apps 

A modern web app service that offers streamlined full-stack development from source code to global high availability

+ Azure Communication Services 

Build rich communication experiences with the same secure platform capabilities used by Microsoft Teams

+ Azure Fluid Relay 

Easily add real-time collaborative experiences to your apps with Fluid Framework

Products Windows Virtual Desktop 

Windows Virtual Desktop

The best virtual desktop experience, delivered on Azure

+ Azure Virtual Desktop 

Enable a secure, remote desktop experience from anywhere

+ VMware Horizon Cloud on Microsoft Azure 

Provision Windows desktops and apps with VMware and Azure Virtual Desktop

+ Citrix Virtual Apps and Desktops for Azure 

Provision Windows desktops and apps on Azure with Citrix and Azure Virtual Desktop

+ Solutions 

View all solutions (40+) 

Home Solutions 

View all solutions (40+) 

+ Use cases 
+ Industry solutions 
+ Organisation type 
+ Resources 

Solutions Use cases 

Use cases

+ Application development 

Build, manage and continuously deliver cloud apps-with any platform or language

+ AI 

Analyse images, comprehend speech and make predictions using data

+ Cloud migration and modernisation 

Simplify and accelerate your migration and modernisation with guidance, tools and resources

+ Data and analytics 

Gather, store, process, analyse and visualise data of any variety, volume or velocity

+ Hybrid cloud and infrastructure 

Bring the agility and innovation of the cloud to your on-premises workloads

+ Internet of Things 

Connect, monitor, and control devices with secure, scalable, and open edge-to-cloud solutions

+ Security and governance 

Help protect data, apps and infrastructure with trusted security services

Back Application development 

Application development

+ Development and testing 

Simplify and accelerate development and testing (dev/test) across any platform

+ DevOps 

Bring together people, processes and products to continuously deliver value to customers and coworkers.

+ DevSecOps 

Build secure apps on a trusted platform. Embed security in your developer workflow and foster collaboration with a DevSecOps framework.

+ E-commerce 

Give customers what they want with a personalised, scalable and secure shopping experience

+ Low-code application development on Azure 

Turn your ideas into applications faster using the right tools for the job.

+ Microservice applications 

Create reliable apps and functionalities at scale and bring them to market faster.

+ Mobile 

Reach your customers everywhere, on any device, with a single mobile app build.

+ Modern application development 

Respond to changes faster, optimise costs and ship confidently.

+ Serverless computing 

Build apps faster by not having to manage infrastructure.

+ Messaging services on Azure 

Connect modern applications with a comprehensive set of messaging services on Azure

+ Application and data modernisation 

Accelerate time to market, deliver innovative experiences and improve security with Azure application and data modernisation.

+ Business SaaS apps 

Use business insights and intelligence from Azure to build software as a service (SaaS) apps

+ Azure SaaS Development Kit 

Move to a SaaS model faster with a kit of prebuilt code, templates, and modular resources.

Back AI 

AI

+ AI 

Build mission-critical solutions to analyse images, comprehend speech and make predictions using data.

+ Knowledge mining 

Uncover latent insights from across all of your business data with AI.

Back Cloud migration and modernisation 

Cloud migration and modernisation

+ Azure migration and modernisation centre 

Save money and improve efficiency by migrating and modernising your workloads to Azure with proven tools and guidance.

+ .NET apps migration 

Optimise costs, operate confidently and ship features faster by migrating your ASP.NET web apps to Azure.

+ Development and testing 

Simplify and accelerate development and testing (dev/test) across any platform

+ Linux on Azure 

Enhanced security and hybrid capabilities for your mission-critical Linux workloads

+ Mainframe and midrange migration 

Reduce infrastructure costs by moving your mainframe and midrange apps to Azure.

+ SAP on Azure 

Bring the intelligence, security and reliability of Azure to your SAP applications.

+ SQL Server migration 

Move your SQL Server databases to Azure with few or no application code changes.

+ Windows Server migration 

Run your Windows workloads on the trusted cloud for Windows Server.

+ Open-source database migration 

Explore tools and resources for migrating open-source databases to Azure while reducing costs

+ Application and data modernisation 

Accelerate time to market, deliver innovative experiences and improve security with Azure application and data modernisation.

+ Integration services on Azure 

Seamlessly integrate applications, systems, and data for your enterprise.

Back Data and analytics 

Data and analytics

+ Blockchain 

Reduce fraud and accelerate verifications with immutable shared record keeping.

+ Business intelligence 

Drive faster, more efficient decision making by drawing deeper insights from your analytics.

+ Cloud-scale analytics 

Accelerate time to insights with an end-to-end cloud analytics solution.

Back Hybrid cloud and infrastructure 

Hybrid cloud and infrastructure

+ Backup and disaster recovery 

Minimize disruption to your business with cost-effective backup and disaster recovery solutions.

+ High-performance computing (HPC) 

Get fully managed, single tenancy supercomputers with high-performance storage and no data movement.

+ Hybrid and multicloud solutions 

Bring innovation anywhere to your hybrid environment across on-premises, multicloud and the edge.

+ Azure private multi-access edge compute (MEC) 

Deliver ultra-low-latency networking, applications and services at the enterprise edge

+ Business-critical applications 

Run your mission-critical applications on Azure for increased operational agility and security.

+ Quantum computing 

Experience quantum impact today with the world's first full-stack, quantum computing cloud ecosystem.

+ Azure public multi-access edge compute (MEC) 

Deliver ultra-low-latency networking, applications, and services at the mobile operator edge.

Back Internet of Things 

Internet of Things

+ Azure IoT 

Connect devices, analyse data and automate processes with secure, scalable and open edge-to-cloud solutions.

+ Azure Industrial IoT 

Build open, interoperable IoT solutions that secure and modernise industrial systems.

+ Azure IoT for safer workplaces 

Help safeguard physical work environments with scalable IoT solutions designed for rapid deployment.

+ IoT security 

Strengthen your security posture with end-to-end security for your IoT solutions.

+ IoT for sustainability 

Meet environmental sustainability goals and accelerate conservation projects with IoT technologies.

Back Security and governance 

Security and governance

+ Azure governance 

Ensure compliance using built-in cloud governance capabilities.

+ Backup and disaster recovery 

Minimize disruption to your business with cost-effective backup and disaster recovery solutions.

+ Azure network security 

Cloud-native network security for protecting your applications, network and workloads.

Solutions Industry solutions 

Industry solutions

+ Energy 

Modernise operations to speed response rates, boost efficiency and reduce costs

+ Financial services 

Transform customer experience, build trust and optimise risk management

+ Gaming 

Build, quickly launch and reliably scale your games across platforms

+ Government 

Implement remote government access, empower collaboration and deliver secure services

+ Healthcare 

Boost patient engagement, empower provider collaboration and improve operations

+ Manufacturing 

Improve operational efficiencies, reduce costs and generate new revenue opportunities

+ Media and entertainment 

Create content nimbly, collaborate remotely and deliver seamless customer experiences

+ Retail 

Personalise customer experiences, empower your employees and optimise supply chains

Solutions Organisation type 

Organisation type

+ Startups 

Get started easily, run lean, stay agile and grow fast with Azure for startups

+ Nonprofits 

Accelerate mission impact, increase innovation and optimise efficiency-with world-class security

Solutions Resources 

+ Reference architectures 

Find reference architectures, example scenarios and solutions for common workloads on Azure

+ COVID-19 resources 

We are in this together-explore Azure resources and tools to help you navigate COVID-19

+ Azure Marketplace 

Search from a rich catalogue of more than 17,000 certified apps and services

+ Customer enablement 

Plan a clear path forward for your cloud journey with proven tools, guidance and resources

+ Pricing 

Home Pricing 

How to buy

+ Azure pricing 

Get the best value at every stage of your cloud journey

+ Free Azure services 

See which services offer free monthly amounts

+ Pay as you go 

Only pay for what you use, plus get free services

+ Flexible purchase options 

Find the options that works best for you

+ Azure benefits and incentives 

Explore special offers, benefits and incentives

Pricing tools and resources

+ Pricing calculator 

Estimate the costs for Azure products and services

+ TCO calculator 

Estimate your total cost of ownership and cost savings

+ Optimise your costs 

Learn how to manage and optimise your cloud spend

+ Cloud economics 

Understand the value and economics of moving to Azure

+ Partners 

Home Partners 

Find a partner

+ Azure Marketplace 

Find, try and buy trusted apps and services

+ Find a partner 

Get up and running in the cloud with help from an experienced partner

Become a partner

+ Azure Partner Zone 

Find the latest content, news and guidance to lead customers to the cloud

+ Azure technology partners 

Build, extend and scale your apps on a trusted cloud platform

+ Publish your app 

Reach more customers-sell directly to over 4M users a month in the commercial marketplace

+ Resources 

Home Resources 

Learning

+ Get started with Azure 
+ Training and certifications 
+ Customer stories 
+ Analyst reports, white papers and e-books 
+ Videos 
+ Learn more about cloud computing 

Technical resources

+ Documentation 
+ Developer resources 
+ Quickstart templates 

Community

+ Developer community 
+ Students 
+ Developer stories 

What's new

+ Updates 
+ Blog 
+ Events and Webinars 

+ Docs 
+ Support 
+ Contact Sales 
+ Free account 
+ Sign In 

Sign In 

+ Contact Sales 
+ Free account 

+ Home 
+ Kubernetes 

Kubernetes is open-source orchestration software for deploying, managing and scaling containers

+ Overview 
+ Why Use Kubernetes 
+ Beyond Kubernetes 
+ DevOps and Kubernetes 
+ Example Workflow 
+ Azure Kubernetes Service (AKS) 
+ Community 
+ FAQs 
+ Resources 
+ More 

+ Free account 

Kubernetes explained

Modern applications are increasingly built using containers, which are microservices packaged with their dependencies and configurations. Kubernetes (pronounced "koo-ber-net-ees") is open-source software for deploying and managing those containers at scale-and it is also the Greek word for helmsmen of a ship or pilot. Build, deliver and scale containerised apps faster with Kubernetes, sometimes referred to as "k8 s" or "k-eights."

Explore Kubernetes with this simple learning path 

How Kubernetes works

As applications grow to span multiple containers deployed across multiple servers, operating them becomes more complex. To manage this complexity, Kubernetes provides an open source API that controls how and where those containers will run.

Kubernetes orchestrates clusters of virtual machines and schedules containers to run on those virtual machines based on their available compute resources and the resource requirements of each container. Containers are grouped into pods, the basic operational unit for Kubernetes and those pods scale to your desired state.

Kubernetes also automatically manages service discovery, incorporates load balancing, tracks resource allocation and scales based on compute utilisation. And, it checks the health of individual resources and enables apps to self-heal by automatically restarting or replicating containers.

Watch more videos on Kubernetes basics 

+ Watch how Kubernetes works 
+ See Common Kubernetes scenarios 

Why use Kubernetes?

Keeping containerised apps up and running can be complex because they often involve many containers deployed across different machines. Kubernetes provides a way to schedule and deploy those containers-plus scale them to your desired state and manage their lifecycles. Use Kubernetes to implement your container-based applications in a portable, scalable and extensible way.

Make workloads portable

Because container apps are separate from their infrastructure, they become portable when you run them on Kubernetes. Move them from local machines to production among on-premises, hybrid and multiple cloud environments-all while maintaining consistency across environments.

Scale containers easily

Define complex containerised applications and deploy them across a cluster of servers or even multiple clusters with Kubernetes. As Kubernetes scales applications according to your desired state, it automatically monitors and maintains container health.

Build more extensible apps

A large open-source community of developers and companies actively builds extensions and plugins that add capabilities such as security, monitoring and management to Kubernetes. Plus, the Certified Kubernetes Conformance Program requires every Kubernetes version to support APIs that make it easier to use those community offerings.

E-Book: Learn practical skills to get up and running with Kubernetes 

Get started with Kubernetes

See how to begin deploying and managing containerised applications.

Follow the learning path

Get hands-on experience with Kubernetes components, capabilities and solutions.

Get the guide 

Build on a complete Kubernetes platform

While Kubernetes itself offers portability, scalability, and extensibility, adding end-to-end development, operations and security control allows you to deploy updates faster-without compromising security or reliability-and save time on infrastructure management. As you adopt Kubernetes, also consider implementing:

Infrastructure automation or serverless Kubernetes to eliminate routine tasks like provisioning, patching and upgrading.

See examples 
+ 

Tools for containerised app development and continuous integration and continuous deployment (CI/CD) workflows.

See examples 
+ 

Services to manage security, governance, identity and access.

See examples 

Harness Kubernetes with DevOps practices

As a Kubernetes app grows-adding containers, environments and teams-release frequency tends to increase, along with developmental and operational complexity. Employing DevOps practices in Kubernetes environments allows you to move quickly at scale with enhanced security.

Deliver code faster with CI/CD

While containers provide a consistent application packaging format that eases the collaboration between development and operations teams, CI/CD can accelerate the move from code to container and to Kubernetes cluster in minutes by automating those tasks.

Set up CI/CD for Kubernetes 

Manage resources effectively with infrastructure as code

Infrastructure as code establishes consistency and visibility of compute resources across teams-reducing the likelihood of human error. This practice works with the declarative nature of Kubernetes applications powered by Helm. Combining the two allows you to define apps, resources and configurations in a reliable, trackable and repeatable way.

Deploy a Kubernetes cluster with Terraform 

Accelerate the feedback loop with constant monitoring

Shorten the time between bugs and fixes with a complete view of your resources, cluster, Kubernetes API, containers and code-from container health monitoring to centralised logging. That view helps you prevent resource bottlenecks, trace malicious requests and keep your Kubernetes applications healthy.

See how real-time container insights work 

Balance speed and security with DevOps

Bring real-time observability into your DevOps workflow without sacrificing velocity. Apply compliance checks and reconfigurations automatically to secure your build and release pipeline-and your Kubernetes application as a result.

See continuous security in action 

Example DevOps workflow with Kubernetes

+ Rapidly iterate, test and debug different parts of an application together in the same Kubernetes cluster. 
+ Merge and check code into a GitHub repository for continuous integration. Then, run automated builds and tests as a part of continuous delivery. 
+ Verify the source and integrity of container images. Images are held in quarantine until they pass scanning. 
+ Provision Kubernetes clusters with tools like Terraform. Helm charts installed by Terraform define the desired state of app resources and configurations. 
+ Enforce policies to govern deployments to the Kubernetes cluster. 
+ The release pipeline automatically executes pre-defined deployment strategy with each code. 
+ Add policy audit and automatic remediation to the CI/CD pipeline. For example, only the release pipeline has permission to create new pods in your Kubernetes environment. 
+ Enable app telemetry, container health monitoring and real-time log analytics. 
+ Address issues with insights and inform plans for the next sprint. 

Learn more about Kubernetes deployment strategy 

Build on the strengths of Kubernetes with Azure

Automate provisioning, upgrading, monitoring and scaling with the fully managed Microsoft Azure Kubernetes Service (AKS). Get serverless Kubernetes, a simpler development-to-production experience and enterprise-grade security and governance.

Learn more about AKS 

Draw inspiration and innovation from the Kubernetes community

Kubernetes was created by-and thrives because of-the thousands of individuals and hundreds of corporations who have given their wisdom, code and effort to the project. Build the success of your software on top of their impassioned contributions.

35,000
Contributors 

180,000
Commits 

Top project
in GitHub 

Microsoft contributions to Kubernetes

Bringing open-source ingenuity to enterprises

To make Kubernetes easier for organisations to adopt-and easier for developers to use-Microsoft has tripled the number of employees who participate in the open source project in just three years. Now the third-leading corporate contributor, Microsoft works to make Kubernetes more enterprise-friendly and accessible by bringing the latest learnings and best practices from working with diverse customers to the Kubernetes community.

FAQs - Kubernetes

+ Where should I start? 

Follow this curated journey to begin learning Kubernetes.

+ What are some common use cases for Kubernetes? 

Kubernetes is useful in scenarios ranging from moving applications to the cloud to simplifying challenges in machine learning and AI.

Key use cases include:

+ Migrating existing applications to the cloud 
+ Simplifying deployment and management of microservices-based applications 
+ Scaling with ease 
+ IoT device deployment and management 
+ Machine learning 

+ What are Kubernetes best practices? 

See best practices and architectural patterns created by the thousands of technical professionals and partners who use Kubernetes.

+ What is a Kubernetes deployment? 

A Kubernetes deployment allows you to describe your desired application deployment state. Kubernetes scheduler ensures the actual state matches your desired state-and maintains that state in the event one or more pods crash. Kubernetes deployments also allow you to consistently upgrade your applications without downtime.

See Kubernetes deployment strategies

+ How do I deploy to Kubernetes using DevOps practices? 

Deployment to Kubernetes using DevOps typically involves a respository such as Git for version management. The repository serves as the beginning of the CI/CD line. Depending on the approach you use, changes in the repository trigger integration, build, delivery and deployment activities. 

See how AKS works with Azure DevOps in detail

+ What is Kubernetes vs. Docker? 

Kubernetes and Docker work together.

Docker provides an open standard for packaging and distributing containerised applications. Using Docker, you can build and run containers and store and share container images.

Kubernetes orchestrates and manages the distributed, containerised applications that Docker creates. It also provides the infrastructure needed to deploy and run those applications on a cluster of machines. 

Learn more about Kubernetes vs. Docker 

More about Kubernetes

+ Learn Kubernetes basics 
+ See Kubernetes best practices 
+ Learn more about containers 

Learn about AKS

+ Explore Azure Kubernetes Service (AKS) 

Watch AKS videos and on demand Azure webinars for demos, top features and technical sessions.


=======asdf17======== Q\Go K8s\$\102038ef0df118309ec61a156ca76933.txt
https://realtoughcandy.com/best-golang-books/
TITLE: 17 Best Golang Books in 2022 [Learn Beginner and Intermediate Go NOW]

Today we're looking at the best Golang books of this year.

What is Golang?

Golang is a compiled, open source programming language created by Google. It makes building software more efficient, reliable and simple. Its syntax is similar to the C programming language. 

Some companies that use Golang include:

+ Uber
+ Twitch
+ Dailymotion
+ Dropbox
+ SoundCloud

And many more.

Is Golang hard to learn?

Go is generally considered an easier language to learn for beginners. It was specifically designed that way by Google developers. 

If you want to learn Golang, books and courses are two great ways to get started.

Is Golang the same as Go?

Yes, Golang is the same as Go. While Go is technically the correct name, Golang is also used because of its domain name which is golang.org. Also Golang can be useful to quickly clarify exactly what "Go" you're referring to.

This post contains affiliate links. I may receive compensation if you buy something. Read my disclosure for more details.

TLDR: Best Golang Books

^^ Best Overall ^^
The Go Programming Language

^^ Best for Newbies ^^
Head First Go

^^ Best Value ^^
Introducing Go: Build Reliable, Scalable Programs

Best Golang Books for Beginners

Now let's check out the best Go books of all time.

1. The Go Programming Language

[2198]^ Ideal for: developers with some prior programming experience in any language
[2198]^ Topics covered: Golang fundamentals

The Go Programming Language by authors Alan A. A. Donovan and Brian W. Kernighan is the go-to book to learn Golang. That's because you'll learn how to solve real-world Golang problems by writing clear and idiomatic Go.

^^ If you prefer interactive coding challenges, check out the course An Introduction to Programming in Go on Educative.io.

^^ The Go Programming Language is possibly the overall best Golang book on our list today.

You'll discover:

+ Golang basics
+ structural elements
+ methods and interfaces
+ concurrency
+ low-level features

With hundreds of practical examples, you'll explore Golang in its entirety up to and including its applications. After each chapter, you'll work on a series of exercises.

^^ The Go Programming Language is the authoritative resource on Golang programming.

What Golang developers are saying about The Go Programming Language book:

... Strongly recommend for people with no Go experience.

- Dustin Pfannenstiel, Golang developer

^^ Geena's Hot Take

We may have mentioned it one or five times that The Go Programming Language is the go-to resource to learn Golang programming.

It's true. We mean it.

Check out the almost 900 (and counting) reviews on Amazon. This book is the real deal. 

If you want to learn Golang and have a little bit of programming experience, The Go Programming Language is the book that will get you there.

PICK UP YOUR COPY OF THE GO PROGRAMMING LANGUAGE

2. Head First Go

[2198]^ Ideal for: Golang newbies, programming newbies
[2198]^ Topics covered: Golang fundamentals

Head First Go is a brain-friendly guide to teach you all things Golang. 

^^ Learn Golang with the all new course on Zero to Mastery: Go Programming: The Complete Developer's Guide.

^^ We think Head First Go is one of the best Golang books for beginners.

Instead of walls of text, you'll find a blend of illustrations, notes, hands-on examples and explanations of:

+ syntax basics
+ functions
+ packages
+ encapsulation
+ automated testing

And much, much more.

By the end of the book, you should have entry-level Golang skills.

^^ With Head First Go, you'll use scientifically proven methods to learn Golang and make the information stick.

Just a sampling of the stimulating learning environment in Head First Go

GRAB YOUR COPY OF HEAD FIRST GO

3. Introducing Go: Build Reliable, Scalable Programs

[2198]^ Ideal for: beginners familiar with programming basics
[2198]^ Topics covered: Go basics, complex types, library

Introducing Go by Caleb Doxsey provides a general introduction to Golang programming.

^^ Dive into the deep end of Golang with the Programming with Google Go Specialization on Coursera.

^^ In our opinion, Introducing Go provides the most bang for your buck in today's list of best Golang books. ^^

With step-by-step instructions and hands-on exercises, you'll learn the core features of Go. In these digestible chapters, you'll discover:

+ Golang basics like data types and variables
+ complex types like functions and interfaces
+ Go's core library
+ how to run programs concurrently

And beyond.

^^ Introducing Go is a short (100-ish pages) introduction to basic Golang concepts.

What Go developers are saying about Introducing Go:

Good, short introduction to the basics of the Go programming language. Concise and easy to read, it clarified key nuances quickly...

- Denise, Golang Developer

PICK UP INTRODUCING GO

4. Learning Go: An Idiomatic Approach to Real-World Go Programming

[2198]^ Ideal for: programming newbies
[2198]^ Topics covered: design patterns, Go features

Learning Go is a practical guide containing proven design patterns used by experienced Go developers.

^^ Dig into more Golang videos with the course Code School: On Track with Golang on Pluralsight.

You'll discover:

+ setting up your Go developer environment
+ how and when to use reflection, unsafe, and cgo
+ which Go features to use and when

After learning how to write idiomatic code, you'll design a project in Go. 

^^ Learning Go teaches you Golang fundamentals while explaining the theory behind them.

GRAB YOUR COPY OF LEARNING GO

5. Hands-On Go Programming

[2198]^ Ideal for: new and experienced Go developers with basic programming experience
[2198]^ Topics covered: Go fundamentals and advanced concepts

As the title suggests, Hands-On Go Programming is a hands-on guide to learning beginner and advanced concepts in Golang.

^^ Hands-On Go Programming is perhaps one of the best Golang books for both beginner and advanced concepts in Go.

You'll start with the basics such as:

+ data types
+ constants
+ variables
+ operators

Then you'll move onto more advanced concepts like:

+ interfaces
+ pointers
+ concurrency
+ error handling

And more.

^^ By the end of Hands-On Go Programming, you should be able to build your own programs using Golang.

PICK UP HANDS-ON GO PROGRAMMING

6. Black Hat Go: Go Programming For Hackers and Pentesters

[2198]^ Ideal for: Hackers and Pentesters
[2198]^ Topics covered: the darker side of Go

Black Hat Go explores the dark side of Golang development.

^^ Black Hat Go is arguably one of the best Golang books on the always magnificent No Starch Press.

Geared towards hackers and pentesters, you'll find scripts that will enable you to:

+ test your systems
+ build and automate tools
+ improve your offensive security skillset

And beyond.

After gaining a basic overview of Go's syntax, you'll explore common problems that pentesters encounter like packet sniffing and exploit development.

^^ With Black Hat Go, you'll learn how to build tools in Go that you can use for your security projects.

What Golang developers are saying about Black Hat Go:

The practices in the book are great. You learn Go by doing, and are encouraged to experiment...

- Timothy J. Bolton, Golang Developer

GRAB YOUR COPY OF BLACK HAT GO

7. Go For Beginners: A Genius Guide to Go Programing

[2198]^ Ideal for: Golang newbies, new and experienced developers
[2198]^ Topics covered: foundations of Golang

Go for Beginners is for both new and experienced developers who want to take their skills to the next level with this modern programming language. 

After learning the pros and cons of Go, you'll get into the fundamentals:

+ functions
+ data types
+ constants
+ variables

Then you'll learn about methods, interfaces and beyond.

By the end of Go for Beginners, you'll have the foundation necessary to start coding in Go.

^^ Go for Beginners is one of the best Golang books for absolute beginners.

PICK UP GO FOR BEGINNERS

8. Get Programming with Go

[2198]^ Ideal for: Go newbies with some programming experience
[2198]^ Topics covered: Go concepts, projects

Get Programming with Go is a hands-on guide to learning Golang.

With 32 rapid-fire lessons, you'll work on 7 capstone projects that cover:

+ types
+ collections
+ state and behavior
+ concurrency

And more.

^^ Get Programming with Go uses hands-on lessons to teach you just the basics of Golang programming.

GRAB YOUR COPY OF GET PROGRAMMING WITH GO

9. Go Programming in Easy Steps

[2198]^ Ideal for: programming newbies
[2198]^ Topics covered: Golang fundamentals

^^ THIS BOOK IS EXTREMELY NEWBIE-FRIENDLY.

Go Programming in Easy Steps is geared towards newbies with no prior programming experience.

^^ We believe Go Programming in Easy Steps is one of the best Golang books for programming newbies.

In this easy-to-follow guide, you'll learn how to create your own computer programs by learning about:

+ data structures
+ control flow
+ creating reusable blocks of code

And beyond.

^^ With color-coded step-by-step examples and screenshots, you'll be creating your own computer programs using Golang in no time.

PICK UP GO PROGRAMMING IN EASY STEPS

Best Intermediate Golang Books

10. Mastering Go

[2198]^ Ideal for: experienced Golang programmers
[2198]^ Topics covered: concurrency, data structures

Mastering Go teaches you how to take your Golang skills to the next level.

^^ We think Mastering Go is one of the best Golang books for experienced Golang developers.

In addition to learning how to use Go in production, you'll:

+ write high-performant concurrent code
+ manipulate data structures
+ develop reusable packages
+ become familiar with generics

And much, much more.

^^ Mastering Go is for Golang developers striving for expertise in the latest and greatest in Go development.

Programming languages that influenced Go in the book Mastering Go

PICK UP MASTERING GO

11. Hands-On Software Engineering with Golang

[2198]^ Ideal for: developers with experience in Go and networking principles
[2198]^ Topics covered: software development lifecycle, build a project from scratch

Hands-On Software Engineering with Golang is a hands-on guide to understanding the software development lifecycle and the role of a software engineer.

You'll also:

+ create APIs using gRPC
+ manage package dependencies
+ develop a graph processing system
+ deploy Go services on Kubernetes

And more.

^^ With Hands-On Software Engineering with Golang, you'll build an end-to-end project from scratch and learn how to scale it.

GRAB YOUR COPY OF HANDS-ON SOFTWARE ENGINEERING WITH GOLANG

12. Go in Action

[2198]^ Ideal for: developers proficient in another language such as Java, Ruby, Python, C#, or C++
[2198]^ Topics covered: Go's type system, data structures, testing and benchmarking

Go in Action is an accelerated introduction to Go. You'll start with the fundamentals of Golang and quickly build on more advanced concepts.

While writing real-world applications like websites and network servers, you'll learn about:

+ language specification and implementation
+ testing and benchmarking
+ data structures
+ Go's type system

And more.

^^ With Go in Action, you'll gain plenty of hands-on experience while speedily leveling up your Golang skills.

BONUS: That Manning book cover though!

PICK UP GO IN ACTION

Best Specialized Golang Books

13. Network Programming with Go

[2198]^ Ideal for: experienced Go developers
[2198]^ Topics covered: network programming

CALLING ALL I.T. DEPARTMENTS! Network Programming with Go is another banger by "the finest in geek entertainment," No Starch Press.

In this book, you'll learn how to write network software with Golang that's:

+ clean
+ secure
+ readable
+ production-ready

First you'll learn about networking and traffic routing. Then you'll write programs that use TCP, UDP, and Unix sockets to communicate. Finally, you'll build applications that interact with servers using network protocols like HTTP.

^^ Network Programming shows you how to utilize Go's concurrency, library and rapid compiling.

GRAB YOUR COPY OF NETWORK PROGRAMMING WITH GO

14. Distributed Services with Go

[2198]^ Ideal for: experienced Golang developers
[2198]^ Topics covered: distributed services

Distributed Services with Go is another quality release by one of our favorite publishers The Pragmatic Programmers.

It was written to help "Gophers" learn how to build distributed systems. You'll build upon your beginner-level experience with Go while learning about:

+ storage handling
+ networking a client and server
+ distributing server instances
+ deployment
+ testing

And more.

^^ In addition to creating your own distributed services, you'll learn how to contribute to open source projects with Distributed Services with Go.

What Golang developers are saying about Distributed Services with Go:

... The source code is presented 100% complete and without error...

- Golang Developer

PICK UP DISTRIBUTED SERVICES WITH GO

15. Concurrency in Go

[2198]^ Ideal for: experienced Go developers
[2198]^ Topics covered: concurrency

Concurrency is a difficult topic but luckily, we have Concurrency in Go. Using step-by-step processes, you'll incorporate concurrency into your systems using patterns and best practices.

You'll also learn:

+ the differences between concurrency and parallelism
+ how to use Go to correctly implement concurrency
+ how Go's runtime holds everything together

And beyond.

^^ Concurrency in Go focuses exclusively on the challenges and solutions of concurrency using Golang.

GRAB YOUR COPY OF CONCURRENCY IN GO

16. Build Systems With Go: Everything a Gopher Must Know

[2198]^ Ideal for: experienced Go developers
[2198]^ Topics covered: Go fundamentals, building systems

Build Systems with Go takes your existing Golang skills and accelerates them.

You'll build upon:

+ concurrency
+ HTTP
+ modules and documentation
+ structs, methods and interfaces
+ templates

And much, much more.

Then you'll learn how to build systems by discovering:

+ protocol buffers
+ relational databases
+ Kafka
+ logging with Zerolog

And beyond.

^^ Build Systems with Go has over 200 runnable examples where you'll learn how to build systems using Golang.

GRAB YOUR COPY OF BUILD SYSTEMS WITH GO

Best Golang Books: Conclusion

Today we looked at the best Golang books including:

^^ Best Overall ^^
The Go Programming Language

^^ Best for Newbies ^^
Head First Go

^^ Best Value ^^
Introducing Go: Build Reliable, Scalable Programs

So whether you need top of the line resources or are on a strict budget, we think these are the best Golang books for just about any developer.

Readers of Best Golang Books are also reading:

+ Absolute Best Golang Courses
+ Best Way to Learn Algorithms [Learning Algorithms ASAP]
+ Stephen Grider Course on Zero to Mastery Review [Typescript: The Complete Developer's Guide]
+ LeetCode Alternatives You Need [Courses, Platforms, Books]
+ Best Ubuntu Books [Plus Linux Bonus Books]

+ What are the best Golang books?

Overall, we think the best Golang book is The Go Programming Language by Alan A. A. Donovan and Brian W. Kernighan. For beginners, we liked Head First Go: A Brain-Friendly Guide by Jay McGavren. And for value, we chose Introducing Go: Build Reliable, Scalable Programs by Caleb Doxsey. Learn about these and other Golang books in today's post.

+ What are the best Golang courses?

Some of the best Golang courses we could find includes An Introduction to Programming in Go on Educative.io. We also liked Go Language Overview on Treehouse. Coursera has the Specialization called Programming with Google Go. And Pluralsight has the video-based course Code School: On Track with Golang. Check out today's article where we look at the best Golang books sprinkled with some Golang courses.

+ What is Golang?

Golang is a compiled, open source programming language created by Google. It makes building software more efficient, reliable and simple. Its syntax is similar to the C programming language. Some companies that use Golang include Uber, Twitch, Dailymotion, Dropbox and SoundCloud. Learn more about Golang in today's article.

+ Is Golang hard to learn?

Go is generally considered an easier language to learn for beginners. It was specifically designed that way by Google developers. If you want to learn Golang, books and courses are two great ways to get started. In today's post we're looking at tons of resources to learn Golang.

+ Is Golang the same as Go?

Yes, Golang is the same as Go. While Go is technically the right name, Golang is also used because of its domain name which is golang.org. Also Golang can be useful to quickly clarify exactly what "Go" you're referring to. If you want to learn more about Go, or Golang, read today's post which contains plenty of books and courses.


=======asdf18======== Q\Go K8s\$\10291756cce033853218541c9fd8bcd2.txt
https://www.freecodecamp.org/news/what-is-go-programming-language/
TITLE: What is Go? Golang Programming Language Meaning Explained

What is Go? Golang Programming Language Meaning Explained

Kolade Chris 

Go, also known as Golang, is an open-source, compiled, and statically typed programming language designed by Google. It is built to be simple, high-performing, readable, and efficient.

In this article, you'll learn:

+ Where Go came from and where it is now, 
+ Why I think you should learn it, 
+ How to install and run it on Windows 10, and 
+ How to write your first "Hello World" program in Go 

+ What's the Name? Go or Golang? 
+ How Go Came into Existence 
+ Why you Should Learn Go 
+ How to Install and Run Go on Windows 10 
+ How to Write your First Hello World in Go 
+ Conclusion 

What's the Name? Go or Golang?

You might hear the language called both Go and Golang, which might be confusing. I once thought they were names for different languages. But Golang is just another name for Go - and Go remains the official name.

Golang came from the domain name of the Go official website, golang.org. Which is actually really helpful, because "Golang" is much more searchable than "Go" on Google. So it makes life a little easier for those who might be looking for information on the programming language.

How Go Came into Existence

The Go programming language was borne because things were getting much more complex in the codebases within Google.

It was designed by Robert Griesemer, Rob Pike, and Ken Thompson, who all reportedly have a shared dislike for C++.

Go was announced to the public in 2009, and it was made open source in 2012 when its first version, 1.0, was released.

Go quickly rose in popularity and became many developers' first choice due to its simplicity, readability, efficiency, and concurrent nature. Concurrent means that it can run multiple tasks at the same time.

Go is used for server-side (backend) programming, game development, cloud-based programming, and even Data Science. It is also popular for making command-line tools.

Today, many tech giants use Go like Google, Netflix, Twitch, Ethereum, Dropbox, Kubernetes, Docker, Heroku, and lots more.

There's no surprise that the likes of Kubernetes, Docker, and Heroku are using Go because cloud-based programming is one of the main reasons why Go was designed.

Why you Should Learn Go

Easy Learning Curve

Go is one of the simplest programming languages out there. It is easy to pick up especially if you already have knowledge of any other programming language. In my case, I learned the fundamentals of Go in one sitting.

A lot of developers who use Go and are confident in their teaching abilities say that they can get an absolute beginner to build an app with Go in just a few hours.

The simplicity of Go is one of the main reasons it jumped 5 places from the 10th to 5th most loved programming language according to the 2020 StackOverflow Developer Survey.

Active Community and Good Documentation

Go has solid and easy-to-read documentation. You can read the documentation on the official website.

Apart from documentation, Go also has a supportive and active community behind it, so you can always get help when you are stuck.

The hashtag #golang is commonly used on Twitter, so in case you get stuck, you can tweet your question and attached the hashtag to it.

You Can Get a lot Done with Go

Go is a multipurpose programming language, meaning you can use it for a number of things such as web development, data science, cloud computing, and more.

If you want to have a career in cloud-based programming, you should consider learning Go, because platforms such as Amazon Web Services, Kubernetes, and Google Cloud Platform (GCP) all support Go.

Attractive Wages

According to the 2020 StackOverflow Developer Survey, Go developers are the third-highest paid after Perl and Scala with a median salary of $74K.

This figure will probably continue to climb, because Go continues to gain more popularity every year and it is in demand. So, if you want to earn more money, you should consider learning Go.

How to Install and Run Go on Windows 10

To install Go on your Windows machine, you first have to download Go from the official website. It is available for all popular operating systems. Click on the one that correlates to your OS and install it.

Step 1: Before installing Go, open up your command prompt, type "go" and hit enter. You can open the command prompt by entering "cmd" in the Windows Search bar, and then selecting the first app that shows up.

When you enter "go" and hit enter, you should get a message that says "'go' is not recognized as an internal or external command, operable program or batch file".

Don't worry, this is because you have to install Go by double-clicking on the Installer downloaded from the Go website.

Step 2: Double-click on the downloaded installer to install Go. Follow the prompts accordingly and Go will be installed.

Step 3: After installing Go through the installer, head back to the command line and enter "go" again. This time around, you should see several commands available in Go.

Step 4: But you can't just start programming in Go like that. You have to set up your Go workspace by configuring environment variables.

So, head over to your desktop and create the folder "go-workspace". You can name it whatever you want. This is the folder where your Go projects will be stored. Only when you set the value of the GOPATH variable to it. We do this in the next steps.

Step 5: Search for "env" on the windows Searchbar and click on "Edit the system environment variables".

Step 6: Click on "Environment Variables".

What you are going to do here is change the value of the GOPATH variable to the folder you created in Step 4.

Step 7: Make sure "GOPATH" is selected, then click "Edit...".

Step 8: Click on "Browser Directory".

Step 9: Select the folder you created in Step 4. That is, "go-workspace", or whatever you named it.

Click "Ok".

Click "Ok" again.

And "Ok" again.

That's it! You can now start programming in Go on your Windows machine.

How to Write your First Hello World in Go

Step 1: Open up the "go-workspace" folder (or whatever you named it) with VS Code (or your code editor of choice) and create a file named main.go. You can name the file whatever you want.

Step 2: When you hit enter, you will be prompted to install the Go extension for VS Code. Make sure you install it as it will give your code editor some Golang superpowers such as syntax highlighting and snippet suggestions.

You should also be prompted by VS Code to install some more extensions. Install them all. In my case, I installed everything for my VS Code already and all my extensions are in sync, so I didn't get those prompts.

Paste in the following code in the main.go file (or whatever you named the file):

func main() {
fmt.Println("Hello World")
}

What's the code above doing?

The first line has package main. "package" is a collection of files and code every Go file has. Think of package as a containing folder for your Go files and codes.

No matter what you named your file, make sure the "package main" is available on top of your code.

After that fmt gets brought in. "fmt" is a package from the Go standard library. It is used for formatting strings and printing messages to the command line. It contains methods for doing things in Go.

One of the methods is Println, meaning "print line", which we will use to print our "Hello World" text.

Inside the function "main", the fmt package was then used to output our "Hello World" text to the console.

To run this code, open up your terminal, type go run main.go, and hit enter. If you named your file something else, make it go run yourFileName.go.

In this article, you learned about the Go programming language and why it is a good one to know. You also learned how to install Go on a Windows machine and write your first Hello World program in it.

Go is a powerful programming language that is here to stay. It's clear from the 2020 StackOverflow Developer Survey that developers love Go, and its popularity is rising year by year.

Go is definitely worth your time. Now, go learn some Go.

Kolade Chris 

Web developer and technical writer focusing on frontend technologies.

If you read this far, tweet to the author to show them you care. Tweet a thanks 

Learn to code for free. freeCodeCamp's open source curriculum has helped more than 40,000 people get jobs as developers. Get started 

freeCodeCamp is a donor-supported tax-exempt 501(c)(3) nonprofit organization (United States Federal Tax Identification Number: 82-0779546)

Our mission: to help people learn to code for free. We accomplish this by creating thousands of videos, articles, and interactive coding lessons - all freely available to the public. We also have thousands of freeCodeCamp study groups around the world.

Donations to freeCodeCamp go toward our education initiatives, and help pay for servers, services, and staff.

You can make a tax-deductible donation here. 

Trending Guides

Discord Won't Open Learn Java Courses SQL Like Statement File Explorer Error Python Find in List Functions in Python Python Reverse List Create a Table in SQL List Index Out of Range Python String.Replace() 

C vs C++ Python JSON What is a PC? What is Coding? Text Box in HTML Meta Tag in HTML Append in Python Python Not Equal Linux awk Command JS String Contains 


=======asdf19======== Q\Go K8s\$\8f7d53d05bd272e676a34a941c4bcd88.txt
https://devopscube.com/kubernetes-tutorials-beginners/
TITLE: Kubernetes Tutorials For Beginners: 35 Comprehensive Guides

In this blog, I have covered a list of kubernetes tutorials that can help beginners to learn Kubernetes with practical guides. This Kubernetes tutorial for beginners series is focused on kubernetes basics objects and associated tooling around them.

As the definition says, Kubernetes or k8s is an open-source orchestration and cluster management for container-based applications maintained by the Cloud Native Computing Foundation.

The official kubernetes (k8s) website says,

Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.

In simple words, kubernetes make it easy to manage containers on multiple hosts. Also, it makes the container deployment so easy using a declarative YAML file. You specify how you want the container to be deployed, and Kubernetes takes care of it by reading the information provided in the YAML.

Prerequisites to Learn Kubernetes

Before you get started with Kubernetes, it is essential to understand the following concepts 

+ API: All kubernetes components talk to each other via APIs. It's essential to know what is an API before getting started with Kubernetes. 
+ YAML: You need to know the basics of YAML and how to edit YAML files. Every kubernetes resource is deployed using YAML files.
+ Networking: If you want to understand Kubernetes networking the right way, you should have knowledge of computing networking concepts like OSI Layer, CIDR, overlay networking, IPtables, DNS, etc.
+ Containers: If don't have a basic understanding of containers, I would suggest learning containers basics and then starting with Kubernetes. You can check out my article on "what is docker" to understand the whole concept of containers.

34 Kubernetes Tutorials For Beginners

I have categorized a list of kubernetes beginners tutorials that you can use to get started with kubernetes. This is a growing list of practical kubernetes guides.

Note: Kubernetes is an open source tool with constant updates to features. There is change where a guide might have a older version of APIs or workflows used. I try to keep all the guides updated. If at all, if you face any issue, please drop a comment so that I can be aware of the update and make the changes accordingly.

I have categorized the Kubernetes tutorials into multiple segments. So let's take a look.

^^ Kubernetes Architecture & Setup Guides

This section provides a beginner tutorial on Kubernetes architecture, design, cluster setup guides for development, cluster setup guides on cloud platforms, and Kubernetes cluster automation.

+ Kubernetes Minikube Tutorial
+ Setup Kubernetes Cluster Using Kubeadm
+ Kubeconfig file explained
+ Setup Kubeadm cluster on Vagrant
+ GKE Cluster setup on Google Cloud - Detailed Guide
+ Kubernetes design considerations

^^ Kubernetes Native Resource Tutorials

This section covers tutorials on kubernetes native resources like deployments, pods, Statefulset, RBAC, jobs, ingress, and much more.

+ Kubernetes Deployment Tutorial For Beginners
+ How to create Kubernetes Role for Service account
+ How To Create Kubernetes Service Account for API access
+ Kubernetes Ingress Tutorial For Beginners
+ How To Set Up Ingress On Kubernetes Using Nginx Controller
+ How to configure SSL/TLS for Kubernetes Ingress
+ How To Create Kubernetes Jobs/Cron Jobs
+ Kubernetes Pod PriorityClass & Preemption Explained

^^ Kubernetes Productivity Guides

+ Easy Ways to Create Kubernetes YAML's
+ Best Kubernetes Dashboard App - Kubernetes Lens [Video Tutorial]

^^ Kubernetes Monitoring Tutorials

This section focuses on Kubernetes monitoring and logging using tools like Prometheus, Grafana, alert manager, etc. We will also cover guides on logging and monitoring related to specific cloud providers.

+ How To Setup Prometheus Monitoring On Kubernetes Cluster
+ Setup Prometheus Node Exporter on Kubernetes
+ Setup Kube State Metrics on Kubernetes
+ Setting Up Alert Manager On Kubernetes
+ Setting up grafana on Kubernetes

^^ Kubernetes Logging Guides

This section covers the list of end-to-end beginner tutorials on Kubernetes logging.

+ Kubernetes Logging Explained for beginners: This tutorial explains the underlying Kubernetes logging concepts and patterns in detail.
+ EFK setup on Kubernetes: A step-by-step guide explaining the EFK logging stack on Kubernetes.

^^ Kubernetes Troubleshooting Tutorials

In this section we will learn to troubleshoot kubernetes objects (Pods, Deployments, Statefulset, cluster components etc).

+ How to Troubleshoot Kubernetes Pods

^^ Kubernetes Database Tutorials

This section aims to cover tutorials on setting Statefulsets for databases like PostgreSQL, MongoDB, etc. We will also cover kubernetes database operators which provide extra functionalities to manage databases on Kubernetes.

+ Learn to deploy PostgreSQL statefulset cluster

^^ Kubernetes Package Management Tutorials

Under Kubernetes package management, you will learn about tools like helm and Kustomize.

+ How To Install And Configure Helm for Kubernetes Deployment

^^ Kubernetes CI/CD Tutorials

Under Kubernetes CI/CD, you will learn to use commonly used CI/CD tools like Jenkins and advanced GitOps Operators like ArgoCD, FluxCD, etc.

+ Setup Jenkins On Kubernetes Cluster 
+ Setup Jenkins Build Agents on Kubernetes Pods
+ Building Docker Images In Kubernetes Pod using Kaniko
+ Setup Latest Nexus OSS On Kubernetes

^^ Kubernetes Secret Management Tutorials

In this section, you will learn to manage secrets in Kubernetes using recommended opensource secrets management tools. Also, we will look at the cloud-specific secret management solutions that can be integrated with Kubernetes.

+ Setup Hashicorp Vault in Kubernetes
+ Injecting Secrets to Pods Using Vault Agent

^^ Kubernetes Certification Guides (CKA/CKAD/CKS)

If you are looking to get certified in Kubernetes, the following certification guides will help.

+ CKA Certification guide
+ CKAD Certification guide
+ CKS Certification guide

Also, check out the kubernetes certification coupons page to get the latest exam voucher codes to save money on Exam registration.

^^ Other Kubernetes Online Courses

Following is the list of other online resources you can use to learn kubernetes from scratch.

+ Udemy Kubernetes courses [ Check this Udemy coupon page to save up 95% ]
+ Kubernetes Tutorials From LinkedIn Learning [Check Free LinkedIn Learning Account]
+ Getting Started with Kubernetes [Check Pluralsight Free Access]

Why do we Need Kubernetes?

Before we get into a detailed list of beginners tutorials, I would like to give you two examples of why we need Kubernetes.

The first question when it comes to Kubernetes or a container orchestrator is why we need it. Let's understand it from two examples.

Example 1: Container Deployments

Let's say you have a couple of java applications. You can package it into a container and run it on a server containing docker. For this scenario, there is no complexity.

You package your application into a Docker image using Dockerfile and expose a port on a host for the external world to access it.

The only downside is that it is a single point of failure as it is a single server. So you need an efficient mechanism to handle a single point of failure.

This is why you need a container clustering & orchestration tool like Kubernetes to scale applications on-demand and to withstand single node failures.

Example 2: Microservices Deployment/Orchestration

Now, let's say, you have a big application that is composed of microservices (APIs, UI, user management, credit card transaction system, etc). All these microservice components have to talk to each other using REST or other protocols.

As the application has many components or microservices, we cannot pack all the services into one server or a container. The application has to be decoupled and each microservice should be deployed and scaled on its own. This makes application development and deployment easier and faster.

The complexity lies in networking, shared file systems, load balancing, and service discovery in this scenario. Here is where kubernetes comes in to picture. It helps in orchestrating complex processes in a manageable way.

Using kubernetes, you just have to worry about your application development and deployments. All heavy lifting like networking, service to service communication across nodes, load balancing, resource scheduling, scalability, and high availability are taken care of by Kubernetes.

Kubernetes Latest Updates

Following are some of the latest updates from Kubernetes.

+ Kubernetes 1.24: Stargazer has released. This release has 46 enhancements. Out of which, 13 are graduating to Stable, 14 existing features got improvements, 13 new featured added, and six are deprecated.
+ Dockershim deprecated with release of Kubernetes 1.24
+ Kubernetes Volume Expansion Now A Stable Feature

Kuberbetes FAQs

Is Kubernetes easy to learn?

Kubernetes is a complex distributed system and a DevOps tool that is driven by APIs. If you know the basics of APIs, YAML, and Networking, you can learn Kubernetes easily.

How do I start studying for Kubernetes?

To start studying for Kubernetes, you need to first learn more about the platform itself. There are many online platforms that can help you get started with your studies. Some of them include the following:

1. The official Kubernetes Documentation & Tasks - This is the best source for learning about all of the different components and features that make up Kubernetes. You can check out this website to see what each component does and how you can use it.

2. Online Kubernetes forums - There are many online forums where people discuss Kubernetes. For example, LinkedIn Groups, Stackoverflow and reddit. This is a great place to ask questions and get help from other users. You can also find many useful tips and tricks here.

3. YouTube Kubecon Videos - Many excellent Kubecon videos can help you learn about Kubernetes in depth. You can learn about the different features of Kubernetes and how to use them.

4. Books - There are many good books that can help you learn about Kubernetes. Some of these books include "Kubernetes: Up and Running" and "Kubernetes Cookbook".

5. Katacoda Scenarios: Use Katacoda free tutorials to learn real time kubernetes scenarios with browser based terminals. 

Is Kubernetes going away from Docker?

Yes. With the release of Kubernetes 1.24, Dockershim is no-longer supported by Kubernetes.

I will keep adding all the Kubernetes beginners tutorials to this list.

I aim to complete all Kubernetes concepts with real-world examples and project guides.

Subscribe to our mailing list to keep updated on our latest Kubernetes tutorials.

12 Shares:

Share 12 

Tweet 0 

Share 0 

Share 0 

Bibin Wilson 

An author, blogger, and DevOps practitioner. In his spare time, he loves to try out the latest open source technologies. He works as an Associate Technical Architect. Also, the opinions expressed here are solely his own and do not express the views or opinions of his previous or current employer.

3 comments 

Pratik Mehta says: 

February 3, 2022 at 9:07 pm 

Thank you so much Bibin. Super great help! ^^

Reply

Bibin Wilson says: 

February 21, 2022 at 4:30 pm 

Glad it helps @pratik ^^

Reply

Umesh K says: 

April 21, 2020 at 8:06 am 

Awesome Blog!! Thanks

Reply

Leave a Reply Cancel reply

Your email address will not be published. Required fields are marked *

Comment * 

Name * 

Email * 

View Comments (3) 

You May Also Like 

Kubernetes Certification Coupon: 15% Off + $100 Off On Kubernetes Course bundle

+ bydevopscube
+ June 14, 2022

The cloud-native foundation has three Kubernetes certifications. It is one of the most preferred certifications for organizations due to... 

How to Add Persistent Volume in Google Kubernetes Engine

+ byBibin Wilson
+ June 17, 2021

In this blog, you will learn how to setup Persistent Volume For the GKE Kubernetes cluster. If you... 

How to Setup Kubernetes Cluster on Vagrant VMs

+ byBibin Wilson
+ January 21, 2021

In this Kubernetes tutorial, I have covered the step-by-step guide to setup Kubernetes cluster on Vagrant. It is... 


=======asdf20======== Q\Go K8s\$\dc6de12fb32407f7d34b3c2f3e7992ed.txt
https://searx.run/search?q=Kubernetes
TITLE: Kubernetes - searx.run

Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Google originally designed Kubernetes, but the Cloud Native Computing Foundation now maintains the project. Kubernetes works with Docker, Containerd, and CRI-O. Originally, it interfaced exclusively with the Docker runtime through a "Dockershim"; however, from 2016 up to April 2022, Kubernetes has deprecated the shim in favor of directly interfacing with the container through Containerd, or replacing Docker with a runtime that is compliant with the Container Runtime Interface. With the release of v1.24 in May 2022, "Dockershim" has been removed entirely. Amazon, Google, IBM, Microsoft, Oracle, Red Hat, SUSE, Platform9 and VMware offer Kubernetes-based platforms or infrastructure as a service that deploy Kubernetes.

{Original author(s)}{Google}

{Developer(s)}{Cloud Native Computing Foundation}

{Initial release}{June 07, 2014}

{Written in}{Go}

{Type}{Cluster management software}

{License}{Apache License 2.0}

{Developer}{Google}

{Publication date}{Saturday, June 7, 2014}

{Copyright license}{Apache License, Version 2.0}

{Programming language}{Go}

{Software version identifier}{1.24.1}

Official site

Wikipedia

GitHub profile

Twitter profile

Source code repository

Official blog

Wikidata

Suggestions

Docker (software) </form> Cloud Native Computing Foundation </form> Linux Foundation projects </form> Free software for cloud computing </form> Free software programmed in Go </form> Orchestration software </form> Open Service Mesh </form> OpenShift </form> Cloud infrastructure </form> Software using the Apache license </form> 

Links

Search URL

</form> Download results 

csv</form> json</form> rss</form> 

RSS subscription 

Search results

wikidatawikipediaddg definitionscachedproxied

https://en.wikipedia.org/wiki/Kubernetes

wikidataddg definitionscachedproxied

https://kubernetes.io/

Managed Kubernetes Service - Amazon EKS - Amazon Web ...

Manage your Kubernetes clusters and applications in hybrid environments and run Kubernetes in your data centers. Learn more about Amazon EKS Anywhere " Model machine learning (ML) workflows. Efficiently run distributed training jobs using the latest Amazon Elastic Compute Cloud (EC2) GPU-powered instances, including Inferentia, and deploy training and inferences using ...

https://www.bing.com/ck/a?!&&p=baddef9[...]cHM6Ly9hd3MuYW1hem9uLmNvbS9la3Mv&ntb=1

What is Kubernetes? | Kubernetes

Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available. This page is an overview of Kubernetes.

https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/

Katacoda

Hier sollte eine Beschreibung angezeigt werden, diese Seite lasst dies jedoch nicht zu.

https://www.bing.com/ck/a?!&&p=14771ce[...]EuY29tL2NvdXJzZXMva3ViZXJuZXRlcw&ntb=1

What is Kubernetes? | IBM

What does Kubernetes do? Kubernetes schedules and automates container-related tasks throughout the application lifecycle, including: Deployment: Deploy a specified number of containers to a specified host and keep them running in a desired state. Rollouts: A rollout is a change to a deployment.Kubernetes lets you initiate, pause, resume, or roll back rollouts.

https://www.ibm.com/cloud/learn/kubernetes

CSDN

Hier sollte eine Beschreibung angezeigt werden, diese Seite lasst dies jedoch nicht zu.

https://www.bing.com/ck/a?!&&p=c888550[...]dC9zby9zZWFyY2g_cT1LdWJlcm5ldGVz&ntb=1

Tutorials | Kubernetes

Basics Kubernetes Basics is an in-depth interactive tutorial that helps you understand the Kubernetes system and try out some basic Kubernetes features. This section of the Kubernetes documentation contains tutorials. A tutorial shows how to accomplish a goal that is larger than a single task. Typically a tutorial has several sections, each of ...

https://kubernetes.io/docs/tutorials/

Training | Kubernetes

Certified Kubernetes Application Developer (CKAD) The Certified Kubernetes Application Developer exam certifies that users can design, build, configure, and expose cloud native applications for Kubernetes. A CKAD can define application resources and use core primitives to build, monitor, and troubleshoot scalable applications and tools in ...

https://www.bing.com/ck/a?!&&p=4a7e08e[...]9rdWJlcm5ldGVzLmlvL3RyYWluaW5nLw&ntb=1

?Que es Kubernetes? | Kubernetes

Esta pagina ofrece una vision general sobre Kubernetes. Kubernetes es una plataforma portable y extensible de codigo abierto para administrar cargas de trabajo y servicios. Kubernetes facilita la automatizacion y la configuracion declarativa. Tiene un ecosistema grande y en rapido crecimiento. El soporte, las herramientas y los servicios para Kubernetes estan ampliamente disponibles.

https://kubernetes.io/es/docs/concepts/overview/what-is-kubernetes/

K3s: Lightweight Kubernetes

K3s is a highly available, certified Kubernetes distribution designed for production workloads in unattended, resource-constrained, remote locations or inside IoT appliances. Simplified & Secure K3s is packaged as a single <50MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster.

https://www.bing.com/ck/a?!&&p=e3c1ba8[...]34d147a&u=a1aHR0cHM6Ly9rM3MuaW8v&ntb=1

What Is Kubernetes and What Is It Used For? - MUO

Initially developed by engineers at Google, Kubernetes became an open-source project in 2014. Today, it is an essential container management solution used by millions of developers worldwide. Kubernetes is an extensible and portable platform that manages containerized services and workloads for automation and declarative configuration in technical terms.

https://www.makeuseof.com/what-is-kubernetes/

Kubeflow

Anywhere you are running Kubernetes, you should be able to run Kubeflow. Notebooks. Kubeflow includes services to create and manage interactive Jupyter notebooks. You can customize your notebook deployment and your compute resources to suit your data science needs. Experiment with your workflows locally, then deploy them to a cloud when you're ready. ...

https://www.bing.com/ck/a?!&&p=4f5291f[...]R0cHM6Ly93d3cua3ViZWZsb3cub3JnLw&ntb=1

14 Kubernetes Tutorials for Beginner to Master - Geekflare

Precisely, Kubernetes is a container orchestration tool that is used to deploy and scale the containerized application. Moreover, it schedules and manages the multiple containers deployed across multiple host machines. Hey just remember! Docker creates a container whereas Kubernetes manages it.

https://geekflare.com/learn-kubernetes/

GitHub - kubernetes/minikube: Run Kubernetes locally

minikube. minikube implements a local Kubernetes cluster on macOS, Linux, and Windows. minikube's primary goals are to be the best tool for local Kubernetes application development and to support all Kubernetes features that fit.. Features. minikube runs the latest stable release of Kubernetes, with support for standard Kubernetes features like:

https://www.bing.com/ck/a?!&&p=f63de67[...]uY29tL2t1YmVybmV0ZXMvbWluaWt1YmU&ntb=1

Kubernetes Tutorial - Simplilearn.com

Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services-with a framework to run distributed systems resiliently. Kubernetes is also responsible for scaling requirements, failover, deployment patterns, scaling, load balancing, logging, and monitoring, much like PaaS offerings, and operates ...

https://www.simplilearn.com/tutorials/kubernetes-tutorial

labs.play-with-k8s.com

Hier sollte eine Beschreibung angezeigt werden, diese Seite lasst dies jedoch nicht zu.

https://www.bing.com/ck/a?!&&p=924349a[...]9sYWJzLnBsYXktd2l0aC1rOHMuY29tLw&ntb=1

Kubernetes - Statistics & Facts | Statista

Feb 7, 2022. Kubernetes, also known as K8s, is an open-source orchestration platform used to manage container technology across cloud environments. Initially released in 2014, the platform evolved ...

https://www.statista.com/topics/8409/kubernetes/

Play with Kubernetes Classroom

The Play with Kubernetes classroom is a new site provided by Docker that helps you get hands-on experience using Kubernetes. We provide a workshop that will allow you, in the browser, to follow a Kubernetes tutorial without having to install a single thing. Kubernetes Hands-on Workshop. We plan on offering more labs as time goes on.

https://www.bing.com/ck/a?!&&p=ca6979d[...]bGF5LXdpdGgta3ViZXJuZXRlcy5jb20v&ntb=1

The State of Kubernetes Security in 2022

Kubernetes is the de facto standard when it comes to container orchestration and management at scale, but adoption is only one piece of Kubernetes strategy. Security plays a huge role in how organizations use cloud-native technologies, and is typically much trickier to address than simply spinning up and running containers.

https://www.redhat.com/en/blog/state-kubernetes-security-2022-1

Introduction to Microservices, Docker, and Kubernetes - YouTube

Learn the basics of Microservices, Docker, and Kubernetes. Code demo starts at 18:45. I mess up the terminal for the first few minutes, but I fix it by 21:50...

https://www.bing.com/ck/a?!&&p=cbb7172[...]5jb20vd2F0Y2g_dj0xeG8tMGdDVmhUVQ&ntb=1

Do You Really Need Kubernetes (K8s)? - howtogeek.com

What Kubernetes Is Great At. Kubernetes (K8s) is used with Docker very often in professional environments, and this can make it seem like it's an upgraded or more organized version of Docker. While this is true in some regards, it's not the exact purpose of K8s. Kubernetes is a "container orchestration system," and it's important to ...

https://www.howtogeek.com/devops/do-you-really-need-kubernetes-k8s/

How to Delete a Kubernetes Namespace - phoenixNAP

The finalizer is a Kubernetes resource whose purpose is to prohibit the force removal of an object. The steps below demonstrate the procedure for removing the finalizer from the namespace configuration. 1. Display the namespace configuration in YAML format: kubectl get namespace [your-namespace] -o yaml. 2. Check if a finalizer exists in the ...

https://phoenixnap.com/kb/kubernetes-delete-namespace

Kubernetes Cheat Sheet| Mirantis

This Kubernetes cheat sheet is designed to help solve that problem. Kubernetes provides a way to orchestrate containers to provide a robust, cloud native environment. The architecture looks something like this: Kubernetes Terms Terms with which you should be familiar: Cluster - Group of physical or virtual servers wherein Kubernetes is installed

https://www.mirantis.com/blog/kubernetes-cheat-sheet/

Kubernetes with kind | Baeldung

Now, we're all set to use kind to prepare the local development environment for Kubernetes. 3.1. Create Cluster. First, let's create a local Kubernetes cluster with the default configuration: $ kind create cluster. By default, a cluster named kind will be created. However, we can provide a name to the cluster using the -name parameter:

https://www.baeldung.com/ops/kubernetes-kind

Microsoft Defender for Kubernetes - the benefits and features

Defender for Cloud provides real-time threat protection for your Azure Kubernetes Service (AKS) containerized environments and generates alerts for suspicious activities. You can use this information to quickly remediate security issues and improve the security of your containers. Threat protection at the cluster level is provided by the ...

https://docs.microsoft.com/en-us/azure[...]d/defender-for-kubernetes-introduction

Understanding Kubernetes Architecture and Its Use Cases

Kubernetes is often chosen for the following reasons: Kubernetes has a better infrastructure than many of the DevOps tools. Kubernetes breaks down containers into smaller modules to enable more granular management. Kubernetes deploys software updates often and seamlessly. Kubernetes lays the foundation for cloud-native apps.

https://www.simplilearn.com/tutorials/[...]netes-tutorial/kubernetes-architecture

Kubernetes Tutorial - An Introduction to Kubernetes (NEW)

Kubernetes, or commonly known as k8s, is an open-source, portable and extensible platform, for managing containerized workload and services. This container orchestration system is put to automating the deployment, scaling, as well as management of the application. As one of the top DevOps tools, the primary aim of Kubernetes is to provide a ...

https://www.whizlabs.com/blog/introduction-to-kubernetes/

Kubernetes - Concept of Containers - GeeksforGeeks

Kubernetes status can also be monitored via add-ons like Metrics Server, cAdvisor, and Prometheus. And lastly, you can use the built-in logging frameworks or if you choose, you can bring your own. Secrets Management: Sensitive data is a first-class citizen in Kubernetes. Secrets mounted to data volumes or environment variables.

https://www.geeksforgeeks.org/kubernetes-concept-of-containers/

4 reasons to get Kubernetes-certified, and 4 reasons not to

4 reasons for getting a Kubernetes certification. 1. A Kubernetes certification can help you land a new role. As with any professional qualification, a Kubernetes certification is most often ...

https://www.infoworld.com/article/3629[...]es-certified-and-4-reasons-not-to.html

Introduction to Azure Kubernetes Service - Azure Kubernetes Service ...

Azure Kubernetes Service (AKS) simplifies deploying a managed Kubernetes cluster in Azure by offloading the operational overhead to Azure. As a hosted Kubernetes service, Azure handles critical tasks, like health monitoring and maintenance. Since Kubernetes masters are managed by Azure, you only manage and maintain the agent nodes.

https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes

Kubernetes Tutorials For Beginners: 35 Comprehensive Guides

^^ Kubernetes Logging Guides. This section covers the list of end-to-end beginner tutorials on Kubernetes logging. Kubernetes Logging Explained for beginners: This tutorial explains the underlying Kubernetes logging concepts and patterns in detail.; EFK setup on Kubernetes: A step-by-step guide explaining the EFK logging stack on Kubernetes. ^^ Kubernetes Troubleshooting Tutorials

https://devopscube.com/kubernetes-tutorials-beginners/

Kubernetes comes from a Greek word meaning 'captain,' 'helmsman,' or 'governor.' The term is now also used in the DevOps and on-premises software development world to refer to a powerful bundle of solutions that equips operations engineers to scale and service server (and box) setups effortlessly.. This Kubernetes interview questions article will help you prepare for any interview ...

https://www.simplilearn.com/tutorials/[...]utorial/kubernetes-interview-questions

Draft extension for Azure Kubernetes Service (AKS) (preview) - Azure ...

In this article. Draft is an open-source project that streamlines Kubernetes development by taking a non-containerized application and generating the Dockerfiles, Kubernetes manifests, Helm charts, Kustomize configurations, and other artifacts associated with a containerized application. Draft can also create a GitHub Action workflow file to quickly build and deploy applications onto any ...

https://docs.microsoft.com/en-us/azure/aks/draft

How to fix Kubernetes namespaces stuck in the terminating state

A finalizer is a special metadata key that tells Kubernetes to wait until a specific condition is met before it fully deletes a resource. So when you run a command like kubectl delete namespace abcd, Kubernetes checks for a finalizer in the metadata.finalizers field. If the resource defined in the finalizer cannot be deleted for any reason, then the namespace is not deleted either.

https://www.redhat.com/sysadmin/troubleshooting-terminating-namespaces

The past, present, and future of Kubernetes with Eric Brewer

Kubernetes will continue to expand to the edge, leverage coprocessors, and run effectively across public and private clouds. In our final episode of the series, we collected questions from the field where a few themes emerged, including Kubernetes at the edge, Kubernetes on coprocessors, and finding the right balance between public and private ...

https://cloud.google.com/blog/products[...]f-kubernetes-and-open-source-at-google

Kubernetes vs Docker - GeeksforGeeks

Kubernetes Docker. Kubernetes is an open-source platform used for maintaining and deploying a group of containers: Docker is a tool that is used to automate the deployment of applications in lightweight containers so that applications can work efficiently in different environments.

https://www.geeksforgeeks.org/kubernetes-vs-docker/

What is Kubernetes? Your next application platform - InfoWorld

Kubernetes is a popular open source platform for container orchestration - that is, for the management of applications built out of multiple, largely self-contained runtimes called containers ...

https://www.infoworld.com/article/3268[...]es-your-next-application-platform.html

Kubernetes Tutorial for Beginners: Basics, Features, Architecture

Features of Kubernetes. Here are the essential Kubernetes features: Automated Scheduling. Self-Healing Capabilities. Automated rollouts & rollback. Horizontal Scaling & Load Balancing. Offers environment consistency for development, testing, and production. Infrastructure is loosely coupled to each component can act as a separate unit.


=======asdf21======== Q\Go K8s\$\003f5fa99b98fb83a087a8a77062bb44.txt
https://www.ibm.com/cloud/learn/kubernetes
TITLE: What is Kubernetes? | IBM

Jump to ... What is Kubernetes? What are containers? Container orchestration with Kubernetes Kubernetes architecture Istio service mesh Knative and serverless computing Kubernetes GitHub commits and more evidence of surging popularity Kubernetes tutorials Kubernetes and IBM Cloud 

Kubernetes 

Kubernetes is an open source container orchestration platform that automates deployment, management and scaling of applications. Learn how Kubernetes enables cost-effective cloud-native development. 

Kubernetes - also known as "k8s" or "kube" - is a container orchestration platform for scheduling and automating the deployment, management, and scaling of containerized applications.

Kubernetes was first developed by engineers at Google before being open sourced in 2014. It is a descendant of Borg, a container orchestration platform used internally at Google. Kubernetes is Greek for helmsman or pilot, hence the helm in the Kubernetes logo (link resides outside IBM).

Today, Kubernetes and the broader container ecosystem are maturing into a general-purpose computing platform and ecosystem that rivals - if not surpasses - virtual machines (VMs) as the basic building blocks of modern cloud infrastructure and applications. This ecosystem enables organizations to deliver a high-productivity Platform-as-a-Service (PaaS) that addresses multiple infrastructure-related and operations-related tasks and issues surrounding cloud-native development so that development teams can focus solely on coding and innovation. 

The following video (10:59) provides a great introduction to Kubernetes basics.

What are containers?

Containers are lightweight, executable application components that combine application source code with all the operating system (OS) libraries and dependencies required to run the code in any environment.

Containers take advantage of a form of operating system (OS) virtualization that lets multiple applications share a single instance of an OS by isolating processes and controlling the amount of CPU, memory, and disk those processes can access. Because they are smaller, more resource-efficient and more portable than virtual machines (VMs), containers have become the de facto compute units of modern cloud-native applications. 

In a recent IBM study (PDF, 1.4 MB) users reported several specific technical and business benefits resulting from their adoption of containers and related technologies. You can explore those benefits using the interactive data visualization below:

Download the full report, Containers in the enterprise (PDF, 1.4 MB)

Containers vs. virtual machines vs. traditional infrastructure

It may be easier or more helpful to understand containers as the latest point on the continuum of IT infrastructure automation and abstraction.

In traditional infrastructure, applications run on a physical server and grab all the resources they can get. This leaves you the choice of running multiple applications on a single server and hoping one doesn't hog resources at the expense of the others or dedicating one server per application, which wastes resources and doesn't scale.

Virtual machines (VMs) are servers abstracted from the actual computer hardware, enabling you to run multiple VMs on one physical server or a single VM that spans more than one physical server. Each VM runs its own OS instance, and you can isolate each application in its own VM, reducing the chance that applications running on the same underlying physical hardware will impact each other. VMs make better use of resources and are much easier and more cost-effective to scale than traditional infrastructure. And, they're disposable - when you no longer need to run the application, you take down the VM.

For more information on VMs, see "Virtual Machines: An Essential Guide."

Containers take this abstraction to a higher level - specifically, in addition to sharing the underlying virtualized hardware, they share an underlying, virtualized OS kernel as well. Containers offer the same isolation, scalability, and disposability of VMs, but because they don't carry the payload of their own OS instance, they're lighter weight (that is, they take up less space) than VMs. They're more resource-efficient - they let you run more applications on fewer machines (virtual and physical), with fewer OS instances. Containers are more easily portable across desktop, data center, and cloud environments. And they're an excellent fit for Agile and DevOps development practices.

"Containers: An Essential Guide" gives a complete explanation of containers and containerization. And the blog post "Containers vs. VMs: What's the difference?" gives a full rundown of the differences.

What is Docker?

Docker is the most popular tool for creating and running Linux(R) containers. While early forms of containers were introduced decades ago (with technologies such as FreeBSD Jails and AIX Workload Partitions), containers were democratized in 2013 when Docker brought them to the masses with a new developer-friendly and cloud-friendly implementation.

Docker began as an open source project, but today it also refers to Docker Inc., the company that produces Docker - a commercial container toolkit that builds on the open source project (and contributes those improvements back to the open source community).

Docker was built on traditional Linux container (LXC) technology, but enables more granular virtualization of Linux kernel processes and adds features to make containers easier for developers to build, deploy, manage, and secure.

While alternative container platforms exist today (such as Open Container Initiative (OCI), CoreOS, and Canonical (Ubuntu) LXD), Docker is so widely preferred that it is virtually synonymous with containers and is sometimes mistaken as a competitor to complimentary technologies such as Kubernetes (see the video "Kubernetes vs, Docker: It's Not an Either/Or Question" further below).

Container orchestration with Kubernetes

As containers proliferated - today, an organization might have hundreds or thousands of them - operations teams needed to schedule and automate container deployment, networking, scalability, and availability. And so, the container orchestration market was born.

While other container orchestration options - most notably Docker Swarm and Apache Mesos - gained some traction early on, Kubernetes quickly became the most widely adopted (in fact, at one point, it was the fastest-growing project in the history of open source software).

Developers chose and continue to choose Kubernetes for its breadth of functionality, its vast and growing ecosystem of open source supporting tools, and its support and portability across cloud service providers. All leading public cloud providers - including Amazon Web Services (AWS), Google Cloud, IBM Cloud and Microsoft Azure - offer fully managed Kubernetes services.

For more info on container orchestration, see the video "Container Orchestration Explained" (08:59):

What does Kubernetes do?

Kubernetes schedules and automates container-related tasks throughout the application lifecycle, including:

+ Deployment: Deploy a specified number of containers to a specified host and keep them running in a desired state. 
+ Rollouts: A rollout is a change to a deployment. Kubernetes lets you initiate, pause, resume, or roll back rollouts. 
+ Service discovery: Kubernetes can automatically expose a container to the internet or to other containers using a DNS name or IP address. 
+ Storage provisioning: Set Kubernetes to mount persistent local or cloud storage for your containers as needed. 
+ Load balancing: Based on CPU utilization or custom metrics, Kubernetes load balancing can distribute the workload across the network to maintain performance and stability. 
+ Autoscaling: When traffic spikes, Kubernetes autoscaling can spin up new clusters as needed to handle the additional workload. 
+ Self-healing for high availability: When a container fails, Kubernetes can restart or replace it automatically to prevent downtime. It can also take down containers that don't meet your health-check requirements. 

Kubernetes vs. Docker

If you've read this far, you already understand that while Kubernetes is an alternative to Docker Swarm, it is not (contrary to persistent popular misconception) an alternative or competitor to Docker itself.

In fact, if you've enthusiastically adopted Docker and are creating large-scale Docker-based container deployments, Kubernetes orchestration is a logical next step for managing these workloads. To learn more, watch "Kubernetes vs. Docker: It's Not an Either/Or Question" (08:03):

Kubernetes architecture

The chief components of Kubernetes architecture include the following:

Clusters and nodes (compute)

Clusters are the building blocks of Kubernetes architecture. The clusters are made up of nodes, each of which represents a single compute host (virtual or physical machine).

Each cluster consists of a master node that serves as the control plan for the cluster, and multiple worker nodes that deploy, run, and manage containerized applications. The master node runs a scheduler service that automates when and where the containers are deployed based on developer-set deployment requirements and available computing capacity. Each worker node includes the tool that is being used to manage the containers - such as Docker - and a software agent called a Kubelet that receives and executes orders from the master node.

Developers manage cluster operations using kubectl, a command-line interface (cli) that communicates directly with the Kubernetes API. 

For a deeper dive into Kubernetes clusters, check out this blog post: "Kubernetes Clusters: Architecture for Rapid, Controlled Cloud App Delivery."

Pods and deployments (software)

Pods are groups of containers that share the same compute resources and the same network. They are also the unit of scalability in Kubernetes: if a container in a pod is getting more traffic than it can handle, Kubernetes will replicate the pod to other nodes in the cluster. For this reason, it's a good practice to keep pods compact so that they contain only containers that must share resources.

The deployment controls the creation and state of the containerized application and keeps it running. It specifies how many replicas of a pod should run on the cluster. If a pod fails, the deployment will create a new one.

For more on Kubernetes deployments, watch "Kubernetes Deployments: Get Started Fast" (03:54):

For a more detailed understanding of the elements of Kubernetes architecture, try this self-paced online course: "Kubernetes 101".

You can also take a deeper dive with the blog post "Kubernetes Architecture: Four Approaches to Container Solutions."

Istio service mesh

Kubernetes can deploy and scale pods, but it can't manage or automate routing between them and doesn't provide any tools to monitor, secure, or debug these connections. As the number of containers in a cluster grows, the number of possible connection paths between them escalates exponentially (for example, two containers have two potential connections, but 10 pods have 90), creating a potential configuration and management nightmare.

Enter Istio, an open source service mesh layer for Kubernetes clusters. To each Kubernetes cluster, Istio adds a sidecar container - essentially invisible to the programmer and the administrator - that configures, monitors, and manages interactions between the other containers.

With Istio, you set a single policy that configures connections between containers so that you don't have to configure each connection individually. This makes connections between containers easier to debug.

Istio also provides a dashboard that DevOps teams and administrators can use to monitor latency, time-in-service errors, and other characteristics of the connections between containers. And, it builds in security - specifically, identity management that keeps unauthorized users from spoofing a service call between containers - and authentication, authorization and auditing (AAA) capabilities that security professionals can use to monitor the cluster.

See the article "What is Istio?" for more detail, including video and some examples of Istio in use.

Knative and serverless computing

Knative (pronounced 'kay-native') is an open source platform that sits on top of Kubernetes and provides two important classes of benefits for cloud-native development:

Knative provides an easy onramp to serverless computing

Serverless computing is a relatively new way of deploying code that makes cloud native applications more efficient and cost-effective. Instead of deploying an ongoing instance of code that sits idle while waiting for requests, serverless brings up the code as needed - scaling it up or down as demand fluctuates - and then takes the code down when not in use. Serverless prevents wasted computing capacity and power and reduces costs because you only pay to run the code when its actually running.

Knative enables developers to build a container once and run it as a software service or as a serverless function. It's all transparent to the developer: Knative handles the details in the background, and the developer can focus on code.

Knative simplifies container development and orchestration

For developers, containerizing code requires lots of repetitive steps, and orchestrating containers requires lots of configuration and scripting (such as generating configuration files, installing dependencies, managing logging and tracing, and writing continuous integration/continuous deployment (CI/CD) scripts.)

Knative makes these tasks easier by automating them through three components:

+ Build: Knative's Build component automatically transforms source code into a cloud-native container or function. Specifically, it pulls the code from repository, installs the required dependencies, builds the container image, and puts it in a container registry for other developers to use. Developers need to specify the location of these components so Knative can find them, but once that's done, Knative automates the build. 
+ Serve: The Serve component runs containers as scalable services; it can scale up to thousands of container instances or scale down to none (called scaling to zero). In addition, Serve has two very useful features: configuration, which saves versions of a container (called snapshots) every time you push the container to production and lets you run those versions concurrently; and service routing, which lets you direct different amounts of traffic to these versions. You can use these features together to gradually phase a container rollout or to stage a canary test of a containerized application before putting it into global production. 
+ Event: Event enables specified events to trigger container-based services or functions. This is especially integral to Knative's serverless capabilities; something needs to tell the system to bring up a function when needed. Event allows teams to express interest in types of events, and it then automatically connects to the event producer and routs the events to the container, eliminating the need to program these connections. 

You can learn more about Knative by reading "Knative: An Essential Guide."

Kubernetes GitHub commits and more evidence of surging popularity

Kubernetes is one of the fastest-growing open source projects in history, and growth is accelerating. Adoption continues to soar among developers and the companies that employ them. A few data points worth noting:

+ At this writing, over 120,190 commits have been made to the Kubernetes repository on GitHub (link resides outside IBM) - an increase of nearly 34,000 commits in the past 18 months - and there are more than 3,100 active contributors to the project. According to the Cloud Native Computing Foundation (CNCF) there have been more than 148,000 commits across all Kubernetes-related repositories (including Kubernetes Dashboard and Kubernetes MiniKube). You can read all the stats here (link resides outside IBM). 
+ More than 2,000 companies use Kubernetes in their production software stacks. These include world-known enterprises such as AirBnB, Ancestry, Bose, CapitalOne, Intuit, Nordstrom, Philips, Reddit, Slack, Spotify, Tinder, and, of course, IBM. Read these and other adoption case studies (link resides outside IBM) 
+ A 2021 survey cited in Container Journal (link resides outside IBM) found that 68% of IT professionals increased use of Kubernetes during the COVID-19 pandemic. 
+ According to ZipRecruiter (link resides outside IBM), the average annual salary (in North America) for a Kubernetes-related job is USD 147,732. At this writing, there are currently more than 57,000 Kubernetes-related positions listed on LinkedIn (link resides outside IBM), as compared to 21,000 positions listed just 18 months ago. 

Kubernetes tutorials

If you're ready to start working with Kubernetes or looking to build your skills with Kubernetes and Kubernetes ecosystem tools, try one of these tutorials:

+ Kubernetes tutorials: Free hand-on labs with certification 
+ Kubernetes Tutorials: 5 Ways to Get You Building Fast 
+ 8 Kubernetes Tips and Tricks 
+ Deploy a microservices app on IBM Cloud by using Kubernetes 
+ Debug and log your Kubernetes applications 
+ Kubernetes Networking: A lab on basic networking concepts 
+ Istio 101: Lab for learning how to use Istio on Kubernetes (link resides outside IBM) 
+ Knative 101: Exercises designed to help you achieve an understanding of Knative 

Kubernetes and IBM Cloud

Containers are ideal for modernizing your applications and optimizing your IT infrastructure. Built on Kubernetes and other tools in the open-source Kubernetes ecosystem, container services from IBM Cloud can facilitate and accelerate your path to cloud-native application development, and to an open hybrid cloud approach that integrates the best features and functions from private cloud, public cloud and on-premises IT infrastructure.

Take the next step:

+ Learn how you can deploy highly available, fully managed Kubernetes clusters for your containerized applications with a single click using Red Hat OpenShift on IBM Cloud. 
+ Deploy and manage containerized applications consistently across on-premises, edge computing and public cloud environments from any vendor with IBM Cloud Satellite. 
+ Run container images, batch jobs or source code as a serverless workload - no sizing, deploying, networking or scaling required - with IBM Cloud Code Engine. 
+ Deploy secure, highly available applications in a native Kubernetes experience using IBM Cloud Kubernetes Service. 

To get started right away, sign up for an IBM Cloud account.

Containers in the enterprise 

New IBM research documents the surging momentum of container and Kubernetes adoption.

Read the e-book (1.4 MB) 

Flexible, resilient, secure IT for your Hybrid Cloud 

Containers orchestrated using Kubernetes are part of an open hybrid cloud strategy that lets you build and manage workloads from anywhere, without vendor lock-in.


=======asdf22======== Q\Go K8s\$\ab9909c87b0ff603c409b201d866ec94.txt
https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/
TITLE: What is Kubernetes? | Kubernetes

+ What is Kubernetes?
+ Kubernetes Components
+ The Kubernetes API
+ Working with Kubernetes Objects

+ Understanding Kubernetes Objects
+ Kubernetes Object Management
+ Object Names and IDs
+ Namespaces
+ Labels and Selectors
+ Annotations
+ Field Selectors
+ Finalizers
+ Owners and Dependents
+ Recommended Labels

+ Cluster Architecture

+ Nodes
+ Communication between Nodes and the Control Plane
+ Controllers
+ Cloud Controller Manager
+ Container Runtime Interface (CRI)
+ Garbage Collection

+ Containers

+ Images
+ Container Environment
+ Runtime Class
+ Container Lifecycle Hooks

+ Windows in Kubernetes

+ Windows containers in Kubernetes
+ Guide for scheduling Windows containers in Kubernetes

+ Workloads

+ Pods

+ Pod Lifecycle
+ Init Containers
+ Pod Topology Spread Constraints
+ Disruptions
+ Ephemeral Containers
+ Downward API

+ Workload Resources

+ Deployments
+ ReplicaSet
+ StatefulSets
+ DaemonSet
+ Jobs
+ Automatic Clean-up for Finished Jobs
+ CronJob
+ ReplicationController

+ Services, Load Balancing, and Networking

+ Service
+ Topology-aware traffic routing with topology keys
+ DNS for Services and Pods
+ Connecting Applications with Services
+ Ingress
+ Ingress Controllers
+ EndpointSlices
+ Service Internal Traffic Policy
+ Topology Aware Hints
+ Network Policies
+ IPv4/IPv6 dual-stack
+ Networking on Windows

+ Storage

+ Volumes
+ Persistent Volumes
+ Projected Volumes
+ Ephemeral Volumes
+ Storage Classes
+ Dynamic Volume Provisioning
+ Volume Snapshots
+ Volume Snapshot Classes
+ CSI Volume Cloning
+ Storage Capacity
+ Node-specific Volume Limits
+ Volume Health Monitoring
+ Windows Storage

+ Configuration

+ Configuration Best Practices
+ ConfigMaps
+ Secrets
+ Resource Management for Pods and Containers
+ Organizing Cluster Access Using kubeconfig Files
+ Resource Management for Windows nodes

+ Security

+ Overview of Cloud Native Security
+ Pod Security Standards
+ Pod Security Admission
+ Pod Security Policies
+ Security For Windows Nodes
+ Controlling Access to the Kubernetes API
+ Role Based Access Control Good Practices
+ Multi-tenancy

+ Policies

+ Limit Ranges
+ Resource Quotas
+ Process ID Limits And Reservations
+ Node Resource Managers

+ Scheduling, Preemption and Eviction

+ Kubernetes Scheduler
+ Assigning Pods to Nodes
+ Pod Overhead
+ Taints and Tolerations
+ Pod Priority and Preemption
+ Node-pressure Eviction
+ API-initiated Eviction
+ Resource Bin Packing
+ Scheduling Framework
+ Scheduler Performance Tuning

+ Cluster Administration

+ Certificates
+ Managing Resources
+ Cluster Networking
+ Logging Architecture
+ Metrics For Kubernetes System Components
+ System Logs
+ Traces For Kubernetes System Components
+ Proxies in Kubernetes
+ API Priority and Fairness
+ Installing Addons

+ Extending Kubernetes

+ Extending the Kubernetes API

+ Custom Resources
+ Kubernetes API Aggregation Layer

+ Compute, Storage, and Networking Extensions

+ Network Plugins
+ Device Plugins

+ Operator pattern

+ Tasks

+ Install Tools

+ Install and Set Up kubectl on Linux
+ Install and Set Up kubectl on macOS
+ Install and Set Up kubectl on Windows

+ Administer a Cluster

+ Administration with kubeadm

+ Certificate Management with kubeadm
+ Configuring a cgroup driver
+ Reconfiguring a kubeadm cluster
+ Upgrading kubeadm clusters
+ Upgrading Windows nodes

+ Migrating from dockershim

+ Changing the Container Runtime on a Node from Docker Engine to containerd
+ Migrate Docker Engine nodes from dockershim to cri-dockerd
+ Find Out What Container Runtime is Used on a Node
+ Troubleshooting CNI plugin-related errors
+ Check whether dockershim removal affects you
+ Migrating telemetry and security agents from dockershim

+ Generate Certificates Manually
+ Manage Memory, CPU, and API Resources

+ Configure Default Memory Requests and Limits for a Namespace
+ Configure Default CPU Requests and Limits for a Namespace
+ Configure Minimum and Maximum Memory Constraints for a Namespace
+ Configure Minimum and Maximum CPU Constraints for a Namespace
+ Configure Memory and CPU Quotas for a Namespace
+ Configure a Pod Quota for a Namespace

+ Install a Network Policy Provider

+ Use Antrea for NetworkPolicy
+ Use Calico for NetworkPolicy
+ Use Cilium for NetworkPolicy
+ Use Kube-router for NetworkPolicy
+ Romana for NetworkPolicy
+ Weave Net for NetworkPolicy

+ Access Clusters Using the Kubernetes API
+ Advertise Extended Resources for a Node
+ Autoscale the DNS Service in a Cluster
+ Change the default StorageClass
+ Change the Reclaim Policy of a PersistentVolume
+ Cloud Controller Manager Administration
+ Configure Quotas for API Objects
+ Control CPU Management Policies on the Node
+ Control Topology Management Policies on a node
+ Customizing DNS Service
+ Debugging DNS Resolution
+ Declare Network Policy
+ Developing Cloud Controller Manager
+ Enable Or Disable A Kubernetes API
+ Enabling Service Topology
+ Encrypting Secret Data at Rest
+ Guaranteed Scheduling For Critical Add-On Pods
+ IP Masquerade Agent User Guide
+ Limit Storage Consumption
+ Migrate Replicated Control Plane To Use Cloud Controller Manager
+ Namespaces Walkthrough
+ Operating etcd clusters for Kubernetes
+ Reconfigure a Node's Kubelet in a Live Cluster
+ Reserve Compute Resources for System Daemons
+ Running Kubernetes Node Components as a Non-root User
+ Safely Drain a Node
+ Securing a Cluster
+ Set Kubelet parameters via a config file
+ Share a Cluster with Namespaces
+ Upgrade A Cluster
+ Use Cascading Deletion in a Cluster
+ Using a KMS provider for data encryption
+ Using CoreDNS for Service Discovery
+ Using NodeLocal DNSCache in Kubernetes clusters
+ Using sysctls in a Kubernetes Cluster
+ Utilizing the NUMA-aware Memory Manager
+ Verify Signed Container Images

+ Configure Pods and Containers

+ Assign Memory Resources to Containers and Pods
+ Assign CPU Resources to Containers and Pods
+ Configure GMSA for Windows Pods and containers
+ Configure RunAsUserName for Windows pods and containers
+ Create a Windows HostProcess Pod
+ Configure Quality of Service for Pods
+ Assign Extended Resources to a Container
+ Configure a Pod to Use a Volume for Storage
+ Configure a Pod to Use a PersistentVolume for Storage
+ Configure a Pod to Use a Projected Volume for Storage
+ Configure a Security Context for a Pod or Container
+ Configure Service Accounts for Pods
+ Pull an Image from a Private Registry
+ Configure Liveness, Readiness and Startup Probes
+ Assign Pods to Nodes
+ Assign Pods to Nodes using Node Affinity
+ Configure Pod Initialization
+ Attach Handlers to Container Lifecycle Events
+ Configure a Pod to Use a ConfigMap
+ Share Process Namespace between Containers in a Pod
+ Create static Pods
+ Translate a Docker Compose File to Kubernetes Resources
+ Enforce Pod Security Standards by Configuring the Built-in Admission Controller
+ Enforce Pod Security Standards with Namespace Labels
+ Migrate from PodSecurityPolicy to the Built-In PodSecurity Admission Controller

+ Monitoring, Logging, and Debugging

+ Troubleshooting Applications

+ Debug Pods
+ Debug Services
+ Debug a StatefulSet
+ Debug Init Containers
+ Debug Running Pods
+ Determine the Reason for Pod Failure
+ Get a Shell to a Running Container

+ Troubleshooting Clusters

+ Resource metrics pipeline
+ Tools for Monitoring Resources
+ Monitor Node Health
+ Debugging Kubernetes nodes with crictl
+ Auditing
+ Developing and debugging services locally using telepresence
+ Windows debugging tips

+ Manage Kubernetes Objects

+ Declarative Management of Kubernetes Objects Using Configuration Files
+ Declarative Management of Kubernetes Objects Using Kustomize
+ Managing Kubernetes Objects Using Imperative Commands
+ Imperative Management of Kubernetes Objects Using Configuration Files
+ Update API Objects in Place Using kubectl patch

+ Managing Secrets

+ Managing Secrets using kubectl
+ Managing Secrets using Configuration File
+ Managing Secrets using Kustomize

+ Inject Data Into Applications

+ Define a Command and Arguments for a Container
+ Define Dependent Environment Variables
+ Define Environment Variables for a Container
+ Expose Pod Information to Containers Through Environment Variables
+ Expose Pod Information to Containers Through Files
+ Distribute Credentials Securely Using Secrets

+ Run Applications

+ Run a Stateless Application Using a Deployment
+ Run a Single-Instance Stateful Application
+ Run a Replicated Stateful Application
+ Scale a StatefulSet
+ Delete a StatefulSet
+ Force Delete StatefulSet Pods
+ Horizontal Pod Autoscaling
+ HorizontalPodAutoscaler Walkthrough
+ Specifying a Disruption Budget for your Application
+ Accessing the Kubernetes API from a Pod

+ Run Jobs

+ Running Automated Tasks with a CronJob
+ Coarse Parallel Processing Using a Work Queue
+ Fine Parallel Processing Using a Work Queue
+ Indexed Job for Parallel Processing with Static Work Assignment
+ Parallel Processing using Expansions

+ Access Applications in a Cluster

+ Deploy and Access the Kubernetes Dashboard
+ Accessing Clusters
+ Configure Access to Multiple Clusters
+ Use Port Forwarding to Access Applications in a Cluster
+ Use a Service to Access an Application in a Cluster
+ Connect a Frontend to a Backend Using Services
+ Create an External Load Balancer
+ List All Container Images Running in a Cluster
+ Set up Ingress on Minikube with the NGINX Ingress Controller
+ Communicate Between Containers in the Same Pod Using a Shared Volume
+ Configure DNS for a Cluster
+ Access Services Running on Clusters

+ Extend Kubernetes

+ Configure the Aggregation Layer
+ Use Custom Resources

+ Extend the Kubernetes API with CustomResourceDefinitions
+ Versions in CustomResourceDefinitions

+ Set up an Extension API Server
+ Configure Multiple Schedulers
+ Use an HTTP Proxy to Access the Kubernetes API
+ Use a SOCKS5 Proxy to Access the Kubernetes API
+ Set up Konnectivity service

+ TLS

+ Configure Certificate Rotation for the Kubelet
+ Manage TLS Certificates in a Cluster
+ Manual Rotation of CA Certificates

+ Manage Cluster Daemons

+ Perform a Rolling Update on a DaemonSet
+ Perform a Rollback on a DaemonSet

+ Networking

+ Adding entries to Pod /etc/hosts with HostAliases
+ Validate IPv4/IPv6 dual-stack

+ Configure a kubelet image credential provider
+ Extend kubectl with plugins
+ Manage HugePages
+ Schedule GPUs

+ Hello Minikube
+ Learn Kubernetes Basics

+ Create a Cluster

+ Using Minikube to Create a Cluster
+ Interactive Tutorial - Creating a Cluster

+ Deploy an App

+ Using kubectl to Create a Deployment
+ Interactive Tutorial - Deploying an App

+ Explore Your App

+ Viewing Pods and Nodes
+ Interactive Tutorial - Exploring Your App

+ Expose Your App Publicly

+ Using a Service to Expose Your App
+ Interactive Tutorial - Exposing Your App

+ Scale Your App

+ Running Multiple Instances of Your App
+ Interactive Tutorial - Scaling Your App

+ Update Your App

+ Performing a Rolling Update
+ Interactive Tutorial - Updating Your App

+ Configuration

+ Example: Configuring a Java Microservice

+ Externalizing config using MicroProfile, ConfigMaps and Secrets
+ Interactive Tutorial - Configuring a Java Microservice

+ Configuring Redis using a ConfigMap

+ Security

+ Apply Pod Security Standards at the Cluster Level
+ Apply Pod Security Standards at the Namespace Level
+ Restrict a Container's Access to Resources with AppArmor
+ Restrict a Container's Syscalls with seccomp

+ Stateless Applications

+ Exposing an External IP Address to Access an Application in a Cluster
+ Example: Deploying PHP Guestbook application with Redis

+ Stateful Applications

+ StatefulSet Basics
+ Example: Deploying WordPress and MySQL with Persistent Volumes
+ Example: Deploying Cassandra with a StatefulSet
+ Running ZooKeeper, A Distributed System Coordinator

+ Services

+ Using Source IP

+ Reference

+ Glossary
+ API Overview

+ Kubernetes API Concepts
+ Server-Side Apply
+ Client Libraries
+ Kubernetes Deprecation Policy
+ Deprecated API Migration Guide
+ Kubernetes API health endpoints

+ API Access Control

+ Authenticating
+ Authenticating with Bootstrap Tokens
+ Certificate Signing Requests
+ Using Admission Controllers
+ Dynamic Admission Control
+ Managing Service Accounts
+ Authorization Overview
+ Using RBAC Authorization
+ Using ABAC Authorization
+ Using Node Authorization
+ Mapping PodSecurityPolicies to Pod Security Standards
+ Webhook Mode
+ Kubelet authentication/authorization
+ TLS bootstrapping

+ Well-Known Labels, Annotations and Taints

+ Audit Annotations

+ Kubernetes API

+ Workload Resources

+ Pod
+ PodTemplate
+ ReplicationController
+ ReplicaSet
+ Deployment
+ StatefulSet
+ ControllerRevision
+ DaemonSet
+ Job
+ CronJob
+ HorizontalPodAutoscaler
+ HorizontalPodAutoscaler
+ HorizontalPodAutoscaler v2beta2
+ PriorityClass

+ Service Resources

+ Service
+ Endpoints
+ EndpointSlice
+ Ingress
+ IngressClass

+ Config and Storage Resources

+ ConfigMap
+ Secret
+ Volume
+ PersistentVolumeClaim
+ PersistentVolume
+ StorageClass
+ VolumeAttachment
+ CSIDriver
+ CSINode
+ CSIStorageCapacity

+ Authentication Resources

+ ServiceAccount
+ TokenRequest
+ TokenReview
+ CertificateSigningRequest

+ Authorization Resources

+ LocalSubjectAccessReview
+ SelfSubjectAccessReview
+ SelfSubjectRulesReview
+ SubjectAccessReview
+ ClusterRole
+ ClusterRoleBinding
+ Role
+ RoleBinding

+ Policy Resources

+ LimitRange
+ ResourceQuota
+ NetworkPolicy
+ PodDisruptionBudget
+ PodSecurityPolicy v1beta1

+ Extend Resources

+ CustomResourceDefinition
+ MutatingWebhookConfiguration
+ ValidatingWebhookConfiguration

+ Cluster Resources

+ Node
+ Namespace
+ Event
+ APIService
+ Lease
+ RuntimeClass
+ FlowSchema v1beta2
+ PriorityLevelConfiguration v1beta2
+ Binding
+ ComponentStatus

+ Common Definitions

+ DeleteOptions
+ LabelSelector
+ ListMeta
+ LocalObjectReference
+ NodeSelectorRequirement
+ ObjectFieldSelector
+ ObjectMeta
+ ObjectReference
+ Patch
+ Quantity
+ ResourceFieldSelector
+ Status
+ TypedLocalObjectReference

+ Common Parameters

+ Kubernetes Issues and Security

+ Kubernetes Issue Tracker
+ Kubernetes Security and Disclosure Information

+ Node Reference Information

+ Articles on dockershim Removal and on Using CRI-compatible Runtimes

+ Ports and Protocols
+ Setup tools

+ Kubeadm

+ kubeadm init
+ kubeadm join
+ kubeadm upgrade
+ kubeadm config
+ kubeadm reset
+ kubeadm token
+ kubeadm version
+ kubeadm alpha
+ kubeadm certs
+ kubeadm init phase
+ kubeadm join phase
+ kubeadm kubeconfig
+ kubeadm reset phase
+ kubeadm upgrade phase
+ Implementation details

+ Command line tool (kubectl)

+ kubectl Cheat Sheet
+ kubectl Commands
+ kubectl
+ JSONPath Support
+ kubectl for Docker Users
+ kubectl Usage Conventions

+ Component tools

+ Feature Gates
+ kubelet
+ kube-apiserver
+ kube-controller-manager
+ kube-proxy
+ kube-scheduler

+ Configuration APIs

+ Client Authentication (v1)
+ Client Authentication (v1beta1)
+ Event Rate Limit Configuration (v1alpha1)
+ Image Policy API (v1alpha1)
+ kube-apiserver Audit Configuration (v1)
+ kube-apiserver Configuration (v1)
+ kube-apiserver Configuration (v1alpha1)
+ kube-apiserver Encryption Configuration (v1)
+ kube-proxy Configuration (v1alpha1)
+ kube-scheduler Configuration (v1beta2)
+ kube-scheduler Configuration (v1beta3)
+ kubeadm Configuration (v1beta2)
+ kubeadm Configuration (v1beta3)
+ Kubelet Configuration (v1alpha1)
+ Kubelet Configuration (v1beta1)
+ Kubelet CredentialProvider (v1alpha1)
+ Kubelet CredentialProvider (v1beta1)
+ WebhookAdmission Configuration (v1)

+ Scheduling

+ Scheduler Configuration
+ Scheduling Policies

+ Other Tools

+ Mapping from dockercli to crictl

+ Contribute

+ Suggesting content improvements
+ Contributing new content

+ Opening a pull request
+ Documenting for a release
+ Blogs and case studies

+ Reviewing changes

+ Reviewing pull requests
+ For approvers and reviewers

+ Localizing Kubernetes documentation
+ Participating in SIG Docs

+ Roles and responsibilities
+ PR wranglers

+ Documentation style overview

+ Content guide
+ Style guide
+ Diagram guide
+ Writing a new topic
+ Page content types
+ Content organization
+ Custom Hugo Shortcodes

+ Reference Docs Overview

+ Contributing to the Upstream Kubernetes Code
+ Quickstart
+ Generating Reference Documentation for the Kubernetes API
+ Generating Reference Documentation for kubectl Commands
+ Generating Reference Pages for Kubernetes Components and Tools
+ 

+ Advanced contributing
+ Viewing Site Analytics

+ Docs smoke test page

+ Kubernetes Documentation
+ Concepts
+ Overview
+ What is Kubernetes?

Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.

This page is an overview of Kubernetes.

Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.

The name Kubernetes originates from Greek, meaning helmsman or pilot. K8s as an abbreviation results from counting the eight letters between the "K" and the "s". Google open-sourced the Kubernetes project in 2014. Kubernetes combines over 15 years of Google's experience running production workloads at scale with best-of-breed ideas and practices from the community.

Going back in time

Let's take a look at why Kubernetes is so useful by going back in time.

Traditional deployment era: Early on, organizations ran applications on physical servers. There was no way to define resource boundaries for applications in a physical server, and this caused resource allocation issues. For example, if multiple applications run on a physical server, there can be instances where one application would take up most of the resources, and as a result, the other applications would underperform. A solution for this would be to run each application on a different physical server. But this did not scale as resources were underutilized, and it was expensive for organizations to maintain many physical servers.

Virtualized deployment era: As a solution, virtualization was introduced. It allows you to run multiple Virtual Machines (VMs) on a single physical server's CPU. Virtualization allows applications to be isolated between VMs and provides a level of security as the information of one application cannot be freely accessed by another application.

Virtualization allows better utilization of resources in a physical server and allows better scalability because an application can be added or updated easily, reduces hardware costs, and much more. With virtualization you can present a set of physical resources as a cluster of disposable virtual machines.

Each VM is a full machine running all the components, including its own operating system, on top of the virtualized hardware.

Container deployment era: Containers are similar to VMs, but they have relaxed isolation properties to share the Operating System (OS) among the applications. Therefore, containers are considered lightweight. Similar to a VM, a container has its own filesystem, share of CPU, memory, process space, and more. As they are decoupled from the underlying infrastructure, they are portable across clouds and OS distributions.

Containers have become popular because they provide extra benefits, such as:

+ Agile application creation and deployment: increased ease and efficiency of container image creation compared to VM image use.
+ Continuous development, integration, and deployment: provides for reliable and frequent container image build and deployment with quick and efficient rollbacks (due to image immutability).
+ Dev and Ops separation of concerns: create application container images at build/release time rather than deployment time, thereby decoupling applications from infrastructure.
+ Observability: not only surfaces OS-level information and metrics, but also application health and other signals.
+ Environmental consistency across development, testing, and production: Runs the same on a laptop as it does in the cloud.
+ Cloud and OS distribution portability: Runs on Ubuntu, RHEL, CoreOS, on-premises, on major public clouds, and anywhere else.
+ Application-centric management: Raises the level of abstraction from running an OS on virtual hardware to running an application on an OS using logical resources.
+ Loosely coupled, distributed, elastic, liberated micro-services: applications are broken into smaller, independent pieces and can be deployed and managed dynamically - not a monolithic stack running on one big single-purpose machine.
+ Resource isolation: predictable application performance.
+ Resource utilization: high efficiency and density.

Why you need Kubernetes and what it can do

Containers are a good way to bundle and run your applications. In a production environment, you need to manage the containers that run the applications and ensure that there is no downtime. For example, if a container goes down, another container needs to start. Wouldn't it be easier if this behavior was handled by a system?

That's how Kubernetes comes to the rescue! Kubernetes provides you with a framework to run distributed systems resiliently. It takes care of scaling and failover for your application, provides deployment patterns, and more. For example, Kubernetes can easily manage a canary deployment for your system.

Kubernetes provides you with:

+ Service discovery and load balancing Kubernetes can expose a container using the DNS name or using their own IP address. If traffic to a container is high, Kubernetes is able to load balance and distribute the network traffic so that the deployment is stable.
+ Storage orchestration Kubernetes allows you to automatically mount a storage system of your choice, such as local storages, public cloud providers, and more.
+ Automated rollouts and rollbacks You can describe the desired state for your deployed containers using Kubernetes, and it can change the actual state to the desired state at a controlled rate. For example, you can automate Kubernetes to create new containers for your deployment, remove existing containers and adopt all their resources to the new container.
+ Automatic bin packing You provide Kubernetes with a cluster of nodes that it can use to run containerized tasks. You tell Kubernetes how much CPU and memory (RAM) each container needs. Kubernetes can fit containers onto your nodes to make the best use of your resources.
+ Self-healing Kubernetes restarts containers that fail, replaces containers, kills containers that don't respond to your user-defined health check, and doesn't advertise them to clients until they are ready to serve.
+ Secret and configuration management Kubernetes lets you store and manage sensitive information, such as passwords, OAuth tokens, and SSH keys. You can deploy and update secrets and application configuration without rebuilding your container images, and without exposing secrets in your stack configuration.

What Kubernetes is not

Kubernetes is not a traditional, all-inclusive PaaS (Platform as a Service) system. Since Kubernetes operates at the container level rather than at the hardware level, it provides some generally applicable features common to PaaS offerings, such as deployment, scaling, load balancing, and lets users integrate their logging, monitoring, and alerting solutions. However, Kubernetes is not monolithic, and these default solutions are optional and pluggable. Kubernetes provides the building blocks for building developer platforms, but preserves user choice and flexibility where it is important.

Kubernetes:

+ Does not limit the types of applications supported. Kubernetes aims to support an extremely diverse variety of workloads, including stateless, stateful, and data-processing workloads. If an application can run in a container, it should run great on Kubernetes.
+ Does not deploy source code and does not build your application. Continuous Integration, Delivery, and Deployment (CI/CD) workflows are determined by organization cultures and preferences as well as technical requirements.
+ Does not provide application-level services, such as middleware (for example, message buses), data-processing frameworks (for example, Spark), databases (for example, MySQL), caches, nor cluster storage systems (for example, Ceph) as built-in services. Such components can run on Kubernetes, and/or can be accessed by applications running on Kubernetes through portable mechanisms, such as the Open Service Broker.
+ Does not dictate logging, monitoring, or alerting solutions. It provides some integrations as proof of concept, and mechanisms to collect and export metrics.
+ Does not provide nor mandate a configuration language/system (for example, Jsonnet). It provides a declarative API that may be targeted by arbitrary forms of declarative specifications.
+ Does not provide nor adopt any comprehensive machine configuration, maintenance, management, or self-healing systems.
+ Additionally, Kubernetes is not a mere orchestration system. In fact, it eliminates the need for orchestration. The technical definition of orchestration is execution of a defined workflow: first do A, then B, then C. In contrast, Kubernetes comprises a set of independent, composable control processes that continuously drive the current state towards the provided desired state. It shouldn't matter how you get from A to C. Centralized control is also not required. This results in a system that is easier to use and more powerful, robust, resilient, and extensible.

What's next

+ Take a look at the Kubernetes Components
+ Ready to Get Started?

Was this page helpful?

Yes No

Thanks for the feedback. If you have a specific, answerable question about how to use Kubernetes, ask it on Stack Overflow. Open an issue in the GitHub repo if you want to report a problem or suggest an improvement.

Last modified April 04, 2022 at 1:15 AM PST: Updating Kubernetes Overview page (043121abdf)

Edit this page Create child page Create an issue Print entire section

+ Going back in time
+ Why you need Kubernetes and what it can do
+ What Kubernetes is not
+ What's next

Home Blog Training Partners Community Case Studies

(c) 2022 The Kubernetes Authors | Documentation Distributed under CC BY 4.0
Copyright (c) 2022 The Linux Foundation (R). All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page
ICP license: ^ICP^17074266^-3


=======asdf23======== Q\Go K8s\$\2779b05ff97e11c68f12223f1b05b6b7.txt
https://www.geeksforgeeks.org/class-and-object-in-golang/

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang
+ fmt.Sprintf() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ Top 5 Golang Frameworks in 2020
+ How to convert a string in lower case in Golang?
+ How to Split a String in Golang?
+ How to compare times in Golang?
+ Inheritance in GoLang
+ Arrays in Go
+ How to Replace Characters in Golang String?
+ How to Take Input from the User in Golang?
+ Different Ways to Find the Type of Variable in Golang
+ Interfaces in Golang
+ Slices in Golang
+ Go Programming Language (Introduction)
+ How to Trim a String in Golang?
+ How to Assign Default Value for Struct Field in Golang?
+ How to copy one slice into another slice in Golang?
+ Data Types in Go
+ strings.Join() Function in Golang With Examples
+ Golang Maps
+ Channel in Golang
+ How to convert Int data type to Float in Golang?
+ Pointers in Golang
+ How to Delete or Remove a File in Golang?
+ Anonymous function in Go Language

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang
+ fmt.Sprintf() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ Top 5 Golang Frameworks in 2020
+ How to convert a string in lower case in Golang?
+ How to Split a String in Golang?
+ How to compare times in Golang?
+ Inheritance in GoLang
+ Arrays in Go
+ How to Replace Characters in Golang String?
+ How to Take Input from the User in Golang?
+ Different Ways to Find the Type of Variable in Golang
+ Interfaces in Golang
+ Slices in Golang
+ Go Programming Language (Introduction)
+ How to Trim a String in Golang?
+ How to Assign Default Value for Struct Field in Golang?
+ How to copy one slice into another slice in Golang?
+ Data Types in Go
+ strings.Join() Function in Golang With Examples
+ Golang Maps
+ Channel in Golang
+ How to convert Int data type to Float in Golang?
+ Pointers in Golang
+ How to Delete or Remove a File in Golang?
+ Anonymous function in Go Language

Class and Object in Golang

+ Last Updated : 03 May, 2022

Every human (excluding infants) can relate to encapsulation irrespective of his/her prior knowledge of encapsulation. Do you wonder why? Simple. Recollect all the times when you were sick, and the doctor prescribed all those monstrous capsules dosage for a couple of days until you were okay again! The evil capsule contains all mysterious elements which somehow magically fit into that tiny capsule!! Ever wondered about the content inside the capsule? We only see the capsule's external structure and honestly, none of us can tell what exactly it holds just by looking at its structure. Right? Well, to your surprise, this is what we call Encapsulation.

Wondering why we pulled Encapsulation into an article on classes and objects? Well, a class is a superb implementation of encapsulation. A capsule binds together the elements of medicine for the diseased and class binds together multiple lines of statements and/or functions for the programmer and user! Do you know what's the funniest part? There's no class in Golang but there is, indeed! Confusing? Seems so at first. Basically Go doesn't have the keyword, "class " unlike other object-oriented languages like C++/Java/Python, etc... but (here comes the exception!!!) Go supports the entire functionality of classes. It's like Go supports classes without naming it as a class.

So what if you can't use the keyword class? Go snatched away one keyword but gave back 4 different types of implementation of a class. Interesting! Let's dive deeper into the details of these 4 magicians:

1. Structs (Or rather Structures )
Structs are user-defined data types/structures. They work the same as structs in other languages like C++/Python. The only difference in a normal struct and an implicit class is that struct is defined by the programmer and then passed on to a function or a method and then processed. One can never tell if the program contains a part that is implicitly going to be considered as a class but Go supports OOPs ( Object Oriented Programming System) and with that, although a name and an organized capsule isn't visible to the programmer's eye, we firmly believe that we can perform all OOPs functionalities in GO just in a different manner.

2. Embedding
A less popular, yet useful technique which is using embedding. As the name suggests, it supports the nesting of structures in a particular way. For instance, you have struct1 with a & b content. Now you wish to create a struct2 that includes contents of struct1 as well as c & d. In that case, you can simply mention struct1 in struct2 and then c & d, this is something like the inline function logic! Embedding is also powered by structs. There's no difference in the implicit conversion as a class but just the case that structs are simple and nested ones are known as embedded structs.

3. Methods/Functions
Well, one can simply create functions of customized types and these functions can implicitly be treated as a class. The exciting new thing you can learn in Go's functions is that functions have a specific receiver type and they operate only on that very particular type; unlike templates in C++.

4. Interfaces
Interfaces are like those railway platforms which contain multiple trains standing and some traveling to and from a place. Yup, you read it right! Interfaces bind together various sets of methods that cannot be implemented explicitly as in Java. An important point to note about interfaces in Go is that names of interfaces must end with " er " and this is Go's convention. The characters lying before er is actually the name of the type which implements the same name+er interface. You'll gain maximum clarity after going through the code section below.

For instance:

Line1: type X struct {}

Line1 is a simple demo of defining X class (indirectly)

Objects can be related to real-life entities. Just as there are provisions for the functionality of a class but no class keyword, the same is the case with objects in Go. Objects or rather a variable can be instantiated with the particular class type and the variable can be further used exactly as one would use an object in any other language.

For instance:

Line2: obj := X()

Line2 is a simple demo of instantiating X class to obj (indirectly)

Code: Demonstration of Classes and Objects. 

// Importing fmt package for the sake of printing

import (

"fmt"

)

// Animal is the name we want but since we are

// to use it as an interface, we will change

// the name into Animaler.

type Animaler interface {

// Note that we will

// declare the methods to be used

// later here in this

// interface

Eat()

Move()

Speak()

Error()

// A struct holding a string variable: SuperAnimals

type SuperAnimals struct {

locomotion string

// An embedded struct holding content

// from another struct and two

// other string variables

// named Animals

type Animals struct {

SuperAnimals

food string

sound string

// Now we are indirectly implementing

// the Animaler interface without any

// keywords.

// We are about to define each method

// declared in the Animaler interface.

func (x Animals) Eat() {

// this method will access the variable

// food in Animal class

fmt.Println(x.food)

func (x Animals) Move() {

// this method will access the variable

// locomotion in Animal class

fmt.Println(x.locomotion)

func (x Animals) Speak() {

// this method will access the variable

// sound in Animal class

fmt.Println(x.sound)

func (x Animals) Error() {

fmt.Println("Invalid query entered!")

// Finally reached main function where we can

// now test our "GO classes"

// Experiencing a dictionary / map in GO

// For the animal name as a key,

// that particular object is a value

m := map[string]Animals{

"cow": Animals{SuperAnimals{"walk"}, "grass", "moo"},

"Cow": Animals{SuperAnimals{"walk"}, "grass", "moo"},

"Bird": Animals{SuperAnimals{"fly"}, "worms", "peep"},

"bird": Animals{SuperAnimals{"fly"}, "worms", "peep"},

"Snake": Animals{SuperAnimals{"slither"}, "mice", "hsss"},

"snake": Animals{SuperAnimals{"slither"}, "mice", "hsss"},

for i := 0; i < 3; i++ {

fmt.Println("Enter animal name & query (eat / move / speak): ")

fmt.Print(">")

var animal, op string

fmt.Scan(&animal)

fmt.Print(">")

fmt.Scan(&op)

if op == "eat" {

m[animal].Eat()

} else if op == "move" {

m[animal].Move()

} else if op == "speak" {

m[animal].Speak()

} else {

m[animal].Error()

Command to run:

Directory where the GO file is present:/> go run (file_name).go

Valid test case 1:

Input:

Enter animal name & query (eat / move / speak): 
>snake
>move

Enter animal name & query (eat / move / speak): 
>bird
>eat

Enter animal name & query (eat / move / speak): 
>cow
>speak

slither
worms
moo

Invalid Test case 2:

Input:

Enter animal name & query (eat / move / speak): 
>snake
>drink

Enter animal name & query (eat / move / speak): 
>cow
>eat 

Enter animal name & query (eat / move / speak): 
>dog
>talk

Invalid query entered!
grass
Invalid query entered!

Visual demo on Linux terminal:

Deleting Files in HDFS using Python Snakebite

Hadoop - Python Snakebite CLI Client, Its Usage and Command References

Different Ways to Find the Type of an Object in Golang

Object-Oriented Programming in GoLang

18, Jun 20

Getting the current date and time with timestamp in local and other timezones in Golang

08, Jun 20

Difference between var keyword and short declaration operator in Golang

01, Jul 19

Anonymous Structure and Field in Golang

09, Aug 19

main and init function in Golang

30, Aug 19

Golang | Deadlock and Default Case in Select Statement

26, Sep 19

How to Rename and Move a File in Golang?

17, Mar 20

How to Remove All Directories and Files in Golang?

12, Mar 20

How to Find the Sin and Cos Value of a Number in Golang?

How to find the capacity of Channel, Pointer and Slice in Golang?

How to Create and Print Multi Dimensional Slice in Golang?

Calculating total number of Hours, Days, Minutes and Seconds between two dates in Golang

How to declare and access pointer variable in Golang?

How to find the Length of Channel, Pointer, Slice, String and Map in Golang?

How to use for and foreach loop in Golang?

How to use Array Reverse Sort Functions for Integer and Strings in Golang?

How to Get First and Last Element of Slice in Golang?

12, May 20

Function that takes an interface type as value and pointer in Golang

12, May 20

Golang Program that Uses Named Return Values and Defaults

How to Get Current Date and Time in Various Format in Golang?

How to Read and Write the Files in Golang?

How to Compare Equality of Struct, Slice and Map in Golang?

Copy an Array by Value and Reference into Another Array in Golang

28, May 20

ashika2k8

@ashika2k8

+ rajeev0719singh
+ sagartomar9927

+ Go Language

+ How to Parse JSON in Golang?
+ How to iterate over an Array using for loop in Golang?
+ Structures in Golang
+ Time Durations in Golang
+ Loops in Go Language

+ Strings in Golang
+ time.Parse() Function in Golang With Examples
+ Rune in Golang
+ How to Install Go on Windows?
+ Nested Structure in Golang


=======asdf24======== Q\Go K8s\$\acb592e01aa7a33e21a358c89171499d.txt
https://geekflare.com/learn-kubernetes/
TITLE: 14 Kubernetes Tutorials for Beginner to Master

Your emailYour email...

Join Newsletter

Follow Geekflare on 

+ Start Here 
+ Articles 
+ Tools 
+ Deals 
+ API 
+ Compiler 

14 Kubernetes Tutorials for Beginner to Master 

By Asad Ali in Career on April 25, 2022 

Geekflare is supported by our audience. We may earn affiliate commissions from buying links on this site. 

Invicti Web Application Security Scanner - the only solution that delivers automatic verification of vulnerabilities with Proof-Based Scanning(tm). 

Let's explore some of the best Kubernetes tutorials to learn from scratch and become an expert.

Each listed tutorial in this article is well researched and reviewed. It will give you a fair and depth knowledge of practical use cases.

Introduction

In the previous article, we learned about DevOps and its importance. We also discussed the DevOps tools and understood how Docker fits into the DevOps ecosystem. We saw how the IT industry is moving towards the container adoption approach and using Docker to achieve it.

Similar to Docker, Kubernetes is also a DevOps tool originally developed by Google. It is open-source and is used for managing the containers. Since Docker isolates an application and packages up all the dependencies into the container. Now to manage these containers, there are a number of tasks and processes involved, and here the Kubernetes come into the picture.

Once Docker has isolated an application into the container, the Kubernetes will be responsible for managing these containers by scheduling or orchestrating them.

Precisely, Kubernetes is a container orchestration tool that is used to deploy and scale the containerized application. Moreover, it schedules and manages the multiple containers deployed across multiple host machines.

Hey just remember! Docker creates a container whereas Kubernetes manages it.

Why is it essential to learn Kubernetes?

Let's focus some light on understanding why it is important to learn it as we know Docker isolates and application into the container. Now to manage these containers, there are a number of tasks and processes involved. What Kubernetes does is, automate these tasks and processes to manage these containerized apps. So far, so good, but it is not so simple how it looks like!

There are some security concerns while working with Kubernetes and its deployment process. Therefore it is very important to have a fair understanding and knowledge of Kubernetes that how it works. One should be well versed with all the tactics and solutions to build a secure environment for Kubernetes.

If it is not that easy, so it is not that complex as well ^^.

Here is the motivation - average Kubernetes skills payscale is above $100k.

Sounds good? Let's explore learning now...

Kubernetes Fundamentals

Fundamentals of Kubernetes is absolutely for beginners.

As the name suggests, it covers the basic fundamental of Kubernetes. Each video discussed in this course covers the hands-on execution of commands. It touches on some of the intermediate and advanced topics as well, such as the Kubernetes dashboard, configuring data and application secrets, monitoring and logging, and finally, authentication, and authorization.

Certified Kubernetes Administrator

How about getting Kubernetes certified?

Whizlabs provider more than 8 hours of online training to teach everything you need to get a certified Kubernetes administrator (CKA). The course contains the following essential topics.

+ Introduction, basic concepts
+ Installation, configuration, best practices
+ Networking
+ Scheduling, logging, monitoring
+ Cluster creation and maintenance
+ Security, lifecycle management

You can access the course content from anywhere, anytime.

For Beginners

A good free one on YouTube to get a basic understanding.

The good thing with this tutorial is that, apart from basic concepts, the real-time use cases of Pokemon Go have been discussed in this video tutorial, just to illustrate the concepts.

Complete Kubernetes

Complete Kubernetes Tutorial by School of DevOps is good for beginner and intermediate skills. The only basic pre-requisite for this tutorial is you should have a basic understanding of Docker, Linux commands, and YAML syntax.

Exam Training

This tutorial is ideal for all levels of learners, especially for those who are looking for a certification program. It starts with basic and then deep dive into complex concepts like Kubernetes controllers, storage, and cluster, etc. After completing this course, you will be able to configure your Kubernetes network.

Become Architect

Architecting with Google Kubernetes Engine Specialization is a course from Coursera offered by Google Cloud.

This is a specialization course, and there are four courses in this specialization. One can consider this as an all-in-one, which is suitable for all levels of learners. The first chapter covers the fundamentals of Kubernetes, followed by the foundations of Kubernetes in the second chapter. In the third chapter, it covers workloads persistence storage. While in the last chapter, it covers the concepts required for production deployments such as security, logging, and monitoring.

The best thing with this course is that, when you finish this course and complete the hands-on project, you will get a certificate that you can circulate with the employers and across your professional network.

Kubernetes for developers

Kubernetes for developers is entitled to developers who want to get started with Kubernetes with the intent on how to deploy, manage, and scale monolith or microservices apps. The goal of this course is to give you some hands-on with Kubernetes through a practical workshop.

By the end of this course, you'll be able to dockerize an app, deploy it to the Kubernetes cluster, and apply DevOps into it.

Kubernetes Tutorials

Kubernetes Tutorials is an official documentation from Kubernetes. One can go through this official documentation and can learn much more about Kubernetes.

A Complete Guide

A Complete Guide to Kubernetes and Docker -Hands-On is ideal for those who are interested in developing applications for production.

By the end of this tutorial, you will be able to set up the Kubernetes cluster on your desktop, or on the cloud using AWS.

Kubernetes Made Easy

Kubernetes made easy is free and available on YouTube.

This tutorial consists of 36 videos, each video length with an average of 10 minutes. It is instructed by Srinath Challa, and the course content is suitable for all types of learners.

Kubernetes Training

It is a good comprehensive course to learn and ready to clear the certification exam. You will be working on real-time projects and assignments.

To get the course completion certificate, you need to complete the project work assigned to you. After expert review and upon scoring at least 60% marks in the quiz, you will be awarded the Intellipaat Certificate.

Kubernetes Administrator

It is ideal for those who want to become a Kubernetes Administrator.

The course starts with the basic concepts of Kubernetes and Application Lifecycle Management and gradually moves to the intermediate and advanced concepts like Kubernetes networking, Kubernetes scheduling, Kubernetes security, Kubernetes cluster maintenance, Kubernetes logging and monitoring, Kubernetes storage and troubleshooting Kubernetes.

A Practical Guide

A Practical Guide to Kubernetes contains 175 lessons. Each lesson aim to teach you one concept. The great thing with this course is that, at the end of lessons, it asks to appear for quizzes, which enables learners to recall the concept and learnings.

The course starts with a basic like a short history of infrastructure management and deployment processes, followed by an introduction to the Kubernetes, and so on. Gradually it moves and covers intermediate and advanced topics such as Pods, ReplicaSets, Services, Deployments, Volumes, ConfigMaps, Secrets, Security Managing Resources, and Persisting State.

The Complete Kubernetes

Learn DevOps: The Complete Kubernetes Course requires familiarity with DevOps, Linux, AWS, and Docker concepts as prerequisites.

By the end of this course, you will be able to deploy, use, and maintain your applications on Kubernetes. A certificate of completion will also be provided by Udemy after completing this course.

Learning Kubernetes would be a good move for sysadmin and developers as more organization is moving towards containerization. The above courses should help you to learn and upgrade your skills.

Next, you should also explore some of the popular Kubernetes tools.

Enjoyed reading the article? How about sharing with the world? 

+ Tagged in: 
+ DevOps 

More great readings on Career 

How to Become a Certified Salesforce Admin in 2022 

Durga Prasad Acharya on June 16, 2022 

20 Frequently Asked DevOps Interview Questions and Answers [2022] 

Talha Khalid on June 14, 2022 

25 Accounting Terms You Should Know About as a Beginner 

Bipasha Nath on June 14, 2022 

Data Science vs Data Analytics - Which Data Career Path to Follow? 

Neema Muganga on June 14, 2022 

How to Get Paid to Test Websites in 2022 [15 Websites] 

Kritika Singh on June 10, 2022 

How to Get a PMP Certification in 2022 

Dhruv Parmar on June 9, 2022 

Join Geekflare Newsletter 

Every week we share trending articles and tools in our newsletter. More than 10,000 people enjoy reading, and you will love it too. 

Your emailYour email...

Join Newsletter

Learn Kubernetes 

+ Kubernetes Fundamentals 
+ Certified Kubernetes Administrator 
+ For Beginners 
+ Complete Kubernetes 
+ Exam Training 
+ Become Architect 
+ Kubernetes for developers 
+ Kubernetes Tutorials 
+ A Complete Guide 
+ Kubernetes Made Easy 
+ Kubernetes Training 
+ Kubernetes Administrator 
+ A Practical Guide 
+ The Complete Kubernetes 

More great readings on Career 

+ How to Become a Certified Salesforce Admin in 2022 How to Become a Certified Salesforce Admin in 2022 
+ 20 Frequently Asked DevOps Interview Questions and Answers [2022] 20 Frequently Asked DevOps Interview Questions and Answers [2022] 
+ 25 Accounting Terms You Should Know About as a Beginner 25 Accounting Terms You Should Know About as a Beginner 
+ Data Science vs Data Analytics - Which Data Career Path to Follow? Data Science vs Data Analytics - Which Data Career Path to Follow? 
+ How to Get Paid to Test Websites in 2022 [15 Websites] How to Get Paid to Test Websites in 2022 [15 Websites] 
+ How to Get a PMP Certification in 2022 How to Get a PMP Certification in 2022 

Thanks to our sponsors 

+ 
+ 
+ 
+ 
+ 
+ 

Power Your Business 

Here are some of the tools and services to help your business grow. 

Invicti uses the Proof-Based Scanning(tm) to automatically verify the identified vulnerabilities and generate actionable results within just hours. 

Try Invicti 

Web scraping, residential proxy, proxy manager, web unlocker, search engine crawler, and all you need to collect web data. 

Try Brightdata 

Vultr features the latest generation CPUs and an intuitive control panel, along with 100% KVM virtualization. 

Try Vultr 

Semrush is an all-in-one digital marketing solution with more than 50 tools in SEO, social media, and content marketing. 

Try Semrush 

Explore 50+ resources 

+ Geekflare API 
+ Geekflare Tools 
+ Newsletter 
+ Tech Articles 
+ Finance Articles 
+ Compiler 

Company 

+ Advertise 
+ About 
+ Hiring 
+ Terms 
+ Privacy 
+ Disclosure 
+ Sitemap 
+ RSS Feed 

Geekflare Articles 

+ DevOps 
+ Cloud Computing 
+ Security 
+ Sysadmin 
+ Development 
+ Smart Things 
+ Growing Business 

Geekflare Tools 

+ Website Audit 
+ TTFB Test 
+ TLS Scanner 
+ WordPress Scanner 
+ DNS Lookup 
+ Secure Headers Test 
+ Screenshot 

Geekflare API 

+ DNS Lookup 
+ Is Site Up? 
+ Lighthouse 
+ Loadtime 
+ Screenshot 
+ TLS Scan 
+ Broken Link 

(c) 2022 . Geekflare 

Close this module 

Geekflare Newsletter

More than 10,000 people enjoy reading, and you will love it too.


=======asdf25======== Q\Go K8s\$\6a7ece26cda832317ad6e189328aec87.txt
https://www.techtarget.com/searchitoperations/tutorial/A-step-by-step-tutorial-for-Kubernetes-implementation
TITLE: Kubernetes basics: A step-by-step implementation tutorial

SearchITOperations Search the TechTarget Network </form> Sign-up now. Start my free, unlimited access. 

Login Register 

+ Techtarget Network 
+ News 
+ Features 
+ Tips 
+ Webinars 
+ More Content 

+ Answers 
+ Definitions 
+ Essential Guides 
+ Opinions 
+ Photo Stories 
+ Podcasts 
+ Quizzes 
+ Tutorials 
+ Sponsored Communities 

+ WATCH VIDEO TUTORIALS 

SearchITOperations 

Topic Containers and virtualization 

+ DevOps 
+ IT operations careers and skills 
+ IT systems management 
+ Systems automation and orchestration 
+ All Topics 

+ Follow: 
+ 
+ 
+ 

Tech Accelerator What is container management and why is it important? 

Prev Next Tanzu vs. OpenShift vs. Ezmeral: 3 rivals' Kubernetes offerings Four container security vulnerabilities and how to avoid them 

Download this guide1

Tutorial 

Kubernetes basics: A step-by-step implementation tutorial

This Kubernetes implementation example demonstrates how to create a single-node cluster on Windows 10 to get a containerized application up and running.

By 

+ Prateek Singh, Continuum Managed Services LLC 

Published: 09 Apr 2021 

Containerization enables developers and system administrators to quickly deploy applications and scale them to their requirements, without downtime. With container orchestration and management, IT organizations can manage cloud-native and distributed applications, and package legacy applications for increased portability and efficient deployment.

Kubernetes, the de facto technology for container management and orchestration, is renowned for being complex to set up and implement. However, once it's up and running, it is highly configurable, and serves as the engine for an organization's modern IT efforts.

Let's get started with the key steps and Kubernetes commands for a basic Kubernetes implementation.

Basic Kubernetes architecture

First, it's useful to understand the foundation of a Kubernetes system, which revolves around four important concepts: nodes, pods, deployments and services. The servers that run the containers -- and the applications inside them -- are called nodes. A master server controls, manages and configures these node servers. The master also manages pods, or a group of one or more containers that resides on nodes.

The master server acts as the control plane for the Kubernetes clusters. The main purpose of the various components in the control plane is to maintain a record of all Kubernetes objects and to continuously manage the desired state of the cluster by automatically responding to changes.

This article is part of

What is container management and why is it important?

+ Which also includes: 
+ Kubernetes basics: A step-by-step implementation tutorial 
+ Four container security vulnerabilities and how to avoid them 
+ Compare Mesos vs. Kubernetes for container federation 

Download1 

Download this entire guide for FREE now!

There are four major components of a control plane:

+ Etcd. The most fundamental component of a Kubernetes cluster, etcd is a lightweight available configuration store. It can be set up across more than one Kubernetes node. Its main purpose is to store configuration data that's accessible to each node in the Kubernetes cluster. 
+ Kube-apiserver. This is a RESTful interface for command-line tools such as kubectl, providing them a way to interact with the Kubernetes cluster. In simpler terms, it serves as a management point for various tools to control and configure Kubernetes clusters through REST APIs. 
+ Kube-controller-manager. The primary role of this service is to maintain the state of a cluster, such as the number of replicas. If any variation in desired state is observed, the kube-controller-manager runs required procedures to make sure that the desired state is met. 
+ Kube-scheduler. This component's primary responsibility is to schedule cluster workloads based on configurations, resource requirements and workload-specific requirements. 

There are several components of node servers that make it possible for the master to work with them. These include:

+ Container runtime. To run applications encapsulated in a pod that exists on nodes, we need a lightweight, isolated operating environment: the container. A container runtime is a tool, such as Docker, to create, deploy and run applications. 
+ Kubelet. A kubelet is an agent or a service that is installed on nodes to communicate with and receive commands from the master node. It directs actions that need to be performed on the node, such as to create, scale and delete containers. 
+ Kube-proxy. This proxy service relays requests to the correct container and performs load balancing. Kube-proxy also performs host-level subnetting to ensure services are accessible to other components. 

Kubernetes implementation steps

In this tutorial, we'll create a single-node cluster that runs on the Windows 10 operating system.

To install and set up Kubernetes on Windows, load kubectl and install minikube. The Chocolatey package manager helps in this process. A command-line tool, kubectl runs commands against Kubernetes clusters, while minikube is a tool that enables us to run a single-node cluster in a VM on a machine. Enter the command:

choco install Kubernetes-cli minikube

This will return an output that looks as follows:

Now, run the following command and verify that kubectl is installed on your machine:

kubectl.exe version --client

You must see an output like in the following screenshot:

TechTarget 

Next, spin up a worker machine -- or node -- in Kubernetes. It can be a physical or virtual machine. To do this, use the following command to start minikube:

minikube start

This will return an output as shown below:

Since we are installing Kubernetes on Windows, use Hyper-V to launch a VM and set up a Kubernetes cluster on the VM.

This completes the setup.

Running Kubernetes containers

To start containers, use the Kubernetes command below to create a deployment. Provide a name for the deployment and the container image to deploy. Kubernetes will automatically pick Docker as the default container runtime. Here we use an image that will run the Nginx web server:

kubectl.exe create deployment my-nginx --image nginx

When a deployment is created, Kubernetes builds pods to host application instances.

Enter get pods just after running the previous command to catch the ContainerCreating status as pods are deployed:

kubectl.exe get pods

This will complete in a few seconds and the container status should change to Running:

Use the describe keyword with the deployment name, as shown below, to see more detailed information about deployments:

kubectl.exe get deployment

kubectl.exe describe deployment helloworld-nginx

This returns results, such as number of replicas, desired state and timestamps:

In this Kubernetes implementation tutorial, we run only one container or Nginx server, but sometimes it's necessary to accommodate increased workload and traffic. In that case, scale up the number of application instances. This can be achieved using kubectl scale deployment with a --replicas parameter:

kubectl.exe scale deployment helloworld-nginx --replicas 4

Check the deployment. You will observe that four replicas of the application instance have been deployed:

Now, check the Kubernetes pods; there should be four containers running on the node:

Deploy your app

Now there is an application running in multiple containers with their own IP addresses. Next, expose them outside the cluster so that the application is accessible:

Kubectl.exe expose deployment helloworld-nginx --port=80 --type=NodePort

Verify this via the kubectl get services command. This will return a service type of NodePort to expose port 80 on each node of the Kubernetes cluster. This service is an abstraction layer that basically load balances and groups more than one pod in a cluster that shares an IP address.

To open this application in a web browser, create a proxy to connect the local port to the cluster port, which we exposed using the NodePort service in the previous step:

kubectl.exe port-forward svc/helloworld-nginx 80:80

This will look as follows:

Go to the web browser and open http://127.0.0.1/ or http://localhost/ to see the homepage of the Nginx web server deployed in Kubernetes containers.

Test the Kubernetes control plane

Lastly, test that the Kubernetes control plane, or master server, is able to maintain the desired state of the pods that run on the node server. To check this, use the following command to forcibly delete one of the pods that runs the application instance:

kubectl.exe delete pod helloworld-nginx-67bb76cf46-mks6j

This undesired state will be identified, and Kubernetes will immediately run a new instance of the application in a container:

What's next for your Kubernetes implementation?

Once you have the basics of Kubernetes deployment under your belt, think about how you can extend this knowledge. Some related areas you'll likely encounter:

+ Be ready to troubleshoot some common Kubernetes problems that can impede performance, from unavailable nodes and unresponsive containers to resource-hogging workloads. 
+ Some critical enterprise workloads demand high availability, which requires a more specific approach to Kubernetes implementation. Learn how to plan out a container deployment to ensure redundancy and high availability. 
+ Address security at the container level in various ways, such as creating multiple security layers and scanning container images for vulnerabilities. 

Next Steps

Kubernetes performance testing tutorial: Load test a cluster

Related Resources

+ Storage for containers and virtual environments -ComputerWeekly.com 
+ How 5G affects data centres and how to prepare -ComputerWeekly.com 

Dig Deeper on Containers and virtualization

Imperative vs. declarative Kubernetes commands: What's the difference?

By: Bob Reselman 

How to secure Kubernetes clusters in 7 steps

By: Prateek Singh 

Use Kubernetes and Terraform together for cluster management

By: Prateek Singh 

How do you debug a Kubernetes service deployment?

By: Kurt Marko 

Latest TechTarget resources 

+ Software Quality 
+ Application Architecture 
+ Cloud Computing 
+ AWS 
+ Java 
+ Data Center 

SearchSoftwareQuality 

+ CircleCI vs. GitHub Actions: CI/CD platform comparison 

Learn the differing features, commands and perks that make CircleCI and GitHub Actions distinct CI/CD platforms. Then, decide ...

+ Key things to consider when choosing regression testing tools 

Making a decision about regression testing tooling purchases means taking stock of plans for CI/CD implementations, existing ...

+ Amazon CodeWhisperer joins packed AI code completion market 

AI code completion tool Amazon CodeWhisperer is now available for developers who are willing to wait.

SearchAppArchitecture 

+ A 7-point language comparison of Ballerina vs. Golang 

This comparison takes a look at both Ballerina and Golang, including their support for high-level programming, libraries, ...

+ How viable is it to create microservices in Python? 

Python offers microservices developers access to advanced scripting, embedded testing and plugin tooling. But is it a good fit ...

+ Ardoq Discover boosts enterprise architecture tool usability 

Tools for enterprise architects get criticized for their complexity, but they are getting better. A recently released module from...

SearchCloudComputing 

+ Cloud-native modernization is on the rise 

Research suggests that cloud-native application deployment is becoming more prevalent as organizations continue to embrace public...

+ IT buyers respond to HPE GreenLake cloud pitch 

Tech buyers are interested in the breadth and depth of services sold through the HPE GreenLake service, but want proof of cost ...

+ How to create an EC2 instance using PowerShell 

PowerShell has practical integrations that provide users with cross-platform capabilities. Get to know prerequisites and ...

SearchAWS 

+ AWS Control Tower aims to simplify multi-account management 

Many organizations struggle to manage their vast collection of AWS accounts, but Control Tower can help. The service automates ...

+ Break down the Amazon EKS pricing model 

There are several important variables within the Amazon EKS pricing model. Dig into the numbers to ensure you deploy the service ...

+ Compare EKS vs. self-managed Kubernetes on AWS 

AWS users face a choice when deploying Kubernetes: run it themselves on EC2 or let Amazon do the heavy lifting with EKS. See ...

TheServerSide.com 

+ 8 tech jobs that don't require coding 

Looking for an IT job that doesn't involve coding? These eight tech roles are important in any organization, with no programming ...

+ Agile versus Scrum: What's the difference? 

What's the difference between Agile and Scrum? What are their similarities? Learn how to compare and contrast these two popular ...

+ How to communicate effectively in the workplace 

Don't bury the lead. Grab your audience's attention early. Be graceful when others disagree. These and other tips will help you ...

SearchDataCenter 

+ HPE GreenLake achieves everything as a service 

The latest version of HPE GreenLake has realized the vision of everything as a service, although customers are still figuring out...


=======asdf26======== Q\Go K8s\$\3bf2ccb7084401a32b669b09c4cbf0b9.txt
https://www.javatpoint.com/kubernetes
TITLE: Kubernetes Tutorial - javatpoint

Kubernetes is also known as 'k8s'. This word comes from the Greek language, which means a pilot or helmsman.
Kubernetes is an extensible, portable, and open-source platform designed by Google in 2014. It is mainly used to automate the deployment, scaling, and operations of the container-based applications across the cluster of nodes. It is also designed for managing the services of containerized apps using different methods which provide the scalability, predictability, and high availability.

It is actually an enhanced version of 'Borg' for managing the long-running processes and batch jobs. Nowadays, many cloud services offer a Kubernetes-based infrastructure on which it can be deployed as the platform-providing service. This technique or concept works with many container tools, like docker, and follows the client-server architecture.

Key Objects of Kubernetes

Following are the key objects which exist in the Kubernetes:

Pod

It is the smallest and simplest basic unit of the Kubernetes application. This object indicates the processes which are running in the cluster.

Node

A node is nothing but a single host, which is used to run the virtual or physical machines. A node in the Kubernetes cluster is also known as a minion.

Service

A service in a Kubernetes is a logical set of pods, which works together. With the help of services, users can easily manage load balancing configurations.

ReplicaSet

A ReplicaSet in the Kubernetes is used to identify the particular number of pod replicas are running at a given time. It replaces the replication controller because it is more powerful and allows a user to use the "set-based" label selector.

Namespace

Kubernetes supports various virtual clusters, which are known as namespaces. It is a way of dividing the cluster resources between two or more users.

Features of Kubernetes

Following are the essential features of Kubernetes:

+ Pod: It is a deployment unit in Kubernetes with a single Internet protocol address. 
+ Horizontal Scaling: It is an important feature in the Kubernetes. This feature uses a HorizontalPodAutoscalar to automatically increase or decrease the number of pods in a deployment, replication controller, replica set, or stateful set on the basis of observed CPU utilization. 
+ Automatic Bin Packing: Kubernetes helps the user to declare the maximum and minimum resources of computers for their containers. 
+ Service Discovery and load balancing: Kubernetes assigns the IP addresses and a Name of DNS for a set of containers, and also balances the load across them. 
+ Automated rollouts and rollbacks: Using the rollouts, Kubernetes distributes the changes and updates to an application or its configuration. If any problem occurs in the system, then this technique rollbacks those changes for you immediately. 
+ Persistent Storage: Kubernetes provides an essential feature called 'persistent storage' for storing the data, which cannot be lost after the pod is killed or rescheduled. Kubernetes supports various storage systems for storing the data, such as Google Compute Engine's Persistent Disks (GCE PD) or Amazon Elastic Block Storage (EBS). It also provides the distributed file systems: NFS or GFS. 
+ Self-Healing: This feature plays an important role in the concept of Kubernetes. Those containers which are failed during the execution process, Kubernetes restarts them automatically. And, those containers which do not reply to the user-defined health check, it stops them from working automatically. 

Kubernetes Architecture

The architecture of Kubernetes actually follows the client-server architecture. It consists of the following two main components:

+ Master Node (Control Plane) 
+ Slave/worker node 

Master Node or Kubernetes Control Plane

The master node in a Kubernetes architecture is used to manage the states of a cluster. It is actually an entry point for all types of administrative tasks. In the Kubernetes cluster, more than one master node is present for checking the fault tolerance.

Following are the four different components which exist in the Master node or Kubernetes Control plane:

+ API Server 
+ Scheduler 
+ Controller Manager 
+ ETCD 

API Server

The Kubernetes API server receives the REST commands which are sent by the user. After receiving, it validates the REST requests, process, and then executes them. After the execution of REST commands, the resulting state of a cluster is saved in 'etcd' as a distributed key-value store.

Scheduler

The scheduler in a master node schedules the tasks to the worker nodes. And, for every worker node, it is used to store the resource usage information. 
In other words, it is a process that is responsible for assigning pods to the available worker nodes.

Controller Manager

The Controller manager is also known as a controller. It is a daemon that executes in the non-terminating control loops. The controllers in a master node perform a task and manage the state of the cluster. In the Kubernetes, the controller manager executes the various types of controllers for handling the nodes, endpoints, etc.

ETCD

It is an open-source, simple, distributed key-value storage which is used to store the cluster data. It is a part of a master node which is written in a GO programming language.

Now, we have learned about the functioning and components of a master node; let's see what is the function of a slave/worker node and what are its components.

Worker/Slave node

The Worker node in a Kubernetes is also known as minions. A worker node is a physical machine that executes the applications using pods. It contains all the essential services which allow a user to assign the resources to the scheduled containers.

Following are the different components which are presents in the Worker or slave node:

Kubelet 

This component is an agent service that executes on each worker node in a cluster. It ensures that the pods and their containers are running smoothly. Every kubelet in each worker node communicates with the master node. It also starts, stops, and maintains the containers which are organized into pods directly by the master node.

Kube-proxy

It is a proxy service of Kubernetes, which is executed simply on each worker node in the cluster. The main aim of this component is request forwarding. Each node interacts with the Kubernetes services through Kube-proxy.

Pods

A pod is a combination of one or more containers which logically execute together on nodes. One worker node can easily execute multiple pods.

Installation of Kubernetes on Linux

The installation of Kubernetes on Linux is a straight forward process. Follow the below steps to install the Kubernetes. In the installation of Kubernetes, each step is mandatory.

Step 1: In this step, we have to update the necessary dependencies of a system using two commands.

The first command is used to get all the updates. Execute the following command in the terminal; it will ask to enter the system's password.

sudo apt-get update 

When the first command is successfully executed, type the following second command, which is used to make the repositories. 

sudo apt-get install -y apt-transport-https 

Step 2: After the above steps are successfully executed, we have to install the dependencies of docker in this step.

Type the following command to install the docker. In the installation process, we have to choose Y for confirmation of the installation.

sudo apt install docker.io 

After installing the docker, we have to type the different two commands for starting and enabling the docker. Type the following first command, which starts the docker:

sudo systemctl start docker 

Now, type the following second command, which enables the docker:

sudo systemctl enable docker 

Now, we can check the version of docker by typing the following command:

Docker -version 

Step 3: After the successful execution of all the commands of the second step, we have to install the curl command. The curl is used to send the data using URL syntax.

Now, install the curl by using the following command. In the installation, we have to type Y.

sudo apt-get install curl 

Now, we have to download the add package key for Kubernetes by the following command:

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add 

If you get an error from the above command, then it means your curl command is not successfully installed, so first install the curl command, and again run the above command.

Now, we have to add the Kubernetes repositories by the following command:

sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main" 

After the successful execution of the above command, we have to check any updates by executing the following command:

sudo apt-get update 

Step 4: After the execution of the above commands in the above steps, we have to install the components of Kubernetes by executing the following command:

sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni 

Step 5: After the above installation is done, we have to initialize the kubeadm by executing the following command. The following command disables the swapping on other devices:

sudo swapoff -a 

Now, we have to initialize the kubeadm by executing the following command:

sudo kubeadm init 

Step 6: After the above command is successfully executed, we have to run the following commands, which are given in the initialization of kubeadm. These commands are shown in the above screenshot. The following commands are used to start a cluster:

mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 

Step 7: In this step, we have to deploy the paths using the following command:

sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 

Step 8: After the execution of the above command, we have to run the following command to verify the installation:

sudo kubectl get pods --all-namespaces 

If the output is displayed as shown in the above screenshot. It means that the Kubernetes is successfully installed on our system. 

For Videos Join Our Youtube Channel: Join Now 

+ Send your Feedback to [email protected] 

Help Others, Please Share

Learn Latest Tutorials

Splunk

SPSS

Swagger

Transact-SQL

Tumblr

ReactJS

Regex

Reinforcement Learning

R Programming

RxJS

React Native

Python Design Patterns

Python Pillow

Python Turtle

Keras

Preparation

Aptitude

Reasoning

Verbal Ability

Interview Questions

Company Questions

Trending Technologies

Artificial Intelligence

AWS

Selenium

Cloud Computing

Hadoop

ReactJS

Data Science

Angular 7

Blockchain

Git

Machine Learning

B.Tech / MCA

DBMS

Data Structures

DAA

Operating System

Computer Network

Compiler Design

Computer Organization

Discrete Mathematics

Ethical Hacking

Computer Graphics

Software Engineering

Web Technology

Cyber Security

Automata

C Programming

C++

Java

.Net

Python

Programs

Control System

Data Mining

Data Warehouse

Javatpoint Services

JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. 

+ Website Designing
+ Website Development
+ Java Development
+ PHP Development
+ WordPress
+ Graphic Designing
+ Logo
+ Digital Marketing
+ On Page and Off Page SEO
+ PPC
+ Content Development
+ Corporate Training
+ Classroom and Online Training
+ Data Entry

Training For College Campus

JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] 
Duration: 1 week to 2 week

Like/Subscribe us for latest updates or newsletter 

Learn Tutorials

Learn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial

Our Websites

Javatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com

Our Services

Website Development

Android Development

Website Designing

Digital Marketing

Summer Training

Industrial Training

College Campus Training

Contact

Address: G-13, 2nd Floor, Sec-3

Noida, UP, 201301, India

Contact No: 0120-4256464, 9990449935

Contact Us Subscribe Us Privacy PolicySitemap
About Me

(c) Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.


=======asdf27======== Q\Go K8s\$\1c99e71f9063cd0a2a6b9b31457e0896.txt
https://www.infoworld.com/article/3173266/4-reasons-you-should-use-kubernetes.html
TITLE: 4 reasons you should use Kubernetes | InfoWorld

Welcome! Here are the latest Insider stories.

+ Choosing your Java IDE 
+ JetBrains Fleet: The future of IDEs? 
+ Review: Visual Studio Code shines for Java 
+ Review: Redpanda gives Kafka a run for its money 

More Insider Sign Out 

NEW Insider PRO Learn More 

Latest Insider

+ Review: YugabyteDB does PostgreSQL proud 
+ Review: Databricks Lakehouse Platform 
+ Review: The 10 best JavaScript editors 
+ Review: The 6 best JavaScript IDEs 

NEW FROM IDG

Learn More

Welcome! Check out the latest Insider stories here.

More from the Foundry Network

+ About Us | 
+ Contact | 
+ Republication Permissions | 
+ Privacy Policy | 
+ Cookie Policy | 
+ Member Preferences | 
+ Advertising | 
+ Foundry Careers | 
+ Ad Choices | 
+ E-commerce Links | 
+ California: Do Not Sell My Personal Info | 

+ Follow Us 
+ 
+ 
+ 

What is Kubernetes? Your next application platform

RELATED STORIES 

IBM chases Google, Microsoft with Kubernetes in the cloud

SPONSORED BY Advertiser Name Here Sponsored item title goes here as designed 

InfoWorld's 2017 Technology of the Year Award winners

What's new in Kubernetes 1.22

+ Home 
+ Containers 
+ Kubernetes 

New Tech Forum

By Sirish Raghuram, InfoWorld | 

About | 

Emerging tech dissected by technologists

4 reasons you should use Kubernetes

Kubernetes allows you to deploy cloud-native applications anywhere and manage them exactly as you like everywhere 

+ 
+ 
+ 
+ 
+ 
+ 
+ 

Thinkstock 

As most modern software developers can attest, containers have provided us with dramatically more flexibility for running cloud-native applications on physical and virtual infrastructure. Containers package up the services comprising an application and make them portable across different compute environments, for both dev/test and production use. With containers, it's easy to quickly ramp application instances to match spikes in demand. And because containers draw on resources of the host OS, they are much lighter weight than virtual machines. This means containers make highly efficient use of the underlying server infrastructure.

So far so good. But though the container runtime APIs are well suited to managing individual containers, they're woefully inadequate when it comes to managing applications that might comprise hundreds of containers spread across multiple hosts. Containers need to be managed and connected to the outside world for tasks such as scheduling, load balancing, and distribution, and this is where a container orchestration tool like Kubernetes comes into its own.

An open source system for deploying, scaling, and managing containerized applications, Kubernetes handles the work of scheduling containers onto a compute cluster and manages the workloads to ensure they run as the user intended. Instead of bolting on operations as an afterthought, Kubernetes brings software development and operations together by design. By using declarative, infrastructure-agnostic constructs to describe how applications are composed, how they interact, and how they are managed, Kubernetes enables an order-of-magnitude increase in operability of modern software systems.

Kubernetes was built by Google based on its own experience running containers in production, and it surely owes much of its success to Google's involvement. Google has some of the most talented software developers on the planet, and it runs some of the largest software services by scale. This combination ensured that Kubernetes would became a rock-solid platform that can meet the scaling needs of virtually any organization. This article explains why Kubernetes is important and why it marks a significant step forward for devops teams.

An infrastructure framework for today

These days, developers are called on to write applications that run across multiple operating environments, including dedicated on-prem servers, virtualized private clouds, and public clouds such as AWS and Azure. Traditionally, applications and the tooling that support them have been closely tied to the underlying infrastructure, so it was costly to use other deployment models despite their potential advantages. This meant that applications became dependent on a particular environment in several respects, including performance issues related to a specific network architecture; adherence to cloud provider-specific constructs, such as proprietary orchestration techniques; and dependencies on a particular back-end storage system.

PaaS tries to get around these issues, but often at the cost of imposing strict requirements in areas like programming languages and application frameworks. Thus, PaaS is off limits to many development teams.

Kubernetes eliminates infrastructure lock-in by providing core capabilities for containers without imposing restrictions. It achieves this through a combination of features within the Kubernetes platform, including Pods and Services.

Better management through modularity

Containers allow applications to be decomposed into smaller parts with clear separation of concerns. The abstraction layer provided for an individual container image allows us to fundamentally rethink how distributed applications are built. This modular approach enables faster development by smaller, more focused teams that are each responsible for specific containers. It also allows us to isolate dependencies and make wider use of well-tuned, smaller components.

But this can't be achieved by containers alone; it requires a system for integrating and orchestrating these modular parts. Kubernetes achieves this in part using Pods-typically a collection of containers that are controlled as a single application. The containers share resources, such as file systems, kernel namespaces, and an IP address. By allowing containers to be collocated in this manner, Kubernetes removes the temptation to cram too much functionality into a single container image.

The concept of a Service in Kubernetes is used to group together a collection of Pods that perform a similar function. Services can be easily configured for discoverability, observability, horizontal scaling, and load balancing.

Deploying and updating software at scale

Devops emerged as a method to speed the process of building, testing, and releasing software. Its corollary has been a shift in emphasis from managing infrastructure to managing how software is deployed and updated at scale. Most infrastructure frameworks don't support this model, but Kubernetes does, in part through Kubernetes Controllers. Thanks to controllers, it's easy to use infrastructure to manage the application lifecycle.

The Deployment Controller simplifies a number of complex management tasks. For example:

+ Scalability. Software can be deployed for the first time in a scale-out manner across Pods, and deployments can be scaled in or out at any time. 
+ Visibility. Identify completed, in-process, and failing deployments with status querying capabilities. 
+ Time savings. Pause a deployment at any time and resume it later. 
+ Version control. Update deployed Pods using newer versions of application images and roll back to an earlier deployment if the current version is not stable. 

Among other possibilities, Kubernetes simplifies a few specific deployment operations that are especially valuable to developers of modern applications. These include the following:

+ Horizontal autoscaling. Kubernetes autoscalers automatically size a deployment's number of Pods based on the usage of specified resources (within defined limits). 
+ Rolling updates. Updates to a Kubernetes deployment are orchestrated in "rolling fashion," across the deployment's Pods. These rolling updates are orchestrated while working with optional predefined limits on the number of Pods that can be unavailable and the number of spare Pods that may exist temporarily. 
+ Canary deployments. A useful pattern when deploying a new version of a deployment is to first test the new deployment in production, in parallel with the previous version, and scale up the new deployment while simultaneously scaling down the previous deployment. 

Unlike traditional, all-inclusive PaaS offerings, Kubernetes provides wide latitude for the types of applications supported. It doesn't dictate application frameworks (such as Wildfly), restrict the supported language runtimes (Java, Python, Ruby), cater to only 12-factor applications, or distinguish "apps" from "services." Kubernetes supports a wide variety of workloads, including stateless, stateful, and data-processing workloads. If an application can run in a container, it should run well on Kubernetes.

Laying the foundation for cloud-native apps

Not surprising given the interest in containers, other management and orchestration tools have emerged. Popular alternatives include Apache Mesos with Marathon, Docker Swarm, AWS EC2 Container Service (ECS), and HashiCorp's Nomad.

Each has its merits. Docker Swarm is bundled tightly with the Docker runtime, so users can transition easily from Docker to Swarm; Mesos with Marathon is not limited to containers, but can deploy any kind of application; AWS ECS is easier to access by current AWS users. However, Kubernetes clusters can run on EC2 and integrate with services such as Amazon Elastic Block Storage, Elastic Load Balancing, Auto Scaling Groups, and so on.

These frameworks are starting to duplicate each other in features and functionality, but Kubernetes remains immensely popular due to its architecture, innovation, and the large open source community around it.

Kubernetes marks a breakthrough for devops because it allows teams to keep pace with the requirements of modern software development. In the absence of Kubernetes, teams have often been forced to script their own software deployment, scaling, and update workflows. Some organizations employ large teams to handle those tasks alone. Kubernetes allows us to derive maximum utility from containers and build cloud-native applications that can run anywhere, independent of cloud-specific requirements. This is clearly the efficient model for application development and operations we've been waiting for.

New Tech Forum provides a venue to explore and discuss emerging enterprise technology in unprecedented depth and breadth. The selection is subjective, based on our pick of the technologies we believe to be important and of greatest interest to InfoWorld readers. InfoWorld does not accept marketing collateral for publication and reserves the right to edit all contributed content. Send all inquiries to newtechforum@infoworld.com.

Related: 

+ Kubernetes 
+ Containers 
+ Data Center 
+ Cloud Computing 
+ Devops 
+ Docker 

Copyright (c) 2017 IDG Communications, Inc.

How to choose a low-code development platform 

InfoWorld Follow us 

+ About Us 
+ Contact 
+ Republication Permissions 
+ Privacy Policy 
+ Cookie Policy 
+ Member Preferences 
+ Advertising 
+ Foundry Careers 
+ Ad Choices 
+ E-commerce Links 
+ California: Do Not Sell My Personal Info 

Copyright (c) 2022 IDG Communications, Inc.


=======asdf28======== Q\Go K8s\$\a8a14b4059ce43af435f9e75f51d4735.txt
https://www.site24x7.com/learn/kubernetes/introduction-to-kubernetes.html
TITLE: Introduction to Kubernetes | What is Kubernetes: Site24x7

Track uptime for website, APIs, and applications using synthetic checks.

Server 

Monitor workloads on servers, virtual machines, and containers.

Cloud 

Gain insights into AWS, Microsoft Azure, and GCP cloud resources.

Network 

Monitor health for critical network devices to ensure reliability.

Plugin Integrations 

Monitor applications and services in your server or network by writing custom plugins.

APM Insight 

Troubleshoot performance issues in production applications.

Real User Monitoring (RUM) 

Manage digital experience of real users on websites, web apps, and SPAs.

Log Management 

Monitor and troubleshoot using logs from different sources.

CloudSpend 

Everything you need to visualize and understand AWS spend.

StatusIQ 

Hosted status pages for incident communication.

MSP 

Remote infrastructure monitoring for MSPs

ManageEngine On-Premises ITOM 

+ Plans and Pricing 
+ Features 
+ 

Customers Solutions Case studies Webinars Blogs IT Glossary 

Learn Community Help docs API All Resources 

+ Free Tools 
+ Support 

Login 

SIGN UP 

+ Learn 
+ Kubernetes 
+ Introduction to Kubernetes 

Introduction to Kubernetes

Sections 

Introduction to Kubernetes

+ What is Kubernetes 
+ What problem does Kubernetes solve? 
+ How does Kubernetes work? 
+ What are the components in Kubernetes? 
+ Why do you need Kubernetes? 
+ Implementation stories 

Kubernetes bills itself as a production-grade container orchestration tool. However, what does all of that mean? To understand, you have to go back in time to learn about the web hosting business. It's here that you'll learn how things developed, and what problems were solved by introducing Kubernetes.

You also have to understand what a container is, and how this type of hosting has evolved over time. Kubernetes was invented by Google to solve problems it had with its own infrastructure. A company like Google has hundreds of thousands of servers that it needs to manage, and it is in this backdrop that Kubernetes was created. 

Let's break down all the terminology introduced above about Kubernetes. The first thing you need to know is that it manages containers. What is a container? A container is a method of isolating applications on a server, similar to a virtual private server (VPS). However, a container reuses the same Linux kernel for every instance. If one container were to crash the Linux kernel, it would bring down the whole system. 

The dark days of web hosting involved first bare-metal, then virtual private servers. These methods of managing websites and services had a huge problem: They were expensive, yet they were not flexible or scalable enough to do a good enough job for most websites. For example, you had to pay for enough servers for the month, and if you needed more, you would have to pay on the spot for an additional month. You ended up using either too many or too few server resources for the amount of money you paid. Virtual server software solved part of this problem, but it was the same thing on a smaller scale. This is why cloud hosting and containerization came into play. 

The problem with web hosting is that it isn't growing to your specific needs at that time. You can't provision the exact amount of server resources you will need at every instant. That's why you need to be able to acquire and release server resources at a moment's notice. Your website might have traffic spikes, but it might also have periods where there are very few people visiting. Why would you pay for all those resources when you aren't using them? Containers were created to manage this, and one of the most popular apps for managing containers is called Docker.

What problem does Kubernetes solve?

Since we're moving towards a future where we use containers instead of private servers or bare-metal servers, we will see tools like Kubernetes being used more often. What Kubernetes does is quite magical: It is an effective way of managing all of your container infrastructure in one simple-to-use application. Every Kubernetes tutorial starts out with this fundamental fact. 

So, what is Kubernetes? It is a tool that helps you deploy, scale, and manage your applications with ease. It can do things like service discovery and load balancing, and you can even orchestrate your storage file systems. It automates DNS service, and it is self-healing. Kubernetes makes it possible for organizations to have only the infrastructure they need, when it is needed. This saves you a lot of money when you're not getting a lot of traffic, and will help your server stay up when it inevitably gets a few traffic spikes. When it comes to Kubernetes versus Docker, Kubernetes does a much better job as an open-source application, and you can even work with Docker in certain instances.

How does Kubernetes work? 

The basic unit of Kubernetes is a cluster, which is a group of servers that work together to form a cohesive unit. You need to have one server in charge of managing the other servers, and then you have the notes that will actually run the containers. The master server is called the control plane. Each worker node hosts a group of containers in what is called a pod. Kubernetes then makes this system better by managing the control plane and the cluster across multiple nodes. This makes it resistant to one server crashing or physically dying. Here is what it looks like: 

What are the components in Kubernetes?

The control plane has certain components that include an API server, a key-value store that is responsible for being a quasi-database, and a scheduler. There's also the controller manager, which is responsible for managing that service. You can also embed cloud-specific logic with the cloud controller manager. 

Each node also has its own components that provide the runtime environment for Kubernetes. These components include kubelet, which is the agent that runs on each node, and is what actually manages the containers in the node to make sure that they're doing fine. 

Then there is the proxy service, which maintains network rules for each node.

Finally, the most important piece of software on each node is a container runtime. This is the software that is actually responsible for running the container.

Kubernetes can actually have other add-ons as well, and you will frequently use them. Add-ons include DNS, a web user interface, container resource monitoring software, and finally, logging.

Why do you need Kubernetes?

Every company that has more than a few containers needs Kubernetes. It simplifies the work of managing and scaling your web backend. Without it, you will have to spend time using SSH to log in to every server to keep it up and running. Using something like Kubernetes will allow you to simplify your entire infrastructure, and require less staff on hand to manage everything.

Implementation stories

One of the world's leading digital travel companies was able to build its cloud infrastructure by using Kubernetes to manage it all. Another leading health service providing company was able to leverage Kubernetes to build its AI and machine learning computer infrastructure. The flexibility that Kubernetes provides could not be achieved with any other software.

Was this article helpful? 

Yes No 

Sorry to hear that. Let us know how we can improve the article. 

Submit Cancel 

Thanks for taking the time to share your feedback. We'll use your feedback to improve our articles. 

Submit </form> 

Write For Us

Write for Site24x7 is a special writing program that supports writers who create content for Site24x7 "Learn" portal. Get paid for your writing.

Apply Now 

Write For Us ^ 

Write for Site24x7 is a special writing program that supports writers who create content for Site24x7 "Learn" portal. Get paid for your writing.

Apply Now 

^ Write For Us 

All-in-One Monitoring Solution

+ Website 
+ Synthetic 
+ Server 
+ Public and Private Cloud 
+ Network 
+ Application Performance 
+ Real User Monitoring 
+ CloudSpend 
+ MSP 

Website

+ Website Monitoring 
+ Real User Monitoring 
+ Web Page Speed Monitoring 
+ Synthetic Monitoring 
+ Monitoring Locations 
+ Mail Server Monitoring 
+ DNS Monitoring 
+ Website Availability Monitoring 
+ Web Application Monitoring 
+ SSL Certificate Monitoring 
+ FTP Monitoring 
+ Monitor Internal Network 
+ Hosted Status Pages 
+ REST API Monitoring 
+ SOAP Monitoring 

Server

+ Server Monitoring 
+ VMware Monitoring 
+ Nutanix Monitoring 
+ Windows Monitoring 
+ Linux Monitoring 
+ Site24x7 Plugins 
+ IIS Monitoring 
+ SQL Monitoring 
+ MS Exchange Server 
+ StatsD Metrics Monitoring 
+ Prometheus Monitoring 
+ Docker Monitoring 
+ Kubernetes Monitoring 
+ IT Automation 
+ Cron Monitoring 

Infrastructure Monitoring 

Cloud

+ Cloud Monitoring 
+ AWS Monitoring 
+ Azure Monitoring 
+ GCP Monitoring 

CloudSpend 

APM

+ Application Performance Monitoring 
+ What is APM 
+ Java Performance Monitoring 
+ .NET Performance Monitoring 
+ Ruby Performance Monitoring 
+ PHP Monitoring 
+ Node.js Performance Monitoring 
+ Real User Monitoring 
+ Mobile Application Monitoring 
+ End User Experience Monitoring 
+ Application Monitoring 
+ Full-stack observability 

Log Management

+ Log Management 
+ Zoom Monitoring 
+ AWS Log Management 

Uptime Monitoring 

VDI Monitoring 

ManageEngine ITOM 

For MSPs/CSPs 

Network

+ Network Monitoring 
+ Network Traffic Monitoring 
+ Network Configuration Manager 
+ VoIP Monitoring 
+ VPN Monitoring 
+ Switch Monitoring 
+ Router Monitoring 
+ Cisco Monitoring 
+ What is SNMP 
+ Network Device Vendors 
+ Network Mapping 
+ Remote Infrastructure Monitoring 

Free Tools

+ Find IP Address 
+ Check Website Availability 
+ Analyze Webpage 
+ DNS Analysis 
+ Find Location 
+ Webpage Speed Test 
+ Free AWS Designer Tool 

Quick Links

+ About Site24x7 
+ Plans & Pricing 
+ Our Customers 
+ Testimonials 
+ Press Release 
+ Events | Newsletter 
+ Contact Support | Request Demo 
+ Become a Partner 
+ What's New 
+ Site24x7 Service Status 
+ Website Performance Benchmarks 

+ Blog 
+ Community 
+ Learn 
+ Help Documentation 
+ API 
+ Webinars 
+ Training 
+ White Paper | Case Studies 
+ IT Survey Report 2020-21 
+ IT Glossary 

Engage with us on

+ Home 
+ Privacy Policy 
+ Terms of Use 
+ Cookie Policy 
+ Security 
+ Sitemap 
+ GDPR Compliance 

Language: English - United States Chinese (Simplified) Chinese (Traditional) Dansk Deutsch Espanol Francais Bahasa Indonesia Italiano Korean ^^^ Nederlands Polski Portuguese Svenska Thai Vietnamese 

Select data center: Site24x7.com Site24x7.eu Site24x7.net.au Site24x7.in Site24x7.cn 

A service by Corp . (c) 2022. All Rights Reserved.


=======asdf29======== Q\Go K8s\$\c8aee51b66ac6e5bb60f6442a9012468.txt
https://www.developer.com/languages/web-development-golang/
TITLE: Web Development with Go (Golang) | Developer.com

The Go language has excellent built-in support for web development and web app programming. There are packages to work with the generic functionalities for implementing networking and Internet protocols, making it easy to use functionality like the Google App engine. In this Go programming tutorial, we introduce some of the features of the Golang standard library that allow us to write code that seamlessly integrates with the web and can be used for creating websites and web applications.

How Does the Web Work?

Before we start learning the ins and outs of Go web development, let's quickly detour and take a look at how the web actually works. The web - and networks in general - always works using the client-server principle. The client is a computer that requests a service via a URL and the server is a computer (or server) that serves the request. The URL (Uniform Resource Locator) is the address that decides which server the client wants to request service from.

In this process, the server usually responds back in the form of a web page, which the client displays in the browser. Therefore, for a normal user, any URL entered in the browser fetches a web page from some server. What actually happens is that, after you type the URL, the host part of the URL is sent to the DNS (Domain Name Server), which maps to the IP (Internet Protocol) address of the host.

Once the IP address is obtained, a TCP (Transmission Control Protocol) connection is set up. Understand that all of this "play" of Internet browsing (client request-server response) is defined by HTTP (HyperText Transfer Protocol) and the server that facilitates this is called an HTTP or web server. TCP/IP contains several protocols for different purposes, such as SMTP for Email service, FTP for file service, HTTP for web service, and so on.

Therefore, the browser sends HTTP requests through a TCP connection, and the server that receives the request, processes or handles it and replies back with an HTTP response. The HTTP response contains the code that makes up the web page. The browser renders the page according to the received code and then disconnects from the server.

Note that the DNS (Domain Name System) is the naming system for computer network services responsible for converting domain names to actual IP addresses.

Read: Intro to Socket Programming in Go

What Is Web Programming and Web Development?

To continue upon the above train of thought, the browser renders a page upon receiving the HTTP response from the server. The response consists of code, typically written in web development languages and scripting languages such as HTML, CSS, and JavaScript. HTML is responsible for constructing the page document, structure, and layout. CSS leverages the look and feel. JavaScript is also used to enhance the functionality of the web page and makes browsing more convenient for the end-user. The request sent from the HTTP client is processed by the server. This processing part is written in one or many server languages such as PHP, Java, C++, Golang, and so forth. Sometimes the processing server also requires a backend database. In that event, database access-specific code is also written, typically using the same language or a language that extends the primary programming language. Web development, therefore, includes writing code in one or all of these web development languages.

Web Development in Go and Golang

The Go programming language is one of the many high-level languages that can be used for web development. The criteria for choosing any one of them can include performance, convenience, learning curve, available libraries, and any other number of considerations. Although the end result is the same, the decisive factor is how quickly and conveniently we can create a web application. PHP, Java, and C# are all excellent and proven in this field. The standard library support of Go, however, makes web development particularly easy, convenient, and quick.

With Golang, web developers simply need the Go compiler and nothing else to get started developing web pages and web apps. The built-in features of Go already include a web server and the net/http package in the standard library, which provides the necessary functions required for working with the HTTP protocol. The HTTP client and HTTP server are part of this library. This makes web programming (at least to begin with ) hassle-free and quick. However, as you dive deeper, there are many twists and turns in web development where we have to use other libraries, languages, and even web frameworks, as well.

Read: Working with XML Files in Go

The Go Web Server

The stub web server of the net/http package delegates the handling of requests in our code. It follows the following four basic principles:

+ Request: user data request using POST, GET, COOKIE, and URL.

+ Response: response back to the client.

+ Connection: establish a TCP connection between the client and server.

+ Handler: processing of the request received (also business logic). 

Once the web server is up, it creates a listening socket at the specific port and waits for the connection request from the client. The process includes:

+ Listening socket is created and waits for client connection. 
+ Accepts requests received from the client. 
+ Process request: reads the HTTP header and checks if it is a POST method. Reads the message and passes it to the handler for processing and finally responds back to the client. 

Go Web Server Example Code

Let us write some simple and minimal code to illustrate how to create a web server in Go. We will assume the Go compiler is installed properly on your system. Type the following (Linux) commands to begin:

$ mkdir webprojects
$ mkdir webprojects/project1
$ cd webprojects/project1
$ nano main.go

If you are using the Visual Code IDE, replace:

$ nano main.go 

with:

$ code main.go

Next, type the following Go code to create the web server:

package main
import (
"fmt"
"net/http"
)
func greetHandler(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "<h1>Welcome to my home page</h1>")
fmt.Fprintf(w, "Requested URL path = %s", r.URL.Path)
}
func main() {
http.HandleFunc("/", greetHandler)
fmt.Println("Starting server at port 9999...")
http.ListenAndServe(":9999", nil)
}
$ go run main.go

The server should start running. Open the browser and type the following into the address bar: http://localhost:9999, followed by pressing Enter. The browser should keep running. To stop it, just press Ctrl+C.

Read: Working with JSON Files in Go

Understanding the Go Web Server Code

ResponseWriter implements the io.Writer interface; as a result, it can be used with the functions from the fmt package. We can embed HTML code and print them in the client area of the browser using http.ResponseWriter.

The function HandleFunc registers the handler function named greetHandler for the given pattern in the defaultServeMux used by the server. ServeMux is the HTTP request multiplexer responsible for matching the incoming request against the registered pattern and calls the appropriate handler for the pattern. In our case the pattern is given "/", which means a request to the URL http://localhost:9999 will be handled by the greetHandler function.

Add another handler, such as the thanksHandler function, as follows:

func thanksHandler(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "<h1>Thanks. Visit again.</h1>")
}

Next, register this handler as well with func main:

func main() {
http.HandleFunc("/", greetHandler)
http.HandleFunc("/thanks", thanksHandler)
fmt.Println("Starting server at port 9999...")
http.ListenAndServe(":9999", nil)
}

Next, register this handler as well with func main:

func main() {
http.HandleFunc("/", greetHandler)
http.HandleFunc("/thanks", thanksHandler)
fmt.Println("Starting server at port 9999...")
http.ListenAndServe(":9999", nil)
}

Now, as you type the URL http://localhost:9999/thanks, this will invoke the thanksHandler.

The ListenAndServe listens on the TCP network address and then calls Serve with a handler to handle requests on incoming connections. Here the address value indicates the port number that the server will keep listening to for any incoming client request. The handler is typically nil, in which case the default ServeMux is used.

Final Thoughts on Go Web Development

The Golang creators are stalwarts in web technology, hence it is no surprise that the language has excellent standard library support for the Internet. For example, the textproto package implements generic support for text-based request-response protocols like HTTP, NNTP, and SMTP. Here, we have only touched the tip of the iceberg. Even the http package has a lot of other functionalities, which we will explore in future Golang web development tutorials.

Read more Go and Golang programming tutorials.

Share

Linkedin

Latest Posts

An Introduction to Using Constructors in Java

Java 

Introduction to Using Threads in Java

Java 

The Best Tools For Remote Developers

Project Management 

Introduction to Hashing in Java

Java 

Understanding Memory Leaks in Java

Java 

Related Stories

Languages 

How to Represent a Matrix in Go

Manoj Debnath - June 24, 2022 

Languages 

Mapping Event Codes to Keys in Python

Phil Hajjar - June 21, 2022 

Languages 

Reading Keyboard Events with Python

Phil Hajjar - June 21, 2022 

Developer.com features tutorials, news, and how-tos focused on topics relevant to software engineers, web developers, programmers, and product managers of development teams. In addition to covering the most popular programming languages today, we publish reviews and round-ups of developer tools that help devs reduce the time and money spent developing, maintaining, and debugging their applications. This includes coverage of software management systems and project management (PM) software - all aimed at helping to shorten the software development lifecycle (SDL).

Linkedin

Advertisers

Advertise with TechnologyAdvice on Developer.com and our other developer-focused platforms.

Advertise with Us

Menu

+ Privacy Policy 
+ Terms 
+ About 
+ Contact 
+ Advertise 
+ California - Do Not Sell My Information 

Our Brands

Privacy Policy

Terms

Contact

Advertise

California - Do Not Sell My Information

Property of TechnologyAdvice.
(c) 2022 TechnologyAdvice. All Rights Reserved

Advertiser Disclosure: Some of the products that appear on this site are from companies from which TechnologyAdvice receives compensation. This compensation may impact how and where products appear on this site including, for example, the order in which they appear. TechnologyAdvice does not include all companies or all types of products available in the marketplace.


=======asdf30======== Q\Go K8s\$\2bd3fdd2567cca7ee206b3134af78c30.txt
https://www.infoworld.com/article/3629750/4-reasons-to-get-kubernetes-certified-and-4-reasons-not-to.html
TITLE: 4 reasons to get Kubernetes-certified, and 4 reasons not to | InfoWorld

Welcome! Here are the latest Insider stories.

+ Choosing your Java IDE 
+ JetBrains Fleet: The future of IDEs? 
+ Review: Visual Studio Code shines for Java 
+ Review: Redpanda gives Kafka a run for its money 

More Insider Sign Out 

NEW Insider PRO Learn More 

Latest Insider

+ Review: YugabyteDB does PostgreSQL proud 
+ Review: Databricks Lakehouse Platform 
+ Review: The 10 best JavaScript editors 
+ Review: The 6 best JavaScript IDEs 

NEW FROM IDG

Learn More

Welcome! Check out the latest Insider stories here.

More from the Foundry Network

+ About Us | 
+ Contact | 
+ Republication Permissions | 
+ Privacy Policy | 
+ Cookie Policy | 
+ Member Preferences | 
+ Advertising | 
+ Foundry Careers | 
+ Ad Choices | 
+ E-commerce Links | 
+ California: Do Not Sell My Personal Info | 

+ Follow Us 
+ 
+ 
+ 

How to nail the Kubernetes certification exams

RELATED STORIES 

What's new in Kubernetes 1.22

SPONSORED BY Advertiser Name Here Sponsored item title goes here as designed 

VMware's new Tanzu platform aims to unify Kubernetes development

How Docker broke in half

+ Home 
+ Containers 
+ Kubernetes 

4 reasons to get Kubernetes-certified, and 4 reasons not to

What are the most important Kubernetes certifications and are they worth it? Here are four reasons to get certified, and four reasons to think better of it.

+ 
+ 
+ 
+ 
+ 
+ 
+ 

By Scott Carey 

Managing Editor, News, InfoWorld | 

Thinkstock 

Container orchestration with Kubernetes is one of the most in-demand skills in technology today, but it is also hard, with many IT professionals deciding to pursue certifications to prove their chops. But are these certifications worth the time and money?

The answer to that question will of course depend on the individual and their unique goals, but what is certain is that certifications can be a useful way to open doors to a new career path.

"Demand and salaries for highly-skilled and qualified tech talent are fiercer than ever, and certifications present a clear pathway for IT professionals to further their careers," Dave Walters, CTO at tech hiring specialist Hired, told InfoWorld.

As competition for cloud-native talent remains fierce, "recruiters are increasingly prioritizing skills over pedigree," Walters said. "Candidates with strong certifications can not only validate their IT skills, strengthen their resumes, and set themselves apart from other top talent, but [certifications] are a good indicator to recruiters and employers of someone's dedication to continuous learning and development."

What are the Kubernetes certifications?

First launched in 2017, there are three primary Kubernetes certifications under the Cloud Native Computing Foundation (CNCF) and Linux Foundation banners. A fourth, an associate level certification for beginners, is currently in development. The three established certificates are:

+ Certified Kubernetes Application Developer (CKAD), which aims to certify that an engineer can design, build, configure, and expose cloud-native applications for Kubernetes. 
+ Certified Kubernetes Administrator (CKA), which aims to certify users who can perform the basic responsibilities of a Kubernetes administrator, including the installation, configuration, and management of production-grade Kubernetes clusters. 
+ Certified Kubernetes Security Specialist (CKS), an advanced certification that requires a CKA certification first. It aims to certify the skills required to secure container-based applications and Kubernetes platforms during the build, deployment, and runtime phases. 

"For the CNCF, the aim for these three certifications is to be truly vendor-neutral and multicloud, based off of community input," CNCF CTO Chris Aniszczyk told InfoWorld.

The exams, like Kubernetes itself, are difficult, with a cumulative pass rate hovering around the 30% to 40% mark. They can be taken through the CNCF or Linux Foundation via an online, proctored, hands-on test, where candidates are asked to perform a set of administrative tasks in two hours using a command line running Kubernetes.

The Linux Foundation typically bundles these certifications with courses for about $575. The exam alone costs $375, with one free retake allowed. The curriculum is adjusted with every major new release of Kubernetes, which is now three times a year.

4 reasons for getting a Kubernetes certification

1. A Kubernetes certification can help you land a new role

As with any professional qualification, a Kubernetes certification is most often pursued as a means to professional development, whether that is landing your first role in tech or pivoting into a cloud-native role.

"When we talk to employers, we want to make sure they find this stuff useful when hiring or pivoting a team to Kubernetes," Aniszczyk said.

"Landing a role in tech can be a chicken-and-egg problem. You need relevant expertise to get roles, but you need a role to get the relevant expertise. Certifications can break the cycle and lift people out of a rut when they don't have expertise yet. This is a very common story-and for those people, certification is absolutely worth it," Alex Chan, software developer at the Wellcome Collection, wrote in a blog post about AWS certifications specifically.

In other words, a certification may help you get your foot in the door, but evidence of some experience working with Kubernetes will likely be required to get past the interview stage with most employers.

2. A Kubernetes certification will help you get into devops

Kubernetes skills are the most in demand for modern operational roles, such as devops and site reliability engineering (SRE) jobs. These are also the roles where the money is. In the United States, 95% of devops practitioners made more than $75,000 a year in salary in 2020, up from 93% in 2019. In Europe and the UK, where salaries are lower across the board, 71% of devops practitioners made more than $50,000 a year in 2020, up from 67% in 2019, according to the 2020 Puppet Devops Salary Report.

For sysadmins looking to move into a devops or SRE role, some evidence of hands-on experience working with Kubernetes is often a requirement, but a certification is just another way to show off your proficiency in and commitment to cloud-native development techniques.

3. You'll learn some things

It may sound simple, but embarking on a certification is a pretty sure-fire way to ensure you learn the basics around Kubernetes.

"It is important to take that learning journey," Saiyam Pathak, who has written a book on how to pass the CKS exams, told InfoWorld. That journey starts "from what Kubernetes is [and goes] to the objects and key elements up the stack. It is the baseline for when you start working at an organization managing Kubernetes clusters as an administrator. You can't skip it, you can't guess your way through the exam, so you have to struggle through that learning journey."

Even if your organization doesn't value these certifications specifically, they are solid evidence that you went through that learning journey. "The reason I did the exams was mostly to have the self-certification that I actually know the things I should have learned during that course," said fully certified devops engineer Tobias Nehrlich.

There are alternative routes to learning these skills, many of which are also free, but for many people, committing to a certification is the best way to ensure they get through the whole process. "It's more about how I learn. I have a lot of things I want to learn and often will get attracted to the next thing. If you have set a goal and you pay for it, or apply for a scholarship, you are more likely to achieve that goal," said CKAD-certified data engineer Chin Hwee Ong.

4. Your company values certification

A lot of the time, getting certifications is just part of a normal corporate learning path, with companies paying for the courses and allowing time off for preparation and exams. These certifications let managers show their bosses that they are keeping their team sharp and help employees stay up to date with modern techniques.

"I have so many certificates and work at a company that really values certificates," said Walid Shaari, a fully certified platform engineer at energy firm Aramco. "It adds value to management to show you have spent time to pursue technical expertise and are staying up to date."

Reasons against a Kubernetes certification

1. A Kubernetes certification probably won't land you a job

For engineers with experience using these technologies on a day-to-day basis, a certification probably isn't as valuable as evidence of that experience. However, for experienced engineers looking to shift their career direction-say, from on-premises development to cloud, or from virtual machines to containers-a certification could be a handy first step toward that goal. "If you are coming from a background with no experience in Kubernetes, I can see the value there," devops engineer Nehrlich said.

Fully certified cloud consultant Borko Djurkovic sees cloud certifications from the likes of AWS, Microsoft Azure, and Google Cloud as highly valuable in his line of work, especially when it comes to working with public-sector clients, while the Kubernetes certifications aren't at that stage of maturity yet. "I haven't seen any roles that require these certifications, so they are more a nice-to-have," he told InfoWorld.

"They are not often a hard requirement and, unless you have relevant experience to show you can do this work, the certification doesn't validate anything," Djurkovic said. "My suggestion would be to learn the technology, and the certification is a nice way to validate that for yourself."

2. A Kubernetes certification probably won't net you more money

Similarly, no one InfoWorld spoke to said that Kubernetes certifications had helped them negotiate for a higher salary or a better job. So, if you are looking to boost your earnings, a Kubernetes certification is probably not the answer.

"I don't get more money at my job; I don't want to go somewhere else where I have to show a certification. It is more for me to prove to myself that I have learned the things," Nehrlich said.

3. A Kubernetes certification won't help you be a better software developer

It's important to note that these certifications, even the one with "developer" in the title, don't actually involve much coding. "The CKAD doesn't involve developing anything; it is testing your ability to deploy a microservices-based application," platform engineer Shaari said.

If you are pursuing a career as a software developer, getting a Kubernetes certification could certainly help you round out your knowledge of where those applications typically reside in a modern, Kubernetes-based environment, but they probably aren't going to help you develop better software or push forward your career in a pure coding role.

4. You could lose focus on what really matters

It is important to remember that certifications aren't necessarily a means to an end, but rather a handy way to learn a new technology and skills. "It is more about gaining the skills than the job prospects," data engineer Ong said. "I am trying to add tools to my toolbox, and Kubernetes is a key tool in my toolbox as a data engineer."

Shaari said, "I like certifications, because you learn things you might not need in your job that you could use. However, it is easy to become addicted and forget that the objective is not the certification but gaining the skills and knowledge the organization is looking for."

Related: 

+ Kubernetes 
+ Cloud-Native 
+ Containers 
+ Devops 
+ Software Development 
+ Careers 

Scott Carey is a Managing Editor for news across Foundry's five B2B brands-Computerworld, CIO, CSO, Network World and InfoWorld.

Follow

Copyright (c) 2021 IDG Communications, Inc.

How to choose a low-code development platform 

InfoWorld Follow us 

+ About Us 
+ Contact 
+ Republication Permissions 
+ Privacy Policy 
+ Cookie Policy 
+ Member Preferences 
+ Advertising 
+ Foundry Careers 
+ Ad Choices 
+ E-commerce Links 
+ California: Do Not Sell My Personal Info 

Copyright (c) 2022 IDG Communications, Inc.


=======asdf31======== Q\Go K8s\$\ba520b2f6900da40e8c7ef92f1c0e93e.txt
https://www.techtarget.com/searchapparchitecture/tip/A-language-comparison-of-Ballerina-vs-Golang
TITLE: A 7-point language comparison of Ballerina vs. Golang

SearchAppArchitecture Search the TechTarget Network </form> Sign-up now. Start my free, unlimited access. 

Login Register 

+ Techtarget Network 
+ News 
+ Features 
+ Tips 
+ Webinars 
+ More Content 

+ Answers 
+ Definitions 
+ Essential Guides 
+ Opinions 
+ Photo Stories 
+ Podcasts 
+ Quizzes 
+ Tutorials 
+ Sponsored Communities 

SearchAppArchitecture 

Topic Application development and design 

+ API design and management 
+ Application management tools and practices 
+ Application integration 
+ Enterprise architecture management 
+ All Topics 

+ Follow: 
+ 
+ 

Getty Images/iStockphoto

Tip 

A 7-point language comparison of Ballerina vs. Golang

This comparison takes a look at both Ballerina and Golang, including their support for high-level programming, libraries, built-in management features and community support.

By 

+ Kerry Doyle 

Published: 30 Jun 2022 

As organizations increase their cloud-native application deployment and microservices development efforts, programmers require fast executions, external APIs and efficient error handling. This includes an array of capabilities such as static type systems, clean syntax, native builds and application process concurrency. Designed to capitalize on claims that established languages like C, C++ and Java fail to deliver these capabilities, both Ballerina and Golang (also referred to as Go) offer innovative, language-specific capabilities that hold a lot of appeal.

This article examines the notable differences and similarities between Ballerina vs. Golang. Specifically, we'll focus on seven specific areas:

+ concurrency and parallel processing; 
+ container and API support; 
+ network abstractions and data structure support; 
+ observability and reliability; 
+ testing and error handling; 
+ integrations and configurations; and 
+ libraries and communities. 

Concurrency and parallel processing

Concurrency and optimization are essential as distributed services increasingly gain dominance in development shops. Concurrency employs the manager/worker model of parallel programming to boost the number of transactions per second and to improve performance.

This is a common feature in both languages. Golang introduces concurrency in the form of goroutines to execute functions asynchronously and communicate values. Meanwhile, Ballerina uses lightweight communication mechanisms for both inbound and outbound interactions, as well as for the fork/join constructs that support multiple parallel executions and data processing tasks.

Container and API support

Ballerina features built-in container support to ease microservices development and cloud-native application builds. Programmers can use Ballerina to annotate code and automatically create Dockerfiles. These Dockerfiles can run as containers and help quickly generate new iterations.

Ballerina also includes library extensions for Kubernetes orchestrations. When programmers want to take advantage of parallel processes and simultaneously execute multiple actions in Ballerina, they can use fork/join constructs to define workers, process results differently, then execute them asynchronously.

Both Ballerina and Golang try to simplify the process of working with APIs. Golang offers a wide array of API development frameworks, and Ballerina treats APIs as first-class entities.

Network abstractions and data structure support

Both languages treat network abstractions (i.e., endpoints, services and methods) as first-class language constructs. For example, developers using Golang can establish dedicated interfaces for specific application behaviors, resulting in a cleaner syntax. Ballerina provides a similar benefit through native constructs.

In Ballerina, developers can use the afore-mentioned constructs to manipulate data structures without the need to call external libraries, because the language's value type system natively supports JSON and XML (along with each one's associated tables, records, maps and primitives). Ballerina also offers built-in sequence diagrams that graphically represent language semantics.

Meanwhile, data structures in Golang are made possible with a collection of unordered pairs of key-values called Golang Maps. This is a versatile data structure that provides fast lookups and values for retrievals, updates or delete with the help of keys, as well as create an index into an array using a hash table implementation.

Observability and reliability

Ballerina incorporates automatic observability features for anomaly detection and internal system-state measurements using response-time statistics, logs, tracings and metrics, and eliminates the need for external library extensions. Programmers can also use the Ballerina Composer tool to create services based on sequence diagrams that illustrate workflows between endpoints, including synchronous and asynchronous calls.

In Ballerina, network-bound payloads require consistent integrity checks at compilation. By incorporating type inference at assignment, Ballerina employs its structural type system to return messages with different payload types and errors. Golang uses a static type system that empowers the compiler to catch erroneous code, while Ballerina offers a flexible type system focused on balancing code clarity with fast development and execution times.

Golang also provides garbage collection capabilities that optimize memory management by ensuring that all dynamically allocated objects are garbage collected. For example, once types are assigned, they're discarded along with instances, which keeps the memory available for future allocations.

Testing and error handling

Both of these languages provide their own dedicated resources for application testing and addressing errors.

Ballerina provides its own built-in test framework, Testerina, which focuses on creating mocks that teams can test in self-contained environments. This supports testing for integrations, functions, services and other components of the application, and provides summary information of the results upon completion.

Similarly, Golang tests offer a configurable way to evaluate individual features or a feature set. Programmers can run these unit tests on code bases using Golang's test module and test command features. They can also run unit tests in various combinations and in different ways to gain greater test coverage.

Finally, Golang allows programmers to decouple code-based dependencies for reuse and testing by employing custom interface types. It allows them to write more modular code, as well as mock any dependencies in tests which limit those tests to a very small scope.

Integrations and configurations

Developers can use Ballerina code to integrate items instead of employing complex configuration-based integration schemes. For example, transformer syntax in Ballerina enables developers to be confident of type safety for customized transformations between different types such as structs and JSON.

Ballerina also allows programmers to add extensions and new functionality to an existing class, structure, enumeration or protocol type. Programmers employ Ballerina's extension points to write their own connectors and then use them within any other Ballerina programs.

Ballerina and Golang both aim to ease the burden of writing app-specific drivers and plugins, with the goal of allowing developers to devote more time to application logic and troubleshooting. Development teams not only gain the advantages of working in parallel, they also benefit from reduced risks of failure and faster time to market.

Libraries and communities

The relative maturity of Ballerina vs. Golang has a measurable effect on the sizes of their respective communities and library availability.

Golang, introduced in 2009, offers a comprehensive standard library that includes core packages to extend the language. That said, it's been criticized for having libraries that lack effective support options and a problematic community that is slow to respond to suggested changes and revisions.

Originating in 2019, the relatively nascent Ballerina community will require more time to mature. Though it is not as comprehensive as Golang's, its standard library offers a range of interesting features, plus support for various network protocols and data formats. In addition, its globally hosted package management system, Ballerina Central, functions as a public web service that allows developers to share and find unique modules.

Dig Deeper on Application development and design

How viable is it to create microservices in Python?

By: Kerry Doyle 

How to learn Golang: A DevOps engineer's experience

By: Matthew Grasberger 

Golang generics spark excitement, anxiety in watershed release

By: Beth Pariseau 

10 of the best programming languages to learn in 2020

By: Kerry Doyle 

Latest TechTarget resources 

+ Software Quality 
+ Cloud Computing 
+ Java 

SearchSoftwareQuality 

+ CircleCI vs. GitHub Actions: CI/CD platform comparison 

Learn the differing features, commands and perks that make CircleCI and GitHub Actions distinct CI/CD platforms. Then, decide ...

+ Key things to consider when choosing regression testing tools 

Making a decision about regression testing tooling purchases means taking stock of plans for CI/CD implementations, existing ...

+ Amazon CodeWhisperer joins packed AI code completion market 

AI code completion tool Amazon CodeWhisperer is now available for developers who are willing to wait.

SearchCloudComputing 

+ Cloud-native modernization is on the rise 

Research suggests that cloud-native application deployment is becoming more prevalent as organizations continue to embrace public...

+ IT buyers respond to HPE GreenLake cloud pitch 

Tech buyers are interested in the breadth and depth of services sold through the HPE GreenLake service, but want proof of cost ...

+ How to create an EC2 instance using PowerShell 

PowerShell has practical integrations that provide users with cross-platform capabilities. Get to know prerequisites and ...

TheServerSide.com 

+ 8 tech jobs that don't require coding 

Looking for an IT job that doesn't involve coding? These eight tech roles are important in any organization, with no programming ...

+ Agile versus Scrum: What's the difference? 

What's the difference between Agile and Scrum? What are their similarities? Learn how to compare and contrast these two popular ...

+ How to communicate effectively in the workplace 

Don't bury the lead. Grab your audience's attention early. Be graceful when others disagree. These and other tips will help you ...


=======asdf32======== Q\Go K8s\$\f1e4ae958a9ff30e8036355a881d2d51.txt
https://cloud.google.com/blog/products/containers-kubernetes/the-rise-and-future-of-kubernetes-and-open-source-at-google
TITLE: The rise and future of Kubernetes and open source at Google | Google Cloud Blog

Start building on Google Cloud with $300 in free credits and 20+ always free products.

FREE TRIAL

In 2014, the first echos of the word Kubernetes in tech were heard throughout the industry. Back then, the first thing that usually came to mind was "How do you even pronounce it?" Fast forward seven years and it's become one of the largest open source projects in the world. One of the early stewards of Kubernetes was Google Fellow Eric Brewer. For over a decade, Eric has taken a driver's seat in advocating for, building, and externalizing technologies at Google. Though he now focuses on a broad set of Google Cloud services-think Kubernetes, serverless, DevOps, Istio, and services-he previously led groundbreaking efforts to separate storage from compute, drive the use of VM live migration at scale, and shape the use of appliances for disaggregation. I had the chance to sit down with him over a series of sessions to learn from his years of experience and dig into the four Kubernetes and open source insights that Eric says have defined the future of cloud computing. 

1. Kubernetes became central to cloud native computing because it was open sourced, and we must continue to invest in open source technologies.

When Eric joined the UC Berkeley faculty, he focused on what later became cloud computing - a model based on clusters of commodity servers that use many processes, services, and APIs. Once he came to Google in 2011, he brought this view over to develop a new kind of cloud that centered on a higher level of abstraction. This meshed well with the early prototypes that led to Kubernetes, an open-source system for automating deployment, scaling, and management of containerized applications.

While cloud was still forming in the early 2010s, Eric knew that Google's internal container-based approach would lead to a more powerful cloud than just VMs and disks. Though it was relatively easy to attract a group of supporters at Google, widespread industry adoption is often slower for novel and unproven ideas. With that foresight, Eric knew right away that open sourcing the project would be the only viable way to achieve the potential he knew Kubernetes held to revolutionize cloud computing. 

Of course, he faced some resistance. By 2012, Google Cloud already had App Engine and VMs available. The common question from critics was, "Why do we need a third way to do computing?" Well, Google was already running billions of containers per week prior to the emergence of Kubernetes, and Eric saw massive value in further developing the technology for the rest of the industry. Kubernetes' automation and flexibility makes it much easier to operate compared to raw VMs or raw disks.

After years of open source support, Kubernetes has become the de facto way to run applications in the cloud, with more and more opinionated and vertically oriented services that run on top of it, like Knative and Kubeflow. The project is still maturing, even as we now face another pivotal shift in cloud computing. Eric is currently spearheading efforts to combine the philosophy that underpins Kubernetes with the strict protection needed by security-sensitive industries. His focus is on open source and software supply chain security, with a goal of creating more opinionated tooling from source code to deployment in order to minimize attack points. 

2. As the number of dependencies used in software development grows, the security risks multiply. Investing in software supply chain security is imperative, and a move towards managed services is actually safer than self-managed solutions. 

Recent attacks, like those on SolarWinds and CodeCov, have shown that increasing reuse and development velocity across the software industry has created more openings for attacks. Eric is laying the groundwork to address a challenge that he believes should be a P0 for the entire planet. 

99% of our vulnerabilities are not in the code you write in your application. They're in a very deep tree of dependencies, some of which you may know about, some of which you may not know about.Eric Brewer

Because of the growing use of open source software and dependencies in software development, it's critical for organizations to understand what pieces of software they want to bet on and why. Instead of including unvetted software dependencies in code, organizations must take time to evaluate this software and identify the elements that are either not quite up to par or poorly maintained. 

When asked about how Google is investing in Kubernetes (which has several hundred software dependencies), Eric explained that Google Cloud helped form the Cloud Native Computing Foundation (CNCF) in 2015 to serve as the vendor-neutral home for many of the fastest-growing open source projects, including Kubernetes, Prometheus, and Envoy. The foundation's mission is to make cloud native computing ubiquitous and foster the growth of the ecosystem. Under the auspices of the CNCF, Google has made over 680,000 additional contributions to the project, including over 123,000 contributions in 2020. 

Google has a long history of committing to open source. In fact, Google recently committed another $100M to third-party foundations supporting open source security. In addition, Eric helped found the Open Source Security Foundation (OpenSSF), which focuses on open source security tooling and best practices so that those responsible for their organization's security are able to understand and verify the security of open source dependency chains. Eric sees this work as absolutely essential in order to set a precedent. Though it will require lots of largely mundane work to get open source to be as secure as possible, this work is necessary and requires financial support.

Open source is a public infrastructure also. And like all public infrastructures, it needs maintenance and support.Eric Brewer

As services continue to move to higher levels of abstraction, managed services set a robust foundation for secure software delivery. Managed services allow providers to enable automatic security preventative controls and attestations. GKE Autopilot, for example, provisions and manages the cluster's underlying infrastructure, including nodes and node pools, giving you an optimized cluster with a hands-off experience. It follows Google Kubernetes Engine (GKE) best practices and recommendations for cluster and workload set up and security, while also enforcing settings that provide enhanced isolation for your containers. In Eric's view, this model will continue as a dominant trend moving forward: Providers will manage more features (like security) over time, taking responsibility for features that you don't want to manage yourself while making the most of the proven protocols and best practices they have built up over years.

3. Platform operators should run GKE as a general purpose platform while imposing guidelines the enterprise cares about.

A common question Eric has gotten over the years is how an enterprise should use a managed Kubernetes platform, like GKE. The first thing to remember is that a cloud provider offers more levers, options, and features to tinker with than you really want your developers to use. These levers, however, give platform owners the ability to create secure and maintainable platforms to power their modern apps. For example, it's wise to apply backups by default and policies to prevent root file system access or creation of public IPs for backend systems. If you're processing credit card transactions, you don't want to give your internal developers free rein; instead you want to give them a platform where the transactions they execute are guaranteed by the structure of services to be compliant with the regulations where you operate.

Think of Kubernetes as the way to build customized platforms that enforce rules your enterprise cares about through controls over project creation, the nodes you use, and libraries and repositories you pull from. Background controls are not typically managed by app developers, rather they provide developers with a governed and secure framework to operate within. 

Managed services often provide or support automated policy controls and best practices that platform operators can easily leverage. Anthos Service Mesh, for example, helps control traffic flows and API calls between services. With the ability to automatically and declaratively secure your services, your developers benefit from more productivity, and the organization benefits from the delivery of more features faster. At the same time, you are protected from shipping features that go against company policies or government regulations. 

Google Cloud supports buildpacks-an open-source technology that makes it fast and easy for you to create secure, production-ready container images from source code and without a Dockerfile. Artifact Registry lets you set up secure private-build artifact storage on Google Cloud so you can maintain control over who can access, view, or download artifacts. Container Analysis provides vulnerability scanning on images in Artifact Registry and Container Registry. 

4. Kubernetes will continue to expand to the edge, leverage coprocessors, and run effectively across public and private clouds.

In our final episode of the series, we collected questions from the field where a few themes emerged, including Kubernetes at the edge, Kubernetes on coprocessors, and finding the right balance between public and private clouds.

Kubernetes at the edge

We're already seeing the potential of Kubernetes being realized at the edge. For example, Kubernetes is being used at the edge in telecommunications and retail spaces. In response to edge security as a concern, Eric explained that Kubernetes can be effectively secured, but it comes down to the full stack. Security can be strengthened through securing hardware through the root of trust, all the way up the stack running on it. 

This is an area Google Cloud continues to invest in. At Next 2021, we announced Google Distributed Cloud, a portfolio of fully managed hardware and software solutions that extends Google Cloud's infrastructure and services to the edge. It's enabled by Anthos, which GKE is a major component of, and is ideal for local data processing, edge computing, on-premises modernization, and meeting requirements for sovereignty, strict data security, and privacy. To use Kubernetes at the edge securely, Distributed Cloud provides centralized configuration and control over clusters at Google's edge network, the operator edge (5G and LTE services offered by our communication service provider partners), or your own edge like retail stores, factory floors, or branch offices.

Kubernetes running on coprocessors

We are also partnering with NVIDIA to deliver GPU-accelerated computing and networking solutions for running Anthos at the edge. This speaks to the potential of coprocessors for Kubernetes. Eric believes that coprocessors are an important part of the computing future. We're reaching the end of Moore's Law, and to make up for it, the industry is adopting domain-specific hardware accelerated for use cases like graphics processing (with GPUs) or machine learning (with TPUs). 

The right balance between public vs. private clouds

Even with all this rapid innovation, companies still face difficult questions in balancing operating in the public cloud versus private sovereign clouds. Eric lays out clear reasons why a public cloud can offer more advantages:

You'd be better off with an open public cloud pretty much all the time if you can use one, because it will have better cost efficiency. It will have a higher rate of innovation. It can do more things over time.Eric Brewer

That being said, using a public cloud provider means you must trust your cloud provider and the government in which your provider is based (today, this is usually the US). If you don't trust those or think they are too risky, you may want to run in your own country, on a private, sovereign cloud. The great thing is that Kubernetes is well-suited to run on a private cloud. Anthos (which Eric helped build) lets you run Kubernetes on GKE for hybrid and multicloud environments, and on bare metal. For those worried about vendor lock in, you can move off of Anthos and continue to run your applications on Kubernetes on-premises. 

To hear more about Eric's predictions on the next externalized product from Google Cloud and what the future of cloud computing looks like, check out the videos above. You can stay up-to-date with Eric's research at Google by following him on Twitter @eric_brewer. 

And, you can stay up-to-date with my latest content at @stephr_wong.

Related Article

Build your future with GKE

For an idea of where we're going with Google Kubernetes Engine, take a look at where we've been.


=======asdf33======== Q\Go K8s\$\d9d40286a82a898995e49edfb5c0dcb5.txt
https://www.howtogeek.com/devops/do-you-really-need-kubernetes-k8s/
TITLE: Do You Really Need Kubernetes (K8s)? 

We select and review products independently. When you purchase through our links we may earn a commission. Learn more.

+ Windows 

+ iPhone 

+ Android 

+ Mac 

+ Smart Home 

+ Office 

+ Security 

+ Linux 

+ DevOps 

+ About Us 
+ Contact Us 
+ Geek Talk 

Take Screenshot on WindowsMount an ISO image in WindowsWhat Is svchost.exe?Boot Into Safe ModeWhere to Download Windows LegallyFind Your Lost Product KeysClean Install Windows 10 the Easy Way

Enable Windows Administrator AccountUse Windows 10 Without Product KeyFind Your Wi-Fi PasswordBest Antivirus for Windows 10 and 11Electronically Sign PDFsOpen HEIC Files on WindowsUse the Linux Bash Shell on Windows

Edit Your Hosts FileSee Who's Connected to Your Wi-FiWhat's the Difference Between GPT and MBRStop Windows From Downloading UpdatesUse System Restore on WindowsFind the Best Wi-Fi ChannelAdd Check Boxes to Word Documents

Browse All Windows Articles | Browse Buying Guides

Find Downloaded Files on an iPhoneDetect Hidden Surveillance CamerasMove Google Authenticator to a New PhoneUse Your iPhone as a WebcamHide Private Photos on iPhoneUse FaceTime on AndroidConvert HEIC Photos to JPG on iPhone

Remove Activation Lock on an iPhoneSet a GIF as Wallpaper on iPhoneiPhone or iPad Screen Won't RotateEnable Dark Mode on your iPhoneFix Crashing Apps on iPhoneTake Screenshot by Tapping Back of iPhonePair Two Sets of AirPods With the Same iPhone

Download Files Using Safari on Your iPhoneLatest Version of iOS and iPadOSForce Your Apple Watch to SyncPair AirPods with Any DeviceHide an App on Your iPhoneChange Your Apple ID Email AddressTurn Off iPhone Shortcuts Notifications

Browse All iPhone Articles | Browse Buying Guides

Find Your Wi-Fi PasswordFree Up Disk Space on Your MacFind the Best Wi-Fi ChannelCreate Bootable USB DrivesRemove a PDF PasswordWhat to Do When Your Mac Won't Turn OnRun Windows Software on Mac

Stream From VLC to ChromecastWrite to NTFS Drives on a MacTurn Your Computer Into a DLNA Media Server3 Ways to Remotely Connect to MacTurn Your Mac Into a Wi-Fi HotspotStop Mac's Mail App Wasting SpaceUse Your iPhone as a Webcam

Change Your Apple ID Email AddressPC on the FloorFreely Move Pictures in WordCut and Paste Files on MacWhat Are AAE Files from an iPhone?Download and Install Older Versions of macOSCan I Use iCloud Drive for Time Machine Backups?

Browse All Mac Articles | Browse Buying Guides

Google Play Store on Fire TabletFind Your Wi-Fi PasswordElectronically Sign PDFsOpen HEIC Files on WindowsUse the Linux Bash Shell on WindowsFind the Best Wi-Fi ChannelMove Android Apps to the SD Card

Back Up Text Messages to GmailStream From VLC to ChromecastHide Facebook Messenger StatusManage App Permissions on AndroidDetect Hidden Surveillance CamerasRemove Bloatware on AndroidMove Google Authenticator to a New Phone

Scan to PDF on AndroidFind Your Lost Android PhoneUse FaceTime on AndroidSet Default Apps on AndroidTrim Videos on AndroidDisable Android App UpdatesReboot or Factory Reset Chromecast

Browse All Android Articles | Browse Buying Guides

See Who's Connected to Your Wi-FiFind the Best Wi-Fi ChannelMonitor Your Internet Bandwidth UsageWhy is My Echo BlinkingSet Up a NAS DriveDifference Between the Echo and Echo DotControl All Your Smart Home Devices in One App

Best LED Strip LightsUse Hand Gestures with Google Nest HubBest Smart Light BulbsConnect Alexa to Wi-FiSchedule a Smart Plug with AlexaBest Robot VacuumsPlay Games on a Google Nest Hub

Google Assistant Good Morning RoutineEve MotionBlinds7 Alexa Skills to Make Your Life EasierBest Smart Home GiftsCan Power Companies Remotely Adjust Your Smart Thermostat?Google Home LawsuitWhat Is a Smart Plug?

Browse All Smart Home Articles | Browse Buying Guides

Find Your Lost Product KeysAdd Check Boxes to Word DocumentsInsert Horizontal Lines In WordWindows 10 Dark ModeAwesome Geeky Computer PranksCustomize the Taskbar in Windows 10What Is ctfmon.exe?

Convert a Row to a ColumnHighlight a Row Using Conditional FormattingUse Multiple Headers and FootersMake a Form in WordRemove Duplicate Rows in ExcelMake Windows Show File ExtensionsComputer Security Tips

Add a Drop-Down List to a Word DocumentNumber or Label Equations in WordHow to Add a Word or Phrase to Android's AutoCount Colored Cells in ExcelOffice Security UpdatesStart Excel from the Command PromptDelete All Notes at Once in PowerPoint

Browse All Microsoft Office Articles | Browse Buying Guides

What Is svchost.exe?Clean Install Windows 10 the Easy WayUse Windows 10 Without Product KeyFind Your Wi-Fi PasswordBest Antivirus for Windows 10 and 11See Who's Connected to Your Wi-FiMove Android Apps to the SD Card

Hide or Password Protect a Folder in WindowsRemove a PDF PasswordSet Up Your Own Home VPN ServerDisable Cortana in Windows 10Access Your Router If You Forget the PasswordFix a Stuck Windows UpdateWrite to NTFS Drives on a Mac

Mirror iPhone or iPad to WindowsManage App Permissions on AndroidDetect Hidden Surveillance CamerasHide Steam Games You're PlayingSend Encrypted Emails and MessagesRemove Viruses on WindowsRestore Chrome Tabs

Browse All Privacy and Security Articles | Browse Buying Guides

Electronically Sign PDFsUse the Linux Bash Shell on WindowsEdit Your Hosts FileWhat's the Difference Between GPT and MBRFind the Best Wi-Fi ChannelCreate Bootable USB DrivesRemove a PDF Password

Access Your Linux Partitions From WindowsRun Windows Software on MacSet Up Your Own Home VPN ServerWindows Won't BootBest Alternatives to uTorrentStream From VLC to ChromecastDelete Files Older Than x Days

Fix an Overheating LaptopTurn Your Computer Into a DLNA Media ServerImportant Linux CommandsInstall Minecraft on Ubuntu LinuxTest Your Antivirus, Firewall, and MoreBest Linux LaptopsBest Lightweight Linux Distros

Browse All Linux Articles | Browse Buying Guides

What is SSH Agent Forwarding and How Do You Use It?How to Connect to Localhost Within a Docker ContainerHow to Manage an SSH Config File in Windows and LinuxHow to Run GUI Applications in a Docker ContainerHow to Check If Your Server Is Vulnerable to the log4j Java Exploit (Log4Shell)How to Use Cron With Your Docker ContainersWhat Is a PEM File and How Do You Use It?

How to Run Your Own DNS Server on Your Local NetworkHow to Check If the Docker Daemon or a Container Is RunningHow to Pass Environment Variables to Docker ContainersHow to Use Docker to Containerize PHP and ApacheHow to View Kubernetes Pod Logs With KubectlHow to Use State in Functional React ComponentsHow to Create a Simple Bot In Microsoft Teams

How to Get Started With Portainer, a Web UI for DockerHow to Find Your Apache Configuration FolderHow to Send a Message to Slack From a Bash ScriptHow to Restart Kubernetes Pods With KubectlIs Rocky Linux the new CentOS?How to Get the Size of an Amazon S3 BucketWhen Not to Use Docker: Cases Where Containers Don't Help

Browse All DevOps Articles | Browse Buying Guides

Complete Guides
by How-To Geek

Browse All Buying Guides

Our Latest Product Roundups

Best Ring Alternatives

Best Wi-Fi Adapters

Best Outdoor Solar Lights

Best SD Cards For Cameras 

Best Crypto Wallets

Best Computer Speakers

Best Cell Phone Plans

Best Camera Bags

Best Ultrawide Monitors

Best Wi-Fi 6E Routers

Best USB Flash Drives

Best Fitness Trackers

Reader Favorites

Best Linux Laptops

Best Wi-Fi Routers

Awesome PC Accessories

Best Wireless Earbuds 

Best Smartwatches

Best Oculus Quest 2 Accessories

Best Home Theater Systems

More from How-To Geek

Browse All Buying Guides

Browse All News Articles

Latest Geek News

Starlink FCC Authorization

Xfinity Stream for Apple TV

3D Pinball Modern Ports

Facebook Groups

Raspberry Pi Pico W

GeForce NOW Games June 30, 2022

GeForce NOW on Samsung TVs

Samsung Galaxy XCover6 Pro

Google Pixel Self-Repair

Switch To Android App

Rufus Windows 11 Installation

YouTube Premium Referrals

Reader Favorites

Install Free HEVC Codecs

Detect Hidden Surveillance Cameras

How to Open SWF Files

Disable Bing in Windows 10 Start Menu

Hide Steam Games You're Playing

Use Your iPhone as a Webcam

Hide Private Photos on iPhone

More from How-To Geek

Browse All Reviews

Browse All Buying Guides

Latest Reviews

NZXT Signal 4K30 Capture Card Review

PrivadoVPN Review

INNOCN Ultrawide Monitor Review

CleanMyMac X Review

Chipolo CARD Spot Review

Surfshark VPN Review

Govee RGBIC Neon Rope Lights Review

Logitech MX Master 3S Mouse Review

Logitech MX Mechanical Keyboard Review

ExpressVPN Review

MSI Clutch Gaming Mouse Review

Nomad Base One Max Review

Across LifeSavvy Media

[21aa] FROM LIFESAVVY

Gozney Roccbox Pizza Oven Review: Restaurant-Quality in a Portable Package

Harber London Leather Desk Mat Review: More Than Just Stylish

[21aa] FROM REVIEW GEEK

Vizio P-Series Quantum X TV Review: This Television Is Heaven

Benks Grand Pro Headphone Stand Review: Sleek, Sturdy, but Steep

+ Windows 
+ Mac 
+ iPhone 
+ Android 
+ ^^ Holiday 2021 

+ Smarthome 
+ Office 
+ Security 
+ Linux 
+ Buying Guides 

+ News 
+ Features 
+ Review Geek 
+ LifeSavvy 
+ Newsletter 

+ About Us 
+ Contact Us 
+ Geek Talk 
+ CloudSavvy IT 

The Best Tech Newsletter Anywhere 

Join 425,000 subscribers and get a daily digest of news, geek trivia, and our feature articles.

By submitting your email, you agree to the Terms of Use and Privacy Policy.

Do You Really Need Kubernetes (K8s)?

Anthony Heddings

Anthony Heddings
Writer

Anthony Heddings is the resident cloud engineer for LifeSavvy Media, a technical writer, programmer, and an expert at Amazon's AWS platform. He's written hundreds of articles for How-To Geek and CloudSavvy IT that have been read millions of times. Read more...

About How-To Geek

Jun 29, 2022, 8:48 pm EDT | 4 min read 

Kubernetes has a reputation for being complicated. While it's a fantastic piece of software, sometimes the benefits may not outweigh the added complexity, especially for small businesses managing simple deployments. Is plain old Docker good enough?

What Kubernetes Is Great At

Kubernetes (K8s) is used with Docker very often in professional environments, and this can make it seem like it's an upgraded or more organized version of Docker. While this is true in some regards, it's not the exact purpose of K8s.

Kubernetes is a "container orchestration system," and it's important to remember what that means. The Kubernetes Control Plane handles all the details of "orchestrating" which containers will run on which nodes. It separates the hardware from the software and lets your machines just run as worker nodes, which is ideally all they really should be.

Kubernetes fantastic when you have a large, production deployment that needs to be able to scale, repair, and manage itself automatically. When you're managing hundreds of containers across many servers, having to deal with load balancing and moving containers from server to server can get annoying. K8s handles this for you with extra configuration options.

Graphic showing Kubernetes cluster architecture 

Kubernetes is also similar to infrastructure as code (IaC), another useful concept. It lets you control your services using configuration files that can be tracked through Git. This can drastically improve your deployment processes by allowing it to be tracked along branches, tested, versioned, and rolled back if needed.

What Kubernetes Isn't Great At

The main downside of Kubernetes is that it's notoriously complicated. This might not be a huge problem if you're already familiar with it, but in any case, it adds extra time and complexity to getting your applications up and running. It's a great tool to learn, and a good skill to have. But it works better with larger deployments, and if you're running only a few servers or a few containers, the extra effort of Kubernetes might not be worth it.

Kubernetes is a middleman, but you can always go old-school and take the role of orchestrator yourself. The nice thing about Docker is that it makes the process of creating and moving applications around easy with containerization. Creating a new server is relatively simple, and you could have a new EC2 instance from AWS running your container in a manner of minutes.

Without Kubernetes, the only added problem you have is needing to run commands manually on your servers with the docker CLI or docker-compose API. If you need to add a new container, or move a container to another node, you'll need to run those commands again. This can be an issue if, for example, you experienced unexpectedly high traffic and needed to launch more instances automatically. K8s would solve that problem. But in many cases, your traffic may be relatively steady, or at least predicable on a week-to-week basis, especially for backend services that don't really need to auto-scale.

Essentially, Docker itself already improves the process of running portable applications by a large amount. It's a huge improvement over having to install applications the old way. Kubernetes improves upon Docker a bit, and automates some tasks needed for big networks, but adds a lot of complexity.

The value of it will depend on how much time it actually saves you. If this complexity is acceptable to you and ends up saving you time, you should use K8s, but if it doesn't, you shouldn't waste your time with it-especially when you can always simply swap to it later on if need be.

What Should You Use Instead?

It's good to take a step back and look at what you're really considering Kubernetes for. If you want your network to auto-scale, manage your resources automatically, and launch pods on different servers based on configuration, Kubernetes is a great tool to learn. If you're concerned about the complexity, cloud providers like AWS do have managed Kubernetes services like EKS, which can handle some of the dirty work for you, especially when it comes to management and provisioning resources.

However, if all you want is a way to manage your containers more easily, or auto-update containers, there are far simpler tools out there for the job. They might not be as fully featured as Kubernetes, but they'll be simpler and can save you time.

If you want to auto-scale certain services, you'll almost always need to be talking to a cloud provider's API to provision new resources. Kubernetes can handle this for you for many platforms, but services like AWS, Azure, and GCP all have simple container services with auto-scaling features. AWS's ECS service can easily be set up to auto-scale to meet high demand.

RELATED: How to Get Started with Auto-Scaling Container Deployments on AWS ECS

If you need to auto-update containers whenever you push new versions to your Docker registry, you can use a service like Watchtower. It runs on a worker node as a Docker service itself, with the Docker socket exposed, and watches for changes. Once a new container is pushed, Watchtower will restart the container. This will save you time running restarts of containers, and is a good alternative to Kubernetes updates.

docker run --detach 
--name watchtower 
--volume /var/run/docker.sock:/var/run/docker.sock 
containrrr/watchtower

If you want to be more organized in general with how you manage your containers, you should consider setting up a Docker management GUI like Portainer. Portainer is a web-based GUI for managing Docker deployments. It works with multiple worker nodes, much like Kubernetes, but it lets you handle the job of orchestration, setting up containers on the servers you want.

Portainer is really easy to set up since it's packaged as a container itself. If you'd like to learn more, you can read our guide to setting it up and working with it.

RELATED: How to Get Started With Portainer, a Web UI for Docker

READ NEXT 

+ > What Are the Best Nintendo Switch Games in 2022?
+ > What's New in Windows 11's 22H2 Update: Top 10 New Features
+ > T-Mobile Is Selling Your App Activity: Here's How to Opt Out
+ > How Much Does It Cost to Operate an Electric Lawn Mower?
+ > A World Without Wires: 25 Years of Wi-Fi
+ > NZXT Signal 4K30 Capture Card Review: Lossless High-Quality Footage 

Anthony Heddings 
Anthony Heddings is the resident cloud engineer for LifeSavvy Media, a technical writer, programmer, and an expert at Amazon's AWS platform. He's written hundreds of articles for How-To Geek and CloudSavvy IT that have been read millions of times. 
Read Full Bio " 

How-To Geek is where you turn when you want experts to explain technology. Since we launched in 2006, our articles have been read more than 1 billion times. Want to know more? 

Instagram

LinkedIn

RSS Feed

The Best Free Tech Newsletter Anywhere

By submitting your email, you agree to the Terms of Use and Privacy Policy.


=======asdf34======== Q\Go K8s\$\793e6826cebc7ea45a367669b24d3b93.txt
https://www.trio.dev/blog/what-is-golang-used-for
TITLE: What is Golang Used For? 7 Examples of Go Applications - Trio Developers

Its first official release being in 2012, Go is a refreshingly new programming language. What is Golang used for? Google - the name behind the development of Go - had hoped that Golang applications could empower developers and the systems they worked with. 

And for all intents and purposes, this goal continues to be reached as programmers routinely rely on the language for their projects. 

Many Go projects demonstrate that Golang is commonly used for the following applications:

+ Distributed Network Services 
+ Cloud-Native Development 
+ Replacements for Existing Infrastructure 
+ Utilities and Stand-Alone Tools 
+ News Outlets 
+ Media Platform 

Take a closer look at where Go is being used and why.

What Is GoLang?

Go, often called GoLang, was designed to respond to heated critiques against other languages used at Google. In fact, Go's designers have a noted animosity towards C++ with a long list of simplifications they developed through Go. 

That said, most Go developers come from Python and Ruby, not C++. To add, many elements of Go are inspired by other languages. For example, Go borrows static typing and run-time efficiency from C and readability and usability from Python and JavaScript. 

All the features of Go contribute to its primary benefit - stability. For example, static typing promotes flexibility by not requiring the explicit initialization of variables. This plays into the prevention of runtime errors, improving runtime efficiency. 

Syntactically similar to C, you can also find memory safety, garbage collection, structural typing, and concurrency in Go. 

Structural typing extends more flexibility towards Go users by determining class via structure rather than declarations. Garbage collection encourages memory safety by cleaning up unused memory.

Concurrency signifies that multiple processes can happen at the same time, meaning programming processes execute with exceptional speed. 

Some other perks of Go include its high-performance networking and multi-processing. This also allows for overall faster computing. And of course, these features stand alongside code that is made to be easy to use and easy to read. 

Go produces code that "will continue to compile and run without change, in many environments, on a time scale of years", in the words of Andrew Gerrand. 

6 Advantages of GoLang

1. Simplicity

Go comes equipped with just about everything you need such as a basic test library, synchronization primitives, templating, and more. The result is using fewer dependencies while coding in Go. 

Forward compatibility is one feature of Golang applications that keeps things simple. The concept ensures that new Go updates don't cause any broken gears in your programming. 

2. Small Learning Curves

The learning curve for Go is notably shallow. The documentation is easy to read and utilizes a no-frills syntax. Some go as far as to say that you could learn Go in one evening. 

There are less than 30 keywords which might be an indicator of how simple the language is. Creating a small Golang application should be easy as pie. 

3. Speed

Go is a compiled language. In contrast to interpreted languages, compiled languages are directly translated to machine code before execution. This means faster and more efficient code. 

Golang's static types and effective garbage collectors also make it a bit more speedy than other high-level programming languages. Even when compared to Java, one of the penultimate programming languages, Go is still faster on almost every benchmark. 

4. Support

You're all set to build Golang applications on Windows, Linux, and Mac. There are also many integrated development environments (IDEs) and editors that support Go, including the following:

+ Emacs 
+ Vim 
+ VSCode 
+ Atom 
+ Eclipse 
+ Sublime 
+ IntelliJ 

5. Extensive Tooling

As an open-source language, Go is no stranger to tools and modifications that strengthen its usefulness. Golang's GitHub repository, for instance, hosts various plugins to enhance your Golang applications. 

A couple of tools worth noting are Gotests and Revive. Gotests provides an easy way of generating table-driven tests via core logic. Revive extends a framework for the development of custom rules in Go. 

6. Large Talent Pool

According to the 2020 State of Software Engineers report by Hired, Go is among the hottest programming languages being used today. In consequence, you'll have many developers to choose from when you need to hire someone for your project. And to that same end, quite a few of them will be talented. 

What Is Golang Used For?

Golang's support for concurrency makes it an excellent choice for handling bottlenecks that prevent scalability. 

One particular feature of Go, goroutines, offers concurrency by allowing functions or methods to run concurrently with other functions or methods. A complimentary feature, channels, works to link goroutines together. 

Backend developers can reap the most benefits from Go. Using the language, developers can handle heavy requests on the server-side with minuscule memory usage.

If you want a better idea of how you can use Go, take a look at the following companies using Go right now:

+ Google 
+ Uber 
+ Twitch 
+ Dailymotion 
+ Dropbox 

Below are some more specific examples of where Go can be used. Here are seven Golang applications. 

Distributed Network Services

Concurrency thrives in any networking environment. Using goroutines and channels, Go is naturally suited for developing network services such as APIs, web servers, and mini frameworks for web applications. 

Cloud-Native Development

The same concurrency and networking features align with its high portability across various platforms make Go an exceptional language for cloud computing. As a matter of fact, many stand-out cloud platforms like Kubernetes were built with Go. Google Cloud also uses Go to enhance scalability and performance. 

Replacements for Existing Infrastructure

Many old infrastructures were rewritten using Go in an attempt to modernize what's become obsolete over time. A new version of the Network Time Protocol (NTP) - an internet protocol for clock synchronization among networks - relies on Go. 

Utilities and Stand-Alone Tools

Since Go is fully functional with little to no dependencies, the language is well-suited for building small tooling items. These can launch quickly and be packaged for redistribution at a moment's notice. 

News Outlets

The British Broadcasting Corporation, more commonly known as simply BBC, has been using Go on its backend for some time now. It's probably safe to assume Go's capacity for multithreading to maximize CPU usage helps more often than not when it comes to managing a massive multimedia website. 

Media Platforms

Similarly, Youtube, SoundCloud, and Netflix all run on Go. Capable data processing is one of the main advantages of Go, so it's no surprise that these online platforms which control tons of data to distribute to their patrons have chosen to work with Go. 

On-Demand Services

The busy bustle of everyday life requires technology that can accommodate the everyday person who needs fast and reliable service. The best example of a service like this is Uber which uses Go to get to users in the nick of time for just about every request. 

What Are the Limitations of GoLang?

Despite its simplicity, Go still has some setbacks. Perhaps because Go is so simple, it is less descriptive than other languages. What can be accomplished with a few lines of Python, may take several lines in Golang applications. Developers may feel that their code is a bit disorganized as a result. 

Go is also extremely young. Before its official release, the language was publicly announced in 2009 after being developed in 2007. Thus, the language is over a decade old. But this is relatively new compared to the most traditional languages like Java and Python, which were released in the 1990s. 

The downside to this youth is that Go can be difficult to implement with older platforms that aren't quite ready for it, so to speak. And programmers using the language may not be as well-adjusted either. 

Yet another pitfall is that you can't build generic functions in Go. This severely limits code reusability and efficiency. Developers must take extra time to think about workarounds for this issue. 

How To Hire the Right Go Developer

When it comes to hiring developers, there is always more brunt work than expected. Hiring developers, whether they be Go developers or something else entirely, requires enough technical expertise to understand what exactly you will need for your development project and recognize which developers can provide that. 

Thankfully, Trio offers several resources explaining how to do just that. Check out the Trio blog for a complete guide that will take you through the steps and important tidbits to remember about hiring a software engineer. 

Hopefully, the information you learned today not only answered, "What is Golang used for?" but gave you some insight into future Golang projects for your business. 

Go can garner you many advantages, namely concurrency, and simplicity. As such, you can use Golang in any environment where speed and networking power need to be priorities. It goes without saying that nearly every tech company would treasure these abilities. 

The one snag with Go, or any technology for that matter, is hiring professionals who have the skills to use it to its full potential. If hiring developers on your own proves to be too strenuous, don't fret. 

Trio has a team of highly qualified Go developers ready to meet your project's needs when you need them. Tell us all about it and we'll get you started!

Table of Contents 

Frequently Asked Questions 

What Is Golang? 

Go, often called GoLang, was designed to respond to heated critiques against other languages used at Google. In fact, Go's designers have a noted animosity towards C++ with a long list of simplifications they developed through Go.

What is Golang used for? 

Golang's support for concurrency makes it an excellent choice for handling bottlenecks that prevent scalability.

What are the limitations of Go? 

Perhaps because Go is so simple, it is less descriptive than other languages. What can be accomplished with a few lines of Python, may take several lines in Golang applications.

Read Next 

Synchronous vs. Asynchronous Programming: What's the Difference? 

Click here to learn how using synchronous and asynchronous programming can optimize your software projects!

Cordenne Brewster * 6 min read 

Top 11 JavaScript Developer Interview Questions for 2022 

Thinking about hiring a JavaScript developer! Here are 11 JavaScript developer interview questions to get you started!

Cordenne Brewster * 4 min read 

Top 12 Places To Find Developers For Your Company in 2022 

Stay tuned to learn just what those places are and how to find software developers in a variety of networks. 

Cordenne Brewster * 6 min read 

Build possibility with Trio

Our partners are growing and innovating their businesses faster with Trio.


=======asdf35======== Q\Go K8s\$\36994dc9cf557f00d15963312e40a5a8.txt
https://www.geeksforgeeks.org/top-5-golang-frameworks-in-2020/

+ Top 5 Golang Frameworks in 2020
+ Top 7 Reasons to Learn Golang
+ Top 10 Reasons to Learn Java
+ Top 10 Reasons to Learn C++
+ Why Should I Learn Coding?
+ Introduction to Swift Programming
+ Swift Programming Language
+ Which Programming Language to Choose?
+ Which Programming Language Should I Choose as a Beginner?
+ I Can't Use Logic In Programming. What Should I Do?
+ How To Approach A Coding Problem ?
+ Why Data Structures and Algorithms Are Important to Learn?
+ Why Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : Answered
+ Resume Writing For Internship
+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Must Do Coding Questions Company-wise
+ Practice for cracking any coding interview
+ How to begin with Competitive Programming?
+ Top 10 Algorithms and Data Structures for Competitive Programming
+ N Queen Problem | Backtracking-3
+ Printing all solutions in N-Queen Problem
+ Warnsdorff's algorithm for Knight's tour problem
+ The Knight's tour problem | Backtracking-1
+ Rat in a Maze | Backtracking-2
+ Count number of ways to reach destination in a Maze
+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang

+ Top 5 Golang Frameworks in 2020
+ Top 7 Reasons to Learn Golang
+ Top 10 Reasons to Learn Java
+ Top 10 Reasons to Learn C++
+ Why Should I Learn Coding?
+ Introduction to Swift Programming
+ Swift Programming Language
+ Which Programming Language to Choose?
+ Which Programming Language Should I Choose as a Beginner?
+ I Can't Use Logic In Programming. What Should I Do?
+ How To Approach A Coding Problem ?
+ Why Data Structures and Algorithms Are Important to Learn?
+ Why Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : Answered
+ Resume Writing For Internship
+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Must Do Coding Questions Company-wise
+ Practice for cracking any coding interview
+ How to begin with Competitive Programming?
+ Top 10 Algorithms and Data Structures for Competitive Programming
+ N Queen Problem | Backtracking-3
+ Printing all solutions in N-Queen Problem
+ Warnsdorff's algorithm for Knight's tour problem
+ The Knight's tour problem | Backtracking-1
+ Rat in a Maze | Backtracking-2
+ Count number of ways to reach destination in a Maze
+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang

Top 5 Golang Frameworks in 2020

+ Last Updated : 28 Jun, 2022

Golang (or Go) is an open-source compiled programming language that is used to build simple, systematic, and secure software. It was designed by Google in the year 2007 and has been readily adopted by developers all over the world due to its features like memory safety, structural typing, garbage collection, and similarity to C-language. 

Golang web frameworks are used to write application programming interfaces (APIs) and web services straight away. During building small applications, frameworks are not necessary but are needed in production-level software. Even knowing the features and having the knowledge, it takes a huge amount of time in coding a debugging production-level program. Due to this reason, frameworks are often used. Frameworks provide additional functionalities and services that can be used by other developers who want to add similar functionalities in their software rather than writing the full-fledged software by themselves.

The top 5 web frameworks in Golang on the basis of popularity (according to stars on GitHub) are listed as follows:

Name

Stars

Forks

Open Issues

gin

40.2k

4.6k

238

beego

24.5k

4.9k

746

echo

17.7k

1.6k

37

kit

17.5k

1.8k

59

fasthttp

13k

1.1k

34

Let's look at these frameworks in details and compare them on the basis of their functionalities and ease of use:

1. gin

The gin framework tops the list in terms of popularity due to its minimalist framework and performance. It is mostly used for building a REST API for the backend if the programmer wants to develop a single page application using a frontend framework. This framework makes use of the HTTP routers for handling the Golang traffic and is ideal for beginners along with its rich documentation provided on GitHub. It supports the most essential libraries and features which makes it the most suitable Golang framework to develop high-performance REST APIs. 

The API of this web framework will be similar to that of martini but is close to 40 times faster than it! The huge community of gin users has made extensive well-tested middlewares that makes working with gin a lot easier and reliable. 

The greatest con is although is suitable for smaller applications, it is not suitable to develop large backend applications or enterprise-level server complex functions. 

2. beego

The beego framework is used for the rapid development of REST APIs, web applications, and backend services in Golang. It is often viewed similarly to the Django web framework in Python and contains specific features of Golang such as interfaces and struct embedding. It does not require any third-party installations. It is a full-fledged Model-View-Controller (MVC) framework with its own libraries and a built-in tool that helps with finding the code changes, known as the Bee Tool. 

Furthermore, it is divided into eight modules that can either be ignored or used as required. It integrates the Object-Relationship Map (ORM) that helps with organizing the application's database along with session handling tools and logging systems. Not only this, but it also incorporates a cache handler and libraries for operating HTTP elements. Another great feature is that is works well with command-line tools, in a similar way to how Django uses the command line.

The only con beego has is that due to its high functionality and extensive features, it is not so suitable for beginners.

3. echo 

The echo framework is another high performance, an extensible, and minimalist web framework in Golang. It has a highly optimized HTTP router with zero dynamic memory allocation that smartly prioritizes routes. It is used to build robust and scalable REST APIs, which can easily be organized into groups. It automatically installs TLS certificates from Let's Encrypt and provides HTTP/2 support which improves the speed and provides better user experience. It also contains many built-in middlewares to use and developers can even define their own which can be set at a root, group, or route level.

It supports data binding for HTTP request payload, including JSON, XML, or form-data. For data rendering, it contains an API to send a variety of HTTP responses, including JSON, XML, HTML, file, and attachment. Templates can be rendered using any template engine and have customized central HTTP error handling. 

The con of using echo framework is that it is maintained by only a single developer and the code is updated infrequently.

4. kit

The kit framework is a programming toolkit for building robust, reliable, and maintainable microservices in Golang. It is a set of packages and best practices, which provide a comprehensive, robust, and trustable way of building microservices for organizations of any size. Go is a great general-purpose language, but microservices require a certain amount of specialized support.

Therefore, the kit framework provides Remote Procedure Call (RPC) safety, system observability, and infrastructure integration. It is composed of multiple co-related packages, that together form an opinionated framework for constructing large Service-Oriented Architectures (SOAs) and makes Golang a first-class language for writing microservices in any organization. It was designed for interoperability and the developers are free to choose the databases, components, platform, and architecture that works best for them.

The drawback of using go-kit is that due to its heavy use of interfaces, the overhead of adding API to the service is very high.

5. fasthttp

The fasthttp framework provides a fast HTTP server and client API which was made as an alternative to net/http due to its limits on optimization opportunities. It is optimized for speed and can easily handle more than 100K qps and more than 1M concurrent keep-alive connections on modern hardware. It is also optimized for low memory usage and provides easy connection upgrade support via RequestCtx.Hijack. 

Fasthttp API is designed with the ability to extend existing client and server implementations or to write custom client and server implementations from scratch. A lot of additional useful information is exposed to the request handler, such as server and client address, per-request logger, unique request-id, etc.

Since net/http has a wider audience, it is more reliable and tested. Also, as net/http and fasthttp are incompatible, developers often find it difficult to migrate from net/http to fasthttp.

These are the top 5 most used Golang web frameworks in 2020 compiled on the basis of popularity on GitHub. Every framework listed here has a different set of features to experiment and before implementing any of these frameworks, make sure that you clearly understand the requirements of the same. Not only limited to these, but Golang also has a set of numerous other frameworks to offer like Buffalo, Martini, Goji, net/http, Revel, etc. and feel free to check them out.

Top 7 Reasons to Learn Golang

Top 7 Reasons to Learn Golang

16, Aug 20

How to convert a slice of bytes in uppercase in Golang?

Golang program that uses fallthrough keyword

18, Apr 20

math.Lgamma() Function in Golang with Examples

13, Apr 20

math.Float64bits() Function in Golang With Examples

How to check equality of slices of bytes in Golang?

21, Aug 19

atomic.AddInt64() Function in Golang With Examples

10, Mar 20

atomic.StoreInt64() Function in Golang With Examples

15, Mar 20

reflect.FieldByIndex() Function in Golang with Examples

strings.Contains Function in Golang with Examples

bits.Sub() Function in Golang with Examples

How to convert a slice of bytes in lowercase in Golang?

io.PipeWriter.CloseWithError() Function in Golang with Examples

Import in GoLang

20, Jul 20

time.Round() Function in Golang With Examples

06, Apr 20

How to add a method to struct type in Golang?

11, Jun 20

Converting a string variable into Boolean, Integer or Float type in Golang

Check if the given slice is sorted in Golang

26, Aug 19

How to compare times in Golang?

reflect.AppendSlice() Function in Golang with Examples

How to Deploy a Golang WebApp to Heroku?

28, Mar 22

reflect.ChanOf() Function in Golang with Examples

flag.Bool() Function in Golang With Examples

time.Sleep() Function in Golang With Examples

12, Mar 20

vanigupta20024

@vanigupta20024

+ Go Language

+ strings.Replace() Function in Golang With Examples
+ fmt.Sprintf() Function in Golang With Examples
+ Arrays in Go
+ Golang Maps
+ How to Split a String in Golang?

+ Interfaces in Golang
+ Slices in Golang
+ How to convert a string in lower case in Golang?
+ Different Ways to Find the Type of Variable in Golang
+ How to Trim a String in Golang?


=======asdf36======== Q\Go K8s\$\017640c32ff4f6c1e504ff86b6190b50.txt
https://www.ibm.com/cloud/blog/openshift-vs-kubernetes
TITLE: OpenShift vs. Kubernetes: What's the Difference? | IBM

OpenShift vs. Kubernetes: What's the Difference? 

Cloud Compute 

16 September 2021 6 min read 

By: 

IBM Cloud Education, IBM Cloud Education

Share this page on Twitter Share this page on Facebook Share this page on LinkedIn E-mail this page 

Learn the key differences between OpenShift and Kubernetes and how container orchestration automates software workloads for better application experience. 

OpenShift and Kubernetes are the most widely used container orchestration software options available today. Let's take a look at the two solutions and how they relate and differ.

OpenShift vs. Kubernetes software: A comparative overview

Red Hat's(R) OpenShift(R) is an open-source container platform that runs on the Red Hat enterprise Linux operating system and Kubernetes. The product is typically termed a "Platform as a Service" (PaaS) because it combines a host of services within the platform for enterprise businesses. This includes the Kubernetes platform and Docker container images. It also includes additional features that are exclusive to the OpenShift enterprise platform. 

Kubernetes is also an open-source container orchestration platform. It enables developers to control, more easily manage and maintain software processing workloads for better deployment and scalability.

For a deeper look into Kubernetes, check out our video, "Kubernetes Explained": 

The central differentiating feature between the two platforms is that the OpenShift container platform includes Kubernetes' platform and features (as well as Docker features). But Kubernetes does not include OpenShift services, and it is its own standalone option, with its own unique Kubernetes dashboard.

Moreover, though both are open-source programs, OpenShift is a paid platform service from Red Hat, while Kubernetes open-source code is a free service that can be downloaded from GitHub. 

There might be some degree of confusion about this difference, so it's of value to understand that Kubernetes-as-a-Service (KaaS) providers offer paid enterprise-grade deployment and managed Kubernetes services. These providers commonly offer managed integration services with cloud providers like IBM, Amazon Web Services (AWS) or Microsoft Azure.

The development of container orchestration software 

It's also helpful to have a basic knowledge of how container orchestration technology developed and where it stands today.

Container software is not new. It has been in use since the 1970s when virtual machines (VM) replaced mainframe processing with advanced multi-system resource sharing on one machine (or "node"). Developers could install multiple virtual operating systems on one computer. Developers used virtual machine segmentation, which enabled multiple users to access and share resources. It also enabled developers to test and run applications in an isolated environment. Insulating applications from other processes permitted them to run concurrently with less interference or disruptions to services.

In the last two decades, space-conserving and load-balancing container cluster technology emerged. It has become the leading container software design for securely balancing application loads, speeds and parity across environments.

In 2013, Docker launched an open-source GUI-based software that once again advanced container technology. It enabled users to better create and control application development and provided image streams. Soon after, Google founded Kubernetes (known also as "kube" or "k8") in 2014 with Kubernetes cluster containerization, and which is now managed by the Linux Foundation's non-profit Cloud Native Computing Foundation (CNCF).

Finally, the RedHat OpenShift platform on the Red Hat Enterprise Linux (RHEL) OS was launched in 2011, and it has become more in-demand in the last 10 years as it has created more business-forward services.

What is container orchestration software? 

Container orchestration software automates containers and lets developers configure them. It is considered portable in that it can be created and deployed in any environment.

Container technology works by bundling application code - along with its libraries and other necessary information - into a single event. It's termed a "single unit" of application as it includes the most basic object or process-oriented code. This enables applications to function better, whether on-premises or in any developer ecosystem. Cluster container orchestration is a widely used form of container software technology and it is how Kubernetes is designed.

Containerization uses clusters of nodes (either real or virtual machines) that function like one robust server. This provides more space, application isolation, load balancing and consistently faster processing speeds. 

Kubernetes clusters are designed in pods. These maintain the same number of resources and perform in the same network. They are a powerful processing structure because they can be replicated so that any container within a pod can work like another, producing concurrent updates or balancing load processing responsibilities.

How does this technology work for your business and software applications? In sum, it is structured so that pods can be replicated to support load balancing for your applications and to ensure applications do not fail. It is a means of running software more efficiently and reliably, no matter if you run it on a desktop, mobile, a local network or on the cloud. It enables you to bring software to scale more easily.

For a deeper dive into container orchestration, see our video "Container Orchestration Explained":

On the whole, both Kubernetes and OpenShift provide a high-functioning continuous integration and continuous delivery (CI/CD) process. Though you'll find certain CD pipeline features may better support your business needs.

Kubernetes features

Now that you have a sense of how cluster container orchestration works, you can better understand Kubernetes' features and what Kubernetes offers for your business.

Kubernetes deployment and Kubernetes distribution for software applications enables businesses to create, test and deploy applications more efficiently.

Key features of Kubernetes include the following:

+ CI/CD pipeline tools that enable visual version control systems, offer the Docker registry and provide Kubernetes clusters 
+ The ability to create and build storage to maintain locally or in the cloud 
+ Automated roll-outs and roll-backs for resource load-balancing 
+ Kubernetes ingress provisions, which is an API-based function that routes external user access 
+ Development standardization for creating, testing, deploying and monitoring applications 
+ Availability on the Linux distribution package 
+ Ease and accessibility in installation 

You might think of Kubernetes as the best option for DevOps to configure and customize application templates with more direct command-line controls. For deploymentconfig and many controllers - such as replication and namespace controllers - Kubernetes might be considered a more comprehensive option.

OpenShift features

OpenShift is a cloud-based container orchestration platform that runs on Linux and includes multiple additional features and access controls, which some businesses may deem more important.

The platform is designed to support better scaling and efficiency for cloud-based development on IBM, Amazon and other enterprise cloud services.

Key features of OpenShift are as follows:

+ CI/CD pipeline definitions are standardized for easier integration and scaling 
+ Includes default container automation tools 
+ Offers the Kubernetes' command line interface (CLI), "kubect1" in addition to "oc," OpenShift's CLI 
+ OpenShift has become an integral building-block to application development because of its ease of compatibility with most cloud platforms 
+ Enables easy migration of container applications to the cloud 
+ Supports Kubernetes features and the Kubernetes platform, but with greater security features 
+ Builds upon line stability and user access with comprehensive route and access controllers 
+ Security features align with compliance regulations 

OpenShift's platform may be a more attractive option for businesses seeking out-of-the-box automation and more compliance features.

Core differences between Kubernetes and OpenShift

At their core, both Kubernetes and OpenShift can deploy and run on public cloud and local environments to enable a better end user experience. But the fundamental differences are the most significant considerations for business.

+ Support: If you're seeking more support and more hands-on guidance, OpenShift is a product that comes with customer service; Kubernetes, as an open-source project, does not. It is important to note that companies that offer managed services, such as Haproxy or RBAC, do provide these types of services. Additionally, OpenShift offers out-of-the-box plug-in network solutions, whereas Kubernetes is third-party integrative. 
+ Security: OpenShift offers fewer installation features and options. What underpins this is OpenShift's focus on greater security controls. 
+ Web console: Kubernetes' web UI must be installed and requires extra steps in authentication to use. OpenShift provides a login-based console to visually manage cluster roles and projects. 
+ Templates: Kubernetes provides more templates with Kubernetes Helm, and it is known to be simpler to use. 

Applications and considerations for SME business

Use-case applications for both container orchestration options merit a more focused look at the type of industry for which each one better serves.

High-use apps that need regular updates may look to Kubernetes for its update-friendly system. For example, gaming and social spaces may utilize Kubernetes more extensively. 

On the other hand, compliance-heavy apps - such as healthcare, education or government apps - may require a more secure, stringent environment. OpenShift is designed for "greater regulatory-readiness" and meets GDPR, HIPAA compliance regulations, for instance.

For new businesses, particularly for smaller enterprise businesses, OpenShift may be more attractive for its increased support, including easier deployment of CI/CD clusters.

IBM Cloud: OpenShift and Kubernetes solutions 

IBM offers both Kubernetes and OpenShift as distinct services with IBM Cloud.

In fact, "The Forrester Wave: Multi-cloud Container Development Platforms" named Red Hat OpenShift on IBM Cloud Service the leader for Q3 2020. 

Additionally, IBM is a certified Kubernetes solution, as a KCSP certified provider and as part of the CNCF. 

You can build and deploy OpenShift container clusters in any environment with IBM Cloud Satellite. Businesses can also utilize Red Hat OpenShift tools and APIs with cloud options. IBM provides every form of compliance (e.g., SOC1, 2; GDPR; FIPS 140-2 Level 4) and lets businesses access Jenkins as part of the OpenShift catalog as well as product expert support.

+ Learn more about IBM Cloud Kubernetes Service. 
+ Learn more about Red Hat OpenShift on IBM Cloud. 

IBM Cloud Education

IBM Cloud Education

Follow IBM Cloud

Be the first to hear about news, product updates, and innovation from IBM Cloud.


=======asdf37======== Q\Go K8s\$\421a92fdca0208f8ad8ab7a675b23244.txt
https://www.tabnine.com/blog/top-7-golang-ides-for-go-developers/
TITLE: Top 7 Golang IDEs for Go Developers

The programming language Go (also known as Golang) may not be the most popular programming language out there. It does, however, offer an evolving approach to development and an active community. Today, Golang is supported by most popular text editors and IDEs through the use of plugins. That said, there are also quite a few less-known Golang IDEs worth checking out.

Before we list the best and most efficient IDEs for developing and debugging Golang applications? It's worth reviewing (briefly) what Golang actually is and who uses it.

What is Golang?

Developed in Google from 2007 and released in 2009, Golang is an open-source procedural programming language. It's developers, Griesemer, Pike & Thompson, took inspiration from other languages like C, Oberon, Pascal, Newsqueak and Smalltalk to bring to life Go.

One of the main advantages of Golang is that it supports concurrent programming. This allows multiple processes to run concurrently through the use of channels and goroutines. Being a robust programming language, Golang was used to develop Docker and Kubernetes. On the consumer side, Go is the code behind Netflix and Dropbox.

Top 8 Golang IDEs

1. LiteIDE

The first Golang IDE on our list is also perhaps the most Golang centric one that has been targeting Go developers since its inception in 2012. LiteIDE is a simple, open source, cross-platform Go IDE that highly resembles Visual Studio and GCC C++. If you're feeling nostalgic, you'll be right (back) at home with LiteIDE.

Since it was designed for Golang, LiteIDE has a number of useful features for developers right out of the box. These include configurable build commands, an advanced code editor, and (of course) extensive Golang support. Other features include code management, a gdb and Delve debugger, auto-completion and theming with WordApi, MIME type based system, and more.

As is to be expected with a FOSS solution, Lite IDE can run on Windows, MacOS and Linux operating systems. In addition, it is frequently updated and has a loyal community of users.

2. Atom with Go-Plus

Developed by GitHub, Atom is a popular text editor that dubs itself "hackable". Being that, Atom is a lightweight framework for various plugins that enable the majority of its functionality.

When it comes to using Atom to develop in Go, you will need the Go-Plus plugin. It adds to your Arom installation the tools, build flows, linters, vet, and coverage tools you need to develop in Golang. You can also use its features for autocomplete, formatting, testing, and documentation.

It's worth noting that you will need to install dive with the go-debug package to allow for more in-depth debugging. In addition, it seems the latest release of the Go-Plug package was published on GitHub all the way back in 2019. Which means it may not be as well maintained as one would like.

3. VSCode

Another popular code editor with extensive support for Golang is VSCode. Much like other extendable text editors, Visual Studio Code will demand you install a plugin to code, debug and perform other actions on Go code. 

Using the Go extension for Visual Studio Code, you get language code navigation, symbol search, bracket matching, snippets, and many other features to help you write better Go code in your familiar VSCode environment.

The Go plugin for VSCode is developed and maintained by the Go team at Google, so upgrades and fixes are frequent.

4. Vim-go

Vim is a popular cross-platform open source text editor with a plethora of plugins offering support for most programming languages out there. Golang is no exception. The vim-go plugin is free, easy to install, and is well-maintained with frequent updates on Github.

Upon installation, vim-go will arm your VIM text editor with Go package compilation, folding and syntax highlighting, integrated delve support, and anything else you may need to write applications in Golang.

Since this is an open source project, you will need to turn to the community for support when you come across any trouble. That said, you will find most of what you need in the project documentation.

5. GoSublime

If Sublime is your choice of text editor, then the GoSublime plugin collection will give you (most of) what you need. GoSublime is an IDE-like plugin for Sublime Text 3 (mainly, but not limited to). According to its description, it provides integration for most of your Go/Golang development tools. Well-maintained and supported financially, the GoSublime plugin boasts 3.4k stars on GitHub alone. 

It's worth noting that you may need some additional plugins to make the most of Sublime as a Golang IDE. One such plugin is the Golang Build package, which is the official Sublime Text package for Go build system integration.

6. GoLand

JetBrains is known for Intellij IDEA and its flavors made for specific languages. In this case, GoLand is the JetBrains solution for GoLang developers.

GoLand is a cross-platform IDE built specially for Go developers. It is a commercial IDE, and as such comes with a (modest) price-tag and a rich feature-set. It includes on-the-fly error detection with suggestions for fixes, refactorings with one-step undo, intelligent code completion, dead code detection, and documentation hints. In addition, it comes with powerful GoLang debugging capabilities, user-friendly GoLand code navigation and support for Git, GitHub, and Mercurial out-of-the-box.

For a personal license, you will need to pay US $89.00 for the first year (and less later on). For a business license, the annual cost starts at US $199.00 per user.

7. Zeus IDE

Zeus is a language neutral programmer's IDE for the Windows platform that is known by few. Claiming to be "an IDE letting you code like Mozart rather than coding nursery rhymes", Zeus has quite a bit to offer to Go developers.

Among others, Zeus IDE supports Go tools like gocode for auto-complete, documentation, code navigation, as well as tools like gofmt and goimports for automatic code formatting. There are also macros for Go Guru, fix, vet, gorename and gobuild. Last but not least, as of recently, Zeus also works with the Delve debugger.

You may be wondering why Eclipse and its Go plugin, Goclipse, are not included in the list of top 7 GoLang IDEs. Goclipse was abandoned by its developer in 2017 and so no updates have been made to the project since. The user community was also quick to follow, so support for Golang on Eclipse is limited at best.

Choosing the IDE for your next Golang project will usually be influenced by the usual criteria for IDE selection. If you're already familiar with VSCode or can operate a JetBrains IDE in your sleep? There's really no reason for you to seek out an alternative. All you need to do is install Golang on your machine and add a plugin to your IDE or text editor of choice. But if you are feeling adventurous? Go ahead take this opportunity to discover a new IDE (like LiteIDE or Zeus IDE) to add to your Goland development toolbelt.

Get Tabnine for Free 

Ilana Brudo 

Ilana is a content writer for the Tabnine.com blog

Related Posts

Golang Gin - A Comprehensive Tutorial 

6 min read | May 22, 2022 

Native apps are all the rage, but web apps are better for accessibility and for...

How to Select Vim Code Completion for Any Language 

6 min read | April 17, 2022 

Digitalization is at the forefront of every industry. As more innovative companies compete to produce...


=======asdf38======== Q\Go K8s\$\27fc452c4ad1c37649d5839bd33eb440.txt
https://www.makeuseof.com/what-is-kubernetes/
TITLE: What Is Kubernetes and What Is It Used For?

What Is Kubernetes and What Is It Used For?

By M. Fahad Khawaja 

Published Jul 24, 2021

Share Share Tweet Share Email

Kubernetes is a key part of many developers' workflows. But what is it, and when would you use it?

Thousands of new apps and programs are developed and released every day. Developers are constantly on the lookout for tools that can streamline the development and testing of their apps. A well-developed app that has gone through rigorous testing will end up being successful upon its release.

Kubernetes is a platform that makes it possible for developers to deploy, schedule and manage their containerized applications. It may sound a bit technical to you right now, and that's okay. If you find yourself asking: "what is Kubernetes," or "what is Kubernetes used for?", keep reading to find out.

MAKEUSEOF VIDEO OF THE DAY

What Is Kubernetes?

Initially developed by engineers at Google, Kubernetes became an open-source project in 2014. Today, it is an essential container management solution used by millions of developers worldwide.

Kubernetes is an extensible and portable platform that manages containerized services and workloads for automation and declarative configuration in technical terms. That essentially means that Kubernetes is an open-source platform that makes life easy for developers by automating Linux container operations.

Kubernetes was initially designed and developed by Google, but it is now part of the Cloud Native Computing Foundation (CCNF). The CNCF promotes the development and regulation of cloud data center management software.

What Are Containers?

Containers are application components that combine application source code with the required operating system (OS) dependencies and libraries. Developers prefer using containers for modern cloud-native applications because they are more resource-efficient, portable, and smaller than traditional virtual machines. Another reason developers love using containers is that they are isolated from the underlying operating system.

Once an application is ready, developers package it with the required libraries and supporting code and place it into a container image. You can then execute the container image on any PC with a containerization platform.

You have probably heard of Docker-the largest containerization platform. Many Amazon Web Service (AWS) cloud deployments use Docker due to its sheer power and versatility.

Related: Why Should You Pick Docker Over a Virtual Machine?

Containers vs. Container Orchestration

It is essential to distinguish between a containerization platform such as Docker and a container orchestration platform-Kubernetes. Containerization platforms can build and deploy individual containers, but they cannot simultaneously manage a large volume of users and containers.

Related: Which Container System Should You Use: Kubernetes or Docker?

Container orchestration platforms can efficiently do this and much more, so they are a crucial component for application development. Kubernetes utilizes Docker as its main container virtualization platform.

What Is a Kubernetes Cluster?

A cluster is quite simply a group of nodes that execute a containerized application. Kubernetes is a framework that allows developers to manage a cluster of many containers resiliently. The clusters can run across multiple environments (virtual or physical) and machines.

What Is Kubernetes Used For?

As already discussed, containers are resource-efficient and lightweight to package and run applications. When used in production, it can become quite tedious to manage and automate containers.

On a large-scale containerized application system, this can mean running thousands of containers and microservices. Now managing all of these containers manually is very complex, so container orchestration through Kubernetes allows distributed systems to run resiliently.

Kubernetes will automatically balance network traffic when traffic is high, and it can also mount storage systems such as local storage, public clouds, etc. You also get an added sense of security as it reduces the chances of human error.

Developers can take advantage of fully automating operational tasks that they would otherwise manually do for each container. With Kubernetes, you can utilize hardware resources to the maximum-and even automate and control application updates and deployment. Kubernetes also makes it very easy to scale containerized applications and resources.

You can even create cloud-native apps with the help of Kubernetes patterns. For added registry, networking, or telemetry functionality, developers integrate Kubernetes with other projects such as Docker Registry, OpenVSwitch, Kibana, and so on.

How to Install Kubernetes

You can install Kubernetes in several ways; some of the more common installation methods are:

+ kubeadm 
+ minikube 
+ kops 
+ Kubernetes on Google Cloud Platform 

In this article, we are going to focus on installing Kubernetes through minikube. This is a local Kubernetes environment that makes it ideal for beginners to learn and develop the application.

The minimum system requirements for installing minikube are as follows:

+ At least 2GB free memory (RAM). 
+ 20GB of free disk space on your SSD or hard drive. 
+ At least 2 computer processing units (CPUs). 
+ Virtual machine manager (such as VMWare or Virtual) or container (Docker). 

We recommend downloading the stable release to avoid unnecessary issues as you get started with the Kubernetes environment.

Install Kubernetes on Windows

You can install minikube through the Windows Package Manager or using a stand-alone Windows installer on a Windows PC.

Let's look at how you can install minikube through the .exe Windows installer:

+ Download the minikube installer from the official website. 
+ Locate the downloaded file and launch it as administrator 
+ Complete the installation wizard to install minikube. 

Once you have installed minikube on your Windows PC, you can get started through a command-line terminal.

Install Kubernetes on Linux

Installing packages on Linux is pretty straightforward, and minikube is no different; you just need to know the architecture of your system. If you are unsure about what architecture your Linux is, run the following command on the terminal:

uname -m

The Ubuntu system we're using shows x86-64 meaning this is a 64-bit operating system.

It is crucial that you select the correct architecture and the installer type (Binary, Debian, or RPM) from the minikube installation page. Once you're sure about the system architecture and the installer type, you can run the relevant command on the terminal to install minikube.

We installed a stable binary installer on our 64-bit Ubuntu operating system with the following commands:

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

Install Kubernetes on macOS

You can easily install minikube on macOS through the macOS terminal. If you have the Homebrew Package Manager installed, you just need to enter the following command on the terminal to install minikube:

brew install minikube

If you don't have Homebrew installed, then you can do so with the following command:

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

Once you have installed minikube, you can get started working on creating clusters for your cloud apps.

Kubernetes for Containerized Applications: The Go-To for Many Developers

Kubernetes is an essential tool in deploying, configuring, monitoring, and managing large-scale containerized applications. If you are looking into a career in dev-ops, then we highly recommend getting acquainted with Kubernetes.

How to Safely Test Desktop Applications in a Secure Container With Docker

Read Next

Share Share Tweet Share Email 

Related Topics

+ Technology Explained 
+ Programming 
+ App Development 

About The Author

M. Fahad Khawaja (114 Articles Published) 

Fahad is a writer at MakeUseOf and is currently majoring in Computer Science. As an avid tech-writer he makes sure he stays updated with the latest technology. Apart from that, he is also a sports enthusiast.

More From M. Fahad Khawaja 

Subscribe to our newsletter

Join our newsletter for tech tips, reviews, free ebooks, and exclusive deals!

Click here to subscribe

Close 

Read Next

The Ultimate List of Helpful Windows Alt Codes to Insert Special Characters 

The 20 Best Android TV Apps Worth Installing ASAP 

How to Pin Multiple Instagram Posts to Your Profile 

Linux vs. Windows vs. macOS: Which Is the Operating System for You? 

How to Add the "Open with Notepad" Option to the Context Menu in Windows 

10 Features Still Missing From WhatsApp 

Did You Know Your Samsung Phone Has a Hidden SOS Flashlight? Here's How to Enable It 


=======asdf39======== Q\Go K8s\$\2e254e97fc7dfb7c06f88e088f60077c.txt
https://www.geeksforgeeks.org/kubernetes-concept-of-containers/

+ Kubernetes vs Docker
+ Kubernetes - Taint and Toleration
+ Kubernetes - Physical Servers vs Virtual Machines vs Containers
+ Kubernetes - Cluster IP vs Node-Port
+ Kubernetes - Monolithic Architecture of Kubernetes
+ How to Enable JMX For Java Application Running in the Kubernetes Cluster?
+ Kubernetes - Installation Methods
+ Enable Remote Debugging For Java Application Deployed in Kubernetes Environment
+ Installing Private Git Server on K8s Cluster with Gitea and AKS

+ Kubernetes vs Docker
+ Kubernetes - Taint and Toleration
+ Kubernetes - Physical Servers vs Virtual Machines vs Containers
+ Kubernetes - Cluster IP vs Node-Port
+ Kubernetes - Monolithic Architecture of Kubernetes
+ How to Enable JMX For Java Application Running in the Kubernetes Cluster?
+ Kubernetes - Installation Methods
+ Enable Remote Debugging For Java Application Deployed in Kubernetes Environment
+ Installing Private Git Server on K8s Cluster with Gitea and AKS

Kubernetes - Concept of Containers

+ Difficulty Level : Easy
+ Last Updated : 13 Jun, 2022

Kubernetes is an open-source container orchestration framework that was originally developed by Google.

So now, the question arises, "what's container orchestration?".

Container orchestration is automation. It can facilitate you to deploy the identical application across different environments like physical machines, virtual machines or cloud environments, or perhaps hybrid deployment environments and makes it easier for the management, scaling, and networking of containers.

The original name for Kubernetes (originates from Greek) within Google was Project 7. Within the year 2014 Kubernetes was released for the primary time and made open-sourced too after using it to run production workloads at scale for quite a decade. Also, pure open-source Kubernetes is free and might be downloaded from its repository on GitHub.

It is pronounced as "koo-burr-NET-eez". It's also referred to as k8s (k - eight characters - s), derived by replacing the eight letters with the digit 8.

Features of Kubernetes

Following are the various features or characteristics of Kubernetes:

+ Multi-Host Container Scheduling: Done by Kube-scheduler, it assigns containers, also referred to as pods in Kubernetes to nodes at runtime. It accounts for resources, quality of service, and policies before scheduling.
+ Scalability and availability: The Kubernetes master is often deployed during a highly available configuration. Multi-region deployments are available as well.
+ Flexibility and modularization: Kubernetes includes a plug-and-play architecture that permits you to increase it when you need to. There are specific add-ons from network drivers, service discovery, container runtime, visualization, and command. If there are tasks that you need to perform for your environment specifically, you'll be able to create an add-on to suit your needs.
+ Registration: New worker nodes can register themselves with the Kubernetes master node.
+ Service discovery: Service discovery allows for automatic detection of new services and endpoints via DNS or environment variables.
+ Persistent storage: It is a much-requested feature when working with containers. Pods can use persistent volumes to store data and therefore the data is retained across pod restarts and crashes.
+ Maintenance: When it involves Kubernetes maintenance and upgrades, Kubernetes features are always backward compatible for some versions. All APIs are versioned and when upgrading or running maintenance on the host, you'll unschedule the host so that no deployments can happen thereon. Once you're done, you'll simply turn the host back on and schedule deployments or jobs.
+ Logging and Monitoring: In terms of logging and monitoring, application monitoring or health checks are also built-in, TCP, HTTP, or container exact health checks are available out of the box. There are also health checks to give you the status of the nodes and failures monitored by the node controller. Kubernetes status can also be monitored via add-ons like Metrics Server, cAdvisor, and Prometheus. And lastly, you can use the built-in logging frameworks or if you choose, you can bring your own.
+ Secrets Management: Sensitive data is a first-class citizen in Kubernetes. Secrets mounted to data volumes or environment variables. They're also specific to a single namespace so aren't shared across all applications.

Architecture of Kubernetes

The architecture of Kubernetes includes a master node and one or more worker nodes.

Understanding the Master node:

+ Kube-apiserver: a frontend of the cluster that allows you to interact with the Kubernetes API and connects to the etcd database.
+ Kube-scheduler: schedules pods on specific nodes supported labels, taints, and tolerations set for pods
+ etcd: a database, stores all cluster data which includes job scheduling info, pod details, stage information, etc.
+ Kube - controller - manager: manages the current state of the cluster
+ cloud - controller - manager: interacts with outside cloud manager

Different optional add-ons: DNS, Dashboard, cluster-level resource monitoring, cluster-level logging

Understanding the Worker node:

We wouldn't get anywhere without Worker Nodes, though. These Worker Nodes are the Nodes where your applications operate. The Worker Nodes communicate back with the Master Node. Communication to a Worker Node is handled by the Kubelet Process.

+ kubelet: passes requests to the container engine to ensure that pods are available
+ Kube-proxy: runs on every node and uses iptables to provide an interface to connect to Kubernetes components
+ container - runtime: take care of actually running container
+ network agent: implements a software-defined networking solution

Containers of an application are tightly coupled together in a Pod. By definition, a Pod is the smallest unit that can be scheduled as deployment in Kubernetes. Once Pods have been deployed, and are running, the Kubelet process communicates with the Pods to check on state and health, and therefore the Kube-proxy routes any packets to the Pods from other resources that might be wanting to communicate with them.

Installing of Kubernetes:

In this section, we will learn how to install Kubernetes on the Linux platform. So, follow the given steps for installing the Kubernetes:

Step 1: First of all, we have to update our apt-get repository.

sudo apt-get update

Step 2: Install apt transport HTTPS. This is basically used to make repositories while HTTPS.

sudo apt-get install -y apt-transport-https

Step 3: Install the docker dependency

sudo apt install docker.io

Step 4: After installing the docker we have to start and enable the docker.

sudo systemctl start docker
sudo systemctl enable docker

Step 5: We have to install the necessary components for Kubernetes. Before that, we have to install the curl command because the curl command is used to send the data using URL syntax. Let's install the curl command by:

sudo apt-get install curl

Step 6: Download an add key for Kubernetes installation from a URL.

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add

Step 7: We have to add a repository in a certain location.

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

Step 8: Now check for any updates available.

sudo apt-get update

Step 9: Now we are going to install Kubernetes components.

sudo apt-get install -y kubectl kubeadm kubelet kubernetes-cni docker.io

Step 10: We have to initialize the master node and to do this we have to first use a swapoff command to disable the swapping on other devices.

sudo swapoff -a

Step 11: Go ahead with the initialization.

sudo kubeadm init

Step 12: To start using your cluster, you need to run the following as a regular user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Step 13: To deploy paths, use the following command:

sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml

Step 14: To see all the pods you have, use the command:

sudo kubectl get pods --all-namespaces

Pros:

+ Using Kubernetes and its huge ecosystem can improve your productivity.
+ It is a future-proof solution.
+ It helps to make your application run more stable.

Cons

+ It can be overkill for simple applications.
+ It is very complex and can reduce productivity.
+ It can be more expensive than its alternatives.

How to Install Lightgbm on Windows?

SQL Query to Get Only Numbers From a String

Kubernetes - Monolithic Architecture of Kubernetes

25, Jul 21

Kubernetes - Physical Servers vs Virtual Machines vs Containers

07, Sep 21

Kubernetes - Installation Methods

25, Jul 21

Kubernetes - Cluster IP vs Node-Port

16, Jan 22

How to Enable JMX For Java Application Running in the Kubernetes Cluster?

Enable Remote Debugging For Java Application Deployed in Kubernetes Environment

Kubernetes vs Docker

06, Nov 21

Kubernetes - Taint and Toleration

15, Oct 21

Installing Private Git Server on K8s Cluster with Gitea and AKS

25, Mar 22

Enable Remote Debugging For Java Application Deployed in Kubernetes Environment

How to Enable JMX For Java Application Running in the Kubernetes Cluster?

Kubernetes - Cluster IP vs Node-Port

16, Jan 22

mehabhalodiya

@mehabhalodiya

Current difficulty : Easy

+ khushb99

+ Picked
+ TrueGeek-2021
+ Kubernetes
+ TrueGeek

Most popular articles

+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Learn C++ Programming Step by Step - A 20 Day Curriculum!
+ Must Do Coding Questions for Product Based Companies
+ GeeksforGeeks Jobathon - Are You Ready For This Hiring Challenge?
+ Top 10 Programming Languages to Learn in 2022

Most visited in TrueGeek

+ How to redirect to another page in ReactJS ?
+ How to remove duplicate elements from JavaScript Array ?
+ How to Convert Char to String in Java?
+ Basics of API Testing Using Postman
+ Types of Internet Protocols


=======asdf40======== Q\Go K8s\$\28a5fd764e656fd52b24c4e890a91bfb.txt
https://www.geeksforgeeks.org/introduction-to-kubernetes-k8s/

+ HELM 101: An Introduction to Package Manager for Kubernetes
+ Introduction to Kubernetes (K8S)
+ Introduction to Docker
+ Containerization using Docker
+ Virtualisation with Docker Containers
+ chroot command in Linux with examples
+ Linux Virtualization - Chroot Jail
+ Linux Virtualization : Resource throttling using cgroups
+ Linux Virtualization : Linux Containers (lxc)
+ Linux File Hierarchy Structure
+ proc file system in Linux
+ top command in Linux with Examples
+ ps command in Linux with Examples
+ kill command in Linux with Examples
+ chmod command in Linux with examples
+ chown command in Linux with Examples
+ chgrp command in Linux with Examples
+ groupadd command in Linux with examples
+ useradd command in Linux with Examples
+ userdel command in Linux with Examples
+ usermod command in Linux with Examples
+ How to Change the username or userID in Kali Linux?
+ How to Change Root Password in Kali Linux?
+ Kali Linux - Default Passwords
+ Kali Linux - Password Cracking Tool
+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Practice for cracking any coding interview
+ Must Do Coding Questions for Product Based Companies
+ Must Do Coding Questions Company-wise
+ Top 10 Projects For Beginners To Practice HTML and CSS Skills

+ HELM 101: An Introduction to Package Manager for Kubernetes
+ Introduction to Kubernetes (K8S)
+ Introduction to Docker
+ Containerization using Docker
+ Virtualisation with Docker Containers
+ chroot command in Linux with examples
+ Linux Virtualization - Chroot Jail
+ Linux Virtualization : Resource throttling using cgroups
+ Linux Virtualization : Linux Containers (lxc)
+ Linux File Hierarchy Structure
+ proc file system in Linux
+ top command in Linux with Examples
+ ps command in Linux with Examples
+ kill command in Linux with Examples
+ chmod command in Linux with examples
+ chown command in Linux with Examples
+ chgrp command in Linux with Examples
+ groupadd command in Linux with examples
+ useradd command in Linux with Examples
+ userdel command in Linux with Examples
+ usermod command in Linux with Examples
+ How to Change the username or userID in Kali Linux?
+ How to Change Root Password in Kali Linux?
+ Kali Linux - Default Passwords
+ Kali Linux - Password Cracking Tool
+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Practice for cracking any coding interview
+ Must Do Coding Questions for Product Based Companies
+ Must Do Coding Questions Company-wise
+ Top 10 Projects For Beginners To Practice HTML and CSS Skills

Introduction to Kubernetes (K8S)

+ Difficulty Level : Medium
+ Last Updated : 05 Jun, 2020

Kubernetes is an open-source Container Management tool which automates container deployment, container scaling, and descaling and container load balancing (also called as container orchestration tool). It is written in Golang and has a huge community because it was first developed by Google and later donated to CNCF (Cloud Native Computing Foundation). Kubernetes can group 'n' number of containers into one logical unit for managing and deploying them easily. It works brilliantly with all cloud vendors i.e. public, hybrid and on-premises. 
Kubernetes is an open-source platform that manages Docker containers in the form of a cluster. Along with the automated deployment and scaling of containers, it provides healing by automatically restarting failed containers and rescheduling them when their hosts die. This capability improves the application's availability.

Features of Kubernetes -

+ Automated Scheduling- Kubernetes provides advanced scheduler to launch container on cluster nodes. It performs resource optimization.
+ Self-Healing Capabilities- It provides rescheduling, replacing and restarting the containers which are died.
+ Automated Rollouts and Rollbacks- It supports rollouts and rollbacks for the desired state of the containerized application.
+ Horizontal Scaling and Load Balancing- Kubernetes can scale up and scale down the application as per the requirements.

Kubernetes Vs Docker

{Docker Swarm}{Kubernetes}

{No Auto-Scaling}{Auto-Scaling}

{Does Auto Load-Balancing}{Manually configure your Load-Balancing settings}

{It performs rolling updates to containers straightaway}{K8S performs rolling updates to Pods as a whole}

{Share storage volumes with any other containers}{Share storage volumes between multiple containers inside the same pods}

{Its uses 3rd party tools like ELK}{K8S provides in-built tools for logging and monitoring}

Architecture of Kubernetes

Kubernetes follows the client-server architecture where we have master installed on one machine and the node on separate Linux machines. It follows the masterslave model, which uses a master to manage Docker containers across multiple Kubernetes nodes. A master and its controlled nodes(worker nodes) constitute a "Kubernetes cluster". A developer can deploy an application in the docker containers via the assistance of the Kubernetes master.

1. Kubernetes-Master Node Components -

Kubernetes master is responsible for managing the entire cluster, coordinates all activities inside the cluster and communicates with the worker nodes to keep the Kubernetes and your application running. This is the entry point of all administrative tasks. When we install Kubernetes on our system we have four primary components of Kubernetes Master that will get installed. The components of Kubernetes Master node are:

a.) API Server- The API server is the entry point for all the REST commands used to control the cluster. All the administrative tasks are done by API server within the master node. If we want to create, delete, update or display in Kubernetes object it has to go through this API server.API server validates and configures the API objects such as ports, services, replication, controllers and deployments and it is responsible for exposing API's for every operation. We can interact with this API's using a tool called kubcetl.
'kubcetl' is a very tiny go language binary which basically talks to the API server to perform any operations that we issue from the command line. It is a command-line interface for running commands against Kubernetes clusters

b.) Scheduler- It is a service in master responsible for distributing the workload. It is responsible for tracking the utilization of working load of each worker nodes and then placing the workload on which resources are available and can accept the workload. The scheduler is responsible for scheduling pods across available nodes depending on the constraints you mention in the configuration file it schedule these pods accordingly. The scheduler is responsible for workload utilization and allocating pod to new node.

c.) Controller Manager- Also known as controllers.It is a daemon which runs in nonterminating loop and is responsible for collecting and sending information to API server. It regulates the kubernetes cluster by performing lifestyle function such as namespace creation and lifecycle event garbage collections, terminated pod garbage collection, cascading deleted garbage collection, node garbage collection and many more. Basically controller watches the desired state of cluster if the current state of the cluster does not meet the desired state then the control loop takes the corrective steps to make sure that the current state is same as that of the desired state. The key controllers are replication controller, endpoint controller, namespace controller, and service account controller. So in this way controllers are responsible for overall health of the entire cluster by ensuring that nodes are up and running all the time and correct pods are running as mentioned in the specs file.

d.) etcd- It is a distributed key-value lightweight database. In Kubernetes, it is a central database for storing the current cluster state at any point of time and also used to store the configuration details such as subnets, config maps etc. It is written in Go programming language.

2. Kubernetes-Worker Node Components -

Kubernetes Worker node contains all the necessary services to manage the networking between the containers, communication with the master node and assign resources to the containers scheduled. The components of Kubernetes Worker node are:

a.) Kubelet- It is a primary node agent which communicates with the master node and executes on each worker node inside the cluster. It gets the pod specifications through the API server and execute the container associated with the pods and ensures that the containers described in the pods are running and healthy. If kubelet notices any issues with the pods running on the worker nodes then it tries to restart the pod on the same node and if the issue is with the worker node itself then the Kubernetes master node detects the node failure and decides to recreate the pods on the other healthy node.

b.) Kube-Proxy- It is the core networking component inside the kubernetes cluster. It is responsible for maintaining the entire network configuration. Kube-Proxy maintains the distributed network across all the nodes, all the pods and across all the containers and also exposes the services across the outside world. It acts as a network proxy and load balancer for a service on a single worker node and manages the network routing for TCP and UDP packets. It listens to the API server for each service endpoint creation and deletion so for each service endpoint it sets up the route so that you can reach to it.

c.) Pods- Pod is a group of containers that are deployed together on the same host. With the help of pods we can deploy multiple dependent containers together so it acts as a wrapper around these containers so we can interact and manage these containers primarily through pods.

d.) Docker- Docker is the containerization platform which is used to package your application and all its dependencies together in the form of containers so to make sure that your application works seamlessly in any environment which can be development or test or production. Docker is a tool designed to make it easier to create, deploy, run applications by using containers. Docker is the world's leading software container platform. It was launched in 2013 by a company called Dotcloud. Its is written in Go language. It has been just six years since Docker was launched yet communities have already shifted to it from VM's. Docker is designed to benefit both developers and system administrators making it a part of many Devops toolchains. Developers can write code without worrying about the testing and production environment. Sysadmins need not worry about infrastructure as Docker can easily scale up and scale down the number of systems. Docker comes into play at the deployment stage of software development cycle.

HELM 101: An Introduction to Package Manager for Kubernetes

Introduction to Docker

HELM 101: An Introduction to Package Manager for Kubernetes

23, Apr 20

Introduction To Machine Learning using Python

04, May 17

Introduction to TensorFlow

04, Aug 17

Visual Cryptography | Introduction

17, Aug 17

SAP | An Introduction

21, Aug 17

Introduction to Convolution Neural Network

21, Aug 17

Introduction to Fragments | Android

07, Sep 17

Virtual Private Network (VPN) | An Introduction

05, Oct 17

Introduction to Retofit 2 in android | Set 1

08, Nov 17

Introduction to Web Scraping

06, Nov 19

Introduction to Tensor with Tensorflow

23, Jan 18

Introduction to Kivy ; A Cross-platform Python Framework

26, Feb 18

Introduction to Xamarin | A Software for Mobile App Development and App Creation

16, Mar 18

Introduction to Web Development and the Holy Trinity of it

27, Apr 18

Introduction to Postman for API Development

28, May 18

Introduction to Blockchain technology | Set 1

18, Jul 18

Robotics | Introduction

13, Aug 18

Introduction to Signals and Systems: Properties of systems

05, Mar 19

DHTML | Introduction

20, Aug 18

Introduction to RSS(Rich Summary Site)

02, Nov 18

Introduction to Microsoft SMB; A network file sharing protocol

12, Nov 18

Introduction to WebRTC

11, Dec 18

Introduction to Apache Cassandra

31, Dec 18

Introduction to Particle Swarm Optimization(PSO)

10, Jan 19

rohnux_26

@rohnux_26

Current difficulty : Medium

+ kumarjaideep

+ GBlog

Most popular in GBlog

+ DSA Sheet by Love Babbar
+ Geek Streak - 24 Days POTD Challenge
+ Get FREE Placement Assistance with GeeksforGeeks LIVE Courses to Upskill Yourself
+ GEEK-O-LYMPICS 2022 - May The Geeks Force Be With You!
+ How Learning To Code Can Change Your Life?

More related articles in GBlog

+ GeeksforGeeks Job-A-Thon Exclusive - Hiring Challenge For Amazon Alexa
+ Types of Software Testing
+ What is Data Structure: Types, Classifications and Applications
+ How to Start Learning DSA?
+ How To Switch From A Service-Based To A Product-Based Company?


=======asdf41======== Q\Go K8s\$\17318ae6d3eb066286e3ef7956ddc99f.txt
https://www.simplilearn.com/tutorials/kubernetes-tutorial/kubernetes-architecture
TITLE: Understanding Kubernetes Architecture and Its Use Cases

Since 2014, Kubernetes has grown immensely in popularity. The adoption of this container deployment tool is still growing among IT professionals, partly because it is highly secure and easy to learn. But with every tool, knowing its architecture makes it easier to understand.

Let's go over the fundamentals of Kubernetes architecture from what it is and why it is important, to a deep dive into what it's made of.

Kubernetes is a flexible container management system developed by Google that's used to manage containerized applications in multiple environments. Initially introduced as a project at Google (as a successor to Google Borg), Kubernetes was released in 2014 to manage applications running in the cloud. The Cloud Native Computing Foundation currently maintains Kubernetes.

Post Graduate Program in DevOps

Designed in collaboration with Caltech CTMEExplore Course

Kubernetes is often chosen for the following reasons:

+ Kubernetes has a better infrastructure than many of the DevOps tools 
+ Kubernetes breaks down containers into smaller modules to enable more granular management 
+ Kubernetes deploys software updates often and seamlessly 
+ Kubernetes lays the foundation for cloud-native apps 

Let us now begin with the introduction to the Kubernetes architecture.

Introduction to Kubernetes Architecture

Kubernetes architecture comprises the following components.

Cluster

+ A collection of servers that combines available resources 
+ Includes RAM, CPU, disk, and devices 

Master

+ A collection of components that make up the control panel of Kubernetes 
+ Consists of both scheduling and cluster events 

Node

+ A single host capable of running on a virtual machine 
+ Runs both Kube-proxy and Kubelet, which are a part of the cluster 

After going through the introduction to Kubernetes architecture, let us next understand the need for the containers.

Free Course: Introduction to Kubernetes

Master the Fundamentals of KubernetesEnroll Now

Need for Containers

With the ever-expanding presence of technology in our lives, downtime on the internet is becoming unacceptable. Hence, developers need to find solutions to maintain and update the infrastructure of the applications we depend on without interrupting other services people depend on. 

The solution is container deployment. Containers work in isolated environments, making it easy for developers to build and deploy apps.

Docker Swarm vs. Kubernetes

{Category} {Docker Swarm } {Kubernetes} 

{Scaling} {No Auto Scaling } {Auto Scaling} 

{Load Balancing} {Autoload Balancing} {Manually configures load balancing} 

{Installation} {Easy and fast} { 

Long and time-consuming

{Scalability} {Cluster strength is weak when compared to Kubernetes} {Cluster strength is strong} 

{Storage Volume Sharing} {Shares storage volumes with any other container} { 

Shares storage volumes between multiple containers inside the same pod

{GUI} {Not available} {Available} 

FREE DevOps Certification Training

Master in-demand DevOps tools and skillsEnroll for FREE

Hardware Components

Nodes

A node is a worker machine on Kubernetes. It is a Virtual Machine or a physical machine based on the cluster. The master maintains the code, and each node contains the necessary components required to run the Kubernetes cluster. 

In Kubernetes, there are two types of nodes, Master Node and Slave Node.

Cluster

Kubernetes does not work with individual nodes; it works with the cluster as a whole. Kubernetes clusters make up the master and slave node and manage it as a whole. There can be more than one cluster in Kubernetes.

Persistent Volumes

Kubernetes persistent volumes are administrator provisioned volumes with the following characteristics.

+ Allocated either dynamically or by an administrator 
+ Created with a particular file system 
+ It has a specific size. 
+ Has identifying characteristics such as volume IDs and a name. 

Kubernetes Persistent Volumes remain on a pod even after the pod is deleted. It's used for the temporary storage of data.

Software Components

Containers

Containers are used everywhere, as they create self-contained environments where applications are executed. The programs are bundled up into single files (known as containers) and then shared on the internet. Multiple programs can be added to a single container; be sure to limit one process per container. Programs run on the Linux package as containers.

Pods

A Kubernetes pod is a group of containers deployed together on the same host. Pods operate one level higher than individual containers, and these groups of containers work together to operate for a single process. Pods provide two different types of shared resources: networking and storage, and are the units of replication in Kubernetes.

Deployment

A deployment is a set of identical pods. It runs multiple replicas of the application, and if in case an instance fails, deployment replaces those instances. Pods cannot be launched on a cluster directly; instead, they are managed by one more layer of abstraction. The manual management of pods is eradicated when deployment is used.

Ingress

Ingress is a collection of routing rules that decide how the external services access the services running inside a Kubernetes cluster. Ingress provides load balancing, SSL termination, and name-based virtual hosting.

Kubernetes Architecture

Kubernetes has two nodes-Master Node and Server Node.

Master

The master node is the most vital component of Kubernetes architecture. It is the entry point of all administrative tasks. There is always one node to check for fault tolerance.

The master node has various components, such as: 

+ ETCD 
+ Controller Manager 
+ Scheduler 
+ API Server 
+ Kubectl 

1. ETCD

+ This component stores the configuration details and essential values 
+ It communicates with all other components to receive the commands to perform an action. 
+ Manages network rules and post-forwarding activity 

2. Controller Manager

+ A daemon (server) that runs in a continuous loop and is responsible for gathering information and sending it to the API Server 
+ Works to get the shared set of clusters and change them to the desired state of the server 
+ The key controllers are the replication controllers, endpoint controller, namespace controllers, and service account controllers 
+ The controller manager runs controllers to administer nodes and endpoints 

3. Scheduler

+ The scheduler assigns the tasks to the slave nodes 
+ It is responsible for distributing the workload and stores resource usage information on every node 
+ Tracks how the working load is used on clusters and places the workload on available resources. 

4. API Server

+ Kubernetes uses the API server to perform all operations on the cluster 
+ It is a central management entity that receives all REST requests for modifications, serving as a frontend to the cluster 
+ Implements an interface, which enables different tools and libraries to communicate effectively 

5. Kubectl

+ Kubectl controls the Kubernetes cluster manager 

Syntax - kubectl [flags]

Slave

The slave node has the following components:

1. Pod

+ A pod is one or more containers controlled as a single application 
+ It encapsulates application containers, storage resources, and is tagged by a unique network ID and other configurations that regulate the operation of containers 

2. Docker

+ One of the basic requirements of nodes is Docker 
+ It helps run the applications in an isolated, but lightweight operating environment. It runs the configured pods 
+ It is responsible for pulling down and running containers from Docker images 

3. Kubelet

+ Service responsible for conveying information to and from to the control plane service 
+ It gets the configuration of a pod from the API server and ensures that the containers are working efficiently 
+ The kubelet process is responsible for maintaining the work status and the node server 

4. Kubernetes Proxy

+ Acts as a load balancer and network proxy to perform service on a single worker node 
+ Manages pods on nodes, volumes, secrets, the creation of new containers, health check-ups, etc. 
+ A proxy service that runs on every node that makes services available to the external host 

After going through the Kubernetes architecture, let us next understand its uses in the enterprise.

DevOps Engineer Master's Program

Bridge between software developers and operationsExplore Course

How is Kubernetes Being Used in the Enterprise?

Some companies merge Kubernetes with their existing systems for better performance. For example, let's take a look at the company Black Rock. Black Rock needed better dynamic access to their resources because managing complex Python installations on users' desktops were extremely difficult. Their existing systems worked, but they wanted to make it work better and scale seamlessly. The core components of Kubernetes were hooked into their existing systems, which gave the support team better, more granular control of clusters.

While Kubernetes gives enterprise IT administrators better control over their infrastructure and, ultimately, application performance, there is a lot to learn to be able to get the most out of the technology. If you would like to start a career or want to build upon your existing expertise in cloud container administration, Simplilearn offers several ways for aspiring professionals to upskill. If you want to go all-in and are already familiar with container technology, you can take our Certified Kubernetes Administrator (CKA) Training to prepare you for the CKA exam. You can even check out the DevOps Engineer Master's Program that can help you will prepare you for a career in DevOps.

Find our DevOps Engineer Online Bootcamp in top cities:

{Name}{Date}{Place}{}

{ DevOps Engineer }{Class starts on 15th Jul 2022, 
Weekdays batch}{Your City}{View Details}

{ DevOps Engineer }{Class starts on 16th Jul 2022, 
Weekend batch}{Chicago}{View Details}

{ DevOps Engineer }{Class starts on 23rd Jul 2022, 
Weekend batch}{Houston}{View Details}

About the Author

Sayeda Haifa Perveez

Haifa Perveez is passionate about learning new technologies and working on them. She is an engineer who loves to travel, read and write. She's always curious about things and very determined to track the latest technologies and the trends that they are creating for the future.

Recommended Programs

DevOps Engineer 

17417 Learners

Container Orchestration using Kubernetes 

8134 Learners

DevOps Certification Training 

20658 Learners

*Lifetime access to high-quality, self-paced e-learning content.

Explore Category

Find DevOps Engineer Master's Program in these cities

DevOps Engineer Training in AtlantaDevOps Engineer Training in AustinDevOps Engineer Training in BostonDevOps Engineer Training in ChicagoDevOps Engineer Training in DallasDevOps Engineer Training in DenverDevOps Engineer Training in HoustonDevOps Engineer Training in IrvingDevOps Engineer Training in JacksonvilleDevOps Engineer Training in Jersey CityDevOps Engineer Training in Kansas CityDevOps Engineer Training in Los AngelesDevOps Engineer Training in MiamiDevOps Engineer Training in Mountain ViewDevOps Engineer Training in NashvilleDevOps Engineer Training in New YorkDevOps Engineer Training in PhiladelphiaDevOps Engineer Training in PortlandDevOps Engineer Training in RaleighDevOps Engineer Training in RichmondDevOps Engineer Training in RochesterDevOps Engineer Training in San FranciscoDevOps Engineer Training in San JoseDevOps Engineer Training in SeattleDevOps Engineer Training in SunnyvaleDevOps Engineer Training in TampaDevOps Engineer Training in TurnerDevOps Engineer Training in Washington D.C

Recommended Resources

How to Become a DevOps Engineer?: Roles, Responsibilities, and Skills Required

DevOps Engineer Resume Guide

Ebook
+ 

What is a DevOps Engineer? DevOps Engineer Salary in India, US and Other Regions

Article
+ 

What is DevOps: DevOps Core, Working, and Uses Explained

Why DevOps

DevOps Career Guide: A Comprehensive Playbook To Becoming A DevOps Engineer

Ebook

prevNext

(c) 2009 -2022- Simplilearn Solutions

Follow us!

Refer and Earn

Company

About usCareers In the media Alumni speak Grievance redressalContact us

Work with us

Become an instructorBlog as guest

Discover

SkillupSkillup SitemapResourcesRSS feedSimplilearn Coupons and Discount OffersCity Sitemap

For Businesses

Corporate trainingPartnersDigital TransformationGovernment

Learn On the Go!

Get the Android AppGet the iOS App

Trending Post Graduate Programs

Project Management Certification Course | Cyber Security Certification Course | PG in Data Science Program | Data Analytics Bootcamp Program | Business Analysis Certification Course | Digital Marketing Certification Program | Lean Six Sigma Certification Course | Cloud Computing Certification Course | Data Engineering Bootcamp | AI and Machine Learning Course | Full Stack Web Development Course

Trending Master Programs

PMP Plus Certification Training Course | Big Data Engineering Courses | Data Science Certification Course | Data Analyst Certification Course | Artificial Intelligence Course | Cloud Architect Certification Training Course | DevOps Engineer Certification Training Course | Advanced Digital Marketing Course | Cyber Security Expert Course | MEAN Stack Developer Course

Trending Courses

PMP Certification Training Course | Big Data Hadoop Certification Training Course | Data Science with Python Certification Course | Machine Learning Certification Course | AWS Solutions Architect Certification Training Course | CISSP Certification Training | Certified ScrumMaster (CSM) Certification Training | ITIL 4 Foundation Certification Training Course | Java Certification Course | Python Certification Training Course

Trending Resources

Python Tutorial | JavaScript Tutorial | Java Tutorial | Angular Tutorial | Node.js Tutorial | Docker Tutorial | Git Tutorial | Kubernetes Tutorial | Power BI Tutorial | CSS Tutorial

+ Terms of Use
+ Privacy Policy
+ Refund Policy
+ Reschedule Policy
+ 
+ (c) 2009-2022 - Simplilearn Solutions. All Rights Reserved. The certification names are the trademarks of their respective owners.

smpl_2022-07-04

+ Disclaimer
+ PMP, PMI, PMBOK, CAPM, PgMP, PfMP, ACP, PBA, RMP, SP, and OPM3 are registered marks of the Project Management Institute, Inc.


=======asdf42======== Q\Go K8s\$\0295a69c59163219065befdd1b5d00ca.txt
https://searx.run/search?q=Golang
TITLE: Golang - searx.run

Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency. It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go. There are two major implementations: * Google's self-hosting "gc" compiler toolchain, targeting multiple operating systems and WebAssembly. * gofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo; with LLVM the combination is gollvm. A third-party source-to-source compiler, GopherJS, compiles Go to JavaScript for front-end web development.

{Paradigm}{Multi-paradigm: concurrent imperative, object-oriented}

{Designed by}{Robert Griesemer, Rob Pike, Ken Thompson}

{Developer}{The Go Authors}

{First appeared}{November 10, 2009}

{Typing discipline}{Inferred, static, strong, structural, nominal}

{Implementation language}{Go, Assembly language (gc), C++ (gofrontend)}

{OS}{DragonFly BSD, FreeBSD, Linux, macOS, NetBSD, OpenBSD, Plan 9, Solaris, Windows}

{License}{3-clause BSD + patent grant}

{Filename extensions}{go}

{Inception}{Tuesday, November 10, 2009}

{Copyright license}{BSD licenses}

{Software version identifier}{1.18.3}

Wikipedia

GitHub profile

Twitter profile

Official website

Wikidata

Suggestions

Cross-platform software </form> High-level programming languages </form> Concurrent programming languages </form> Google software </form> Cross-platform free software </form> Programming languages </form> Statically typed programming languages </form> Systems programming languages </form> Free compilers and interpreters </form> Software using the BSD license </form> C programming language family </form> Procedural programming languages </form> 

Links

Search URL

</form> Download results 

csv</form> json</form> rss</form> 

RSS subscription 

Search results

Go (programming language)

wikidatawikipediaddg definitionscachedproxied

https://en.wikipedia.org/wiki/Go_(programming_language)

wikidatacachedproxied

https://go.dev

What is Go? Golang Programming Language Meaning Explained

Golang Programming Language Meaning Explained. Kolade Chris. Go, also known as Golang, is an open-source, compiled, and statically typed programming language designed by Google. It is built to be simple, high-performing, readable, and efficient. In this article, you'll learn: Where Go came from and where it is now, Why I think you should learn it,

https://www.freecodecamp.org/news/what-is-go-programming-language/

Is Golang Worth Learning - Career Karma

Yes, Golang is still worth learning in 2022 as it has experienced an increase in popularity among developers. According to Stack Overflow's 2020 Developer Survey, Golang moved up to fifth place from ninth place in 2019 on the most loved languages list. The same survey reported that Golang programmers had the third-highest median salaries in 2020.

https://careerkarma.com/blog/is-golang-worth-learning/

Web Development with Go (Golang) | Developer.com

The standard library support of Go, however, makes web development particularly easy, convenient, and quick. With Golang, web developers simply need the Go compiler and nothing else to get started developing web pages and web apps. The built-in features of Go already include a web server and the net/http package in the standard library, which ...

https://www.developer.com/languages/web-development-golang/

Top 5 Golang Frameworks in 2020 - GeeksforGeeks

Golang (or Go) is an open-source compiled programming language that is used to build simple, systematic, and secure software. It was designed by Google in the year 2007 and has been readily adopted by developers all over the world due to its features like memory safety, structural typing, garbage collection, and similarity to C-language.

https://www.geeksforgeeks.org/top-5-golang-frameworks-in-2020/

Hello World in Golang - GeeksforGeeks

Hello World in Golang. Hello, World! is the first basic program in any programming language. Let's write the first program in the Go Language using the following steps: First of all open Go compiler. In Go language, the program is saved with .go extension and it is a UTF-8 text file. Every program must start with the package declaration.

https://www.geeksforgeeks.org/hello-world-in-golang/

Golang - GOPATH and GOROOT - GeeksforGeeks

Getting the current date and time with timestamp in local and other timezones in Golang. 08, Jun 20. Difference between var keyword and short declaration operator in Golang. 01, Jul 19. Anonymous Structure and Field in Golang. 09, Aug 19. main and init function in Golang. 30, Aug 19.

https://www.geeksforgeeks.org/golang-gopath-and-goroot/

Class and Object in Golang - GeeksforGeeks

Just as there are provisions for the functionality of a class but no class keyword, the same is the case with objects in Go. Objects or rather a variable can be instantiated with the particular class type and the variable can be further used exactly as one would use an object in any other language. For instance: Line2: obj := X () Line2 is a ...

https://www.geeksforgeeks.org/class-and-object-in-golang/

Get familiar with workspaces - The Go Programming Language

With Go workspaces, you control all your dependencies using a go.work file in the root of your workspace directory. The go.work file has use and replace directives that override the individual go.mod files, so there is no need to edit each go.mod file individually. You create a workspace by running go work init with a list of module directories ...

https://go.dev/blog/get-familiar-with-workspaces

Golang Assignment Operators - Includehelp.com

Assignment operators are used for assigning the expressions or values to the variable/ constant etc. These operators assign the result of the right-side expression to the left-side variable or constant. The " = " is an assignment operator. Assignment operators can also be the combinations of some other operators (+, -, *, /, %, etc.) and " = ".

https://www.includehelp.com/golang/assignment-operators.aspx

Using an SQL database in Golang - LogRocket Blog

Golang has been able to provide support for handling timeouts, which are used to execute queries with timeout and cancellation. What this entails is that we can cancel a database query if the client cancels the request or also set a timeout to cancel a query. These can be achieved using the Golang's context.Context instance:

https://blog.logrocket.com/using-sql-database-golang/

Pointers in Golang - GeeksforGeeks

Pointers in Golang. Pointers in Go programming language or Golang is a variable that is used to store the memory address of another variable. Pointers in Golang is also termed as the special variables. The variables are used to store some data at a particular memory address in the system. The memory address is always found in hexadecimal format ...

https://www.geeksforgeeks.org/pointers-in-golang/

go-gota/gota: Gota: DataFrames and data wrangling in Go (Golang) - GitHub

DataFrames support a number of methods for wrangling the data, filtering, subsetting, selecting columns, adding new columns or modifying existing ones. All these methods can be chained one after another and at the end of the procedure check if there has been any errors by the DataFrame Err field. If any of the methods in the chain returns an ...

https://github.com/go-gota/gota

Golang vs Python: Full Difference Explained - InterviewBit

Python is a dynamically typed language, while Golang is a statically typed language, which helps you to detect flaws at compile-time, further reducing serious glitches later in the production. Python is the best choice for basic programming. Python can become complex if one prefers to build complicated systems.

https://www.interviewbit.com/blog/golang-vs-python/

17 Best Golang Books in 2022 [Learn Beginner and ... - RealToughCandy

Now let's check out the best Go books of all time. 1. The Go Programming Language. Ideal for: developers with some prior programming experience in any language. Topics covered: Golang fundamentals. The Go Programming Language by authors Alan A. A. Donovan and Brian W. Kernighan is the go-to book to learn Golang.

https://realtoughcandy.com/best-golang-books/

Using Enums (and Enum Types) in Golang - Soham Kamani

Using Enums (and Enum Types) in Golang Updated on May 15, 2022. This post will describe how to implement and use enumerations (or enum types) in Go.. Enums are types that contain only a limited number of fixed values, as opposed to types like int or string which can have a wide range of values.. This is useful for many situations: For example, when describing seasons in temperate climates, you ...

https://www.sohamkamani.com/golang/enums/

A 7-point language comparison of Ballerina vs. Golang

Golang introduces concurrency in the form of goroutines to execute functions asynchronously and communicate values. Meanwhile, Ballerina uses lightweight communication mechanisms for both inbound and outbound interactions, as well as for the fork/join constructs that support multiple parallel executions and data processing tasks.

https://www.techtarget.com/searchappar[...]uage-comparison-of-Ballerina-vs-Golang

SIGSEGV: segmentation violation code=0x1 - help . Issue #49992 . golang/go

SIGSEGV: segmentation violation code=0x1 - help . Issue #49992 . golang/go . GitHub. Closed. cranzy opened this issue on Dec 5, 2021 . 16 comments.

https://github.com/golang/go/issues/49992

Install Go (Golang) on CentOS 7 / RHEL 7 | ComputingForGeeks

Step 3 - Test your Go Installation on CentOS 7 / RHEL 7. Here, we want to test our Go installation by setting up a simple workspace then building a simple Hello World program using Golang. First, create a workspace directory. mkdir ~/go. Then create a Go file for the Hello World program. mkdir -p ~/go/src/hello.

https://computingforgeeks.com/install-go-golang-on-centos-rhel-linux/

Golang Maps - GeeksforGeeks

Golang Maps is a collection of unordered pairs of key-value. It is widely used because it provides fast lookups and values that can retrieve, update or delete with the help of keys. It is a reference to a hash table. Due to its reference type it is inexpensive to pass, for example, for a 64-bit machine it takes 8 bytes and for a 32-bit machine ...

https://www.geeksforgeeks.org/golang-maps/

IOC-golang: A golang dependency injection framework

IOC-golang Docs. ^^ ^^. ^^ README. IOC-golang is a powerful golang dependency injection framework that provides a complete implementation of IoC containers. Its capabilities are as follows: Dependency Injection. Supports dependency injection of any structure and interface, we also support object life cycle management mechanism.


=======asdf43======== Q\Go K8s\$\e0daeb3c365d629bfb022a3c6a848e6c.txt
https://www.simplilearn.com/tutorials/kubernetes-tutorial
TITLE: Kubernetes Tutorial

Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services-with a framework to run distributed systems resiliently. Kubernetes is also responsible for scaling requirements, failover, deployment patterns, scaling, load balancing, logging, and monitoring, much like PaaS offerings, and operates at the container level rather than at the hardware level. In this Kubernetes tutorial you'll learn the benefits of using Kubernetes, differences between Docker Swarm and Kubernetes, various features like portability and framework support, and also learn how to install it on Ubuntu. So start learning now, understand the Kubernetes architecture, prepare yourself for a Kubernetes interview, and become an expert in the field of development.

Skills Covered

+ Developer environment
+ QA/Testing process
+ Automatic Resource Bin Packing
+ Container Deployment Control 
+ Service Discovery and Load Balancing

Watch Tutorials

Topics Covered

The topics covered in the Kubernetes tutorial are:

+ What is Kubernetes? 
+ Kubernetes Architecture 
+ Kubernetes Interview Questions and Answers 

Why learn Kubernetes?

The Kubernetes tutorial will ready you with a cloud computing concept that is cutting-edge and is actively being adopted. It's the next big thing after Virtual Machines as it simplifies the process application deployment to great extents. As more businesses start using Kubernetes, they will need certified Kubernetes DevOps professionals, making it an emerging career prospect. 

At this time, it is being used in top organizations such as Spotify, Google Cloud Platform, and SAP, and Pinterest. This Kubernetes tutorial will teach you skills that will help you prepare for relevant Kubernetes job openings. 

Applications of Kubernetes

Kubernetes was primarily developed to solve deployment hassles for engineers working with technologies that use containerized solutions such as Docker. This Kubernetes tutorial covers the following key applications of Kubernetes used across the industry. 

1. Deploying Distributed Workloads

Kubernetes enables developers to deploy their applications in distributed environments by providing a controllable framework. They can connect the Kubernetes API for managing application workloads across multiple containers. This enables them to build a robust system that automates several server management processes.

It also reduces the system upkeep as Kubernetes features several DevOps processes in-built. Commonly, developers use this for deploying the following type of applications. 

+ Stateless Applications 
+ Batch Jobs 
+ Stateful Applications 
+ Daemons 

2. Managing Containerized Applications

Applications that have complex dependencies usually present challenges while migration and execution of updates. With Kubernetes, this problem is solved as applications can be packed in the container form. 

Kubernetes provides an interface for managing containerized applications so that the process of development to deployment can be made simpler. Therefore, it has a strong use case in the container DevOps that are harder to manage using other practices.

It comes with the following features for managing containerized applications.

+ Create and configure new containers 
+ Remove existing containers 
+ Setup ports for multiple containers 
+ Merge code from several containers into one 
+ Manage releases and rollbacks for containers 

3. DevOps Automation

Kubernetes finds significant application in the DevOps domain as it automates several processes associated with it. When applications are being deployed in distributed environments, it's hard to track each resource usage, actively manage infrastructure for all of them. 

But with Kubernetes, a majority of DevOps tasks are controlled automatically. Some of them are mentioned below. 

+ Automatic Resource Scheduling - By configuring the specific resource requirements of every application, Kubernetes automatically schedules the containers as per their resource usage. This allows the dynamic management of unused resources, leading to better resource utilization. 
+ Automatic Health-Checks - Users can define automatic health checks that are used by Kubernetes to scan applications for discrepancies automatically. In case a fault is discovered, or a container crashes inadvertently, Kubernetes steps in to initiate repair protocols as well as notifying the system admin. 
+ Automatic Rollbacks and Releases - Kubernetes makes the tedious process of releasing application updates a lot easier by automating the release process. In case conflicts or health issues are found in releases, the rollback can also occur automatically. 

4. Deploying Hybrid Cloud Environments

Kubernetes has been developed with the vision to support the hybridization of cloud resources. This refers to creating a balanced system that utilizes Virtual Machines in alignment with containerized applications.

This hybrid system makes it easy for a business that relies genuinely on its legacy cloud to adopt Kubernetes easily. The process is called creating Heterogeneous Clusters that strike the perfect balance between containers and individual servers. 

In addition to that, Kubernetes also allows the utilization of resources from other public clouds such as AWS and Microsoft Azure. You can configure a workflow that uses AWS Elastic Block Storage for persistent storage in your solution. 

Who Should Learn Kubernetes? 

Kubernetes primarily deals with server and system management. Hence, it is best suited for IT administrators and Cloud Engineers who want to foray into the role of Kubernetes Administrator. 

All kinds of Cloud Infrastructure Management professionals, may it be DevOps engineers or System Admins can benefit from learning Kubernetes. The quick adoption of the technology in enterprise IT signals that a firm career footing can be developed based on Kubernetes' skills. The Kubernetes tutorial covers all these things comprehensively. 

Some of the prerequisites on your path to learning Kubernetes will be a decent knowledge of how Docker and containers work. These systems are different from Virtual Machines and Virtual Private Servers, which are widely used in the industry. 

Other concepts such as Network Configuration and Linux will also come handy in grasping Kubernetes quickly but are not mandatory. Many cloud engineers with prior experience are enhancing their skills with Kubernetes. 

Kubernetes Tutorial: Table of Contents

1. What is Kubernetes?: Your Next Open Source Platform

Kubernetes is an open-source platform for managing containerized applications with several DevOps features. The platform enables cloud engineers to readily deploy their applications in distributed container clusters without having to worry about aspects like autoscaling or health checks. 

In this Kubernetes tutorial, you will learn about how Kubernetes came into existence and two of its widespread applications in the industry - DevOps and Container Orchestration. 

You will also learn about various Kubernetes features such as Resource Bin Packing and Secure Configuration Management. These features are critical to understanding how Kubernetes works. 

The Kubernetes tutorial covers the benefits of using Kubernetes over Virtual Machines and the added advantages that businesses can extract out of it. This includes everything from making applications highly scalable to increasing the speed at which applications are developed. You will be able to grasp an excellent theoretical overview of Kubernetes before jumping into the core concepts. If you're a beginner, this tutorial will teach you some of the essential prerequisites that will come handy when you're setting up containers. 

2. Understanding Kubernetes Architecture and Its Use Cases

Kubernetes uses a unique architecture to manage disparate systems. You will learn how this architecture operates alongside its components such as Pods, Nodes, Clusters, and the Master. These components interact with each other to lay down the framework in which services run. 

Need for using Kubernetes

Get a primer on the fundamental problems that Kubernetes solves and the need for such a system to exist. The tutorial also reflects upon the concept of containers and how they relate to Kubernetes. 
+ 

Docker Swarm and Kubernetes

Learn the key differences between a related technology called Docker Swarm, which is used in place of Kubernetes. This also includes why Kubernetes is actively replacing Docker Swarm in business applications. 
+ 

Hardware Components

Kubernetes employs the concept of Nodes, Clusters, and Persistent Volumes to develop distributed systems. You'll get an overview of what these hardware components mean and connect.

Also, the tutorial touches upon Pods, Deployment, and Ingress that complete the basics of Kubernetes. Going ahead into running a Kubernetes deployment of your own, you'll need a fair understanding of these concepts. 

Industry Examples

At last, learn how industry environments are using Kubernetes for their benefit. This gives a clear idea about the scope and actual implementation of Kubernetes. 

3. Kubernetes Interview Questions and Answers

Finally, after having covered the basic concepts and details about Kubernetes, the tutorial has the top 30 questions that are usually asked in interviews related to Kubernetes job profiles. 

These questions have been cherry-picked for easy preparation. It's always good to have definite answers to tricky Kubernetes questions such as K8s and Heapster. If you're preparing for an interview any time soon, it'll be worth going through these questions for your advantage. 

You also get to increase your knowledge about the common terminologies and buzzwords surrounding Kubernetes in this Kubernetes tutorial. 

Free course: TensorFlow for Beginners

Learn the Fundamentals of TensorFlowEnroll Now

Begin Learning Kubernetes Tutorial Now

Kubernetes promises infrastructural efficiency and DevOps automation, which is hugely beneficial for most cloud environments. After being open-sourced, technology has gained immense popularity and is showing fast adoption by top companies. 

Therefore, start your Kubernetes journey with our first tutorial lesson on "What is Kubernetes? Your Next Open Source Platform".The lesson will familiarize you with the technology in a detailed manner, covering the theory on which the Kubernetes platform is built. 

You'll be able to answer the fundamental questions such as Why Kubernetes, What are the core features and What benefits does it provide to the users? All these questions must be lurking in your mind since you've heard the term. So, now is the right time to cut the clutter and understand the terminologies properly. 

No matter if you're a complete beginner in IT or have worked with Kubernetes before, this Kubernetes tutorial lesson will help you solidify your understanding of the same. Begin the first lesson now. 

Find our DevOps Engineer Online Bootcamp in top cities:

{Name}{Date}{Place}{}

{ DevOps Engineer }{Class starts on 15th Jul 2022, 
Weekdays batch}{Your City}{View Details}

{ DevOps Engineer }{Class starts on 16th Jul 2022, 
Weekend batch}{Chicago}{View Details}

{ DevOps Engineer }{Class starts on 23rd Jul 2022, 
Weekend batch}{Houston}{View Details}

About the Author

Simplilearn

Simplilearn is one of the world's leading providers of online training for Digital Marketing, Cloud Computing, Project Management, Data Science, IT, Software Development, and many other emerging technologies.

Recommended Programs

DevOps Engineer 

17417 Learners

Container Orchestration using Kubernetes 

8134 Learners

DevOps Certification Training 

20658 Learners

*Lifetime access to high-quality, self-paced e-learning content.

Explore Category

Find DevOps Engineer Master's Program in these cities

DevOps Engineer Training in AtlantaDevOps Engineer Training in AustinDevOps Engineer Training in BostonDevOps Engineer Training in ChicagoDevOps Engineer Training in DallasDevOps Engineer Training in DenverDevOps Engineer Training in HoustonDevOps Engineer Training in IrvingDevOps Engineer Training in JacksonvilleDevOps Engineer Training in Jersey CityDevOps Engineer Training in Kansas CityDevOps Engineer Training in Los AngelesDevOps Engineer Training in MiamiDevOps Engineer Training in Mountain ViewDevOps Engineer Training in NashvilleDevOps Engineer Training in New YorkDevOps Engineer Training in PhiladelphiaDevOps Engineer Training in PortlandDevOps Engineer Training in RaleighDevOps Engineer Training in RichmondDevOps Engineer Training in RochesterDevOps Engineer Training in San FranciscoDevOps Engineer Training in San JoseDevOps Engineer Training in SeattleDevOps Engineer Training in SunnyvaleDevOps Engineer Training in TampaDevOps Engineer Training in TurnerDevOps Engineer Training in Washington D.C

Recommended Resources

How to Become a DevOps Engineer?: Roles, Responsibilities, and Skills Required

DevOps Engineer Resume Guide

Ebook
+ 

What is a DevOps Engineer? DevOps Engineer Salary in India, US and Other Regions

Article
+ 

What is DevOps: DevOps Core, Working, and Uses Explained

Why DevOps

DevOps Career Guide: A Comprehensive Playbook To Becoming A DevOps Engineer

Ebook

prevNext

(c) 2009 -2022- Simplilearn Solutions

Follow us!

Refer and Earn

Company

About usCareers In the media Alumni speak Grievance redressalContact us

Work with us

Become an instructorBlog as guest

Discover

SkillupSkillup SitemapResourcesRSS feedSimplilearn Coupons and Discount OffersCity Sitemap

For Businesses

Corporate trainingPartnersDigital TransformationGovernment

Learn On the Go!

Get the Android AppGet the iOS App

Trending Post Graduate Programs

Project Management Certification Course | Cyber Security Certification Course | PG in Data Science Program | Data Analytics Bootcamp Program | Business Analysis Certification Course | Digital Marketing Certification Program | Lean Six Sigma Certification Course | Cloud Computing Certification Course | Data Engineering Bootcamp | AI and Machine Learning Course | Full Stack Web Development Course

Trending Master Programs

PMP Plus Certification Training Course | Big Data Engineering Courses | Data Science Certification Course | Data Analyst Certification Course | Artificial Intelligence Course | Cloud Architect Certification Training Course | DevOps Engineer Certification Training Course | Advanced Digital Marketing Course | Cyber Security Expert Course | MEAN Stack Developer Course

Trending Courses

PMP Certification Training Course | Big Data Hadoop Certification Training Course | Data Science with Python Certification Course | Machine Learning Certification Course | AWS Solutions Architect Certification Training Course | CISSP Certification Training | Certified ScrumMaster (CSM) Certification Training | ITIL 4 Foundation Certification Training Course | Java Certification Course | Python Certification Training Course

Trending Resources

Python Tutorial | JavaScript Tutorial | Java Tutorial | Angular Tutorial | Node.js Tutorial | Docker Tutorial | Git Tutorial | Kubernetes Tutorial | Power BI Tutorial | CSS Tutorial

+ Terms of Use
+ Privacy Policy
+ Refund Policy
+ Reschedule Policy
+ 
+ (c) 2009-2022 - Simplilearn Solutions. All Rights Reserved. The certification names are the trademarks of their respective owners.

smpl_2022-07-04

+ Disclaimer
+ PMP, PMI, PMBOK, CAPM, PgMP, PfMP, ACP, PBA, RMP, SP, and OPM3 are registered marks of the Project Management Institute, Inc.


=======asdf44======== Q\Go K8s\$\cc6e5ce1aca2ac61667f7cd45e92b837.txt
https://www.geeksforgeeks.org/kubernetes-vs-docker/

So here we are basically discussing what is Kubernetes and Docker, what is the difference between them, how they work, and also discussing some points about Kubernetes vs Docker. Basically, these are not the same thing but the closely related. When you are working with Kubernetes you often be working with Docker. 

What are Containers?

Container package application software with their dependencies in order to abstract from the infrastructure it runs on. Now containers basically offer a logical packaging mechanism in which application can be abstracted from the environment in which they actually run. Now, this decoupling allows container-based applications to be deployed easily and consistently regardless the target environment is a private data center, the public cloud even a developer's personal laptop. 

What is Docker?

Docker is a platform used to containerize your software, using which you can easily build your application, the package than with the dependencies required for your application into the container and further, these containers are easily shipped to run on other machines. Docker is simplifying the DevOps methodology by allowing developers to create templates called images using which u can create the lightweight, a virtual machine called a container. 

Docker is making things easier for software industries giving them the capabilities to automate the infrastructure, isolate the application, maintain consistency and improve resource utilization.

Kubernetes is a container management system developed in the Google platform. It helps you to manage a containerized application in various types of physical, virtual, and cloud environments. Google Kubernetes is a highly flexible tool to deliver even complex applications consistently. Applications run on clusters of 100 to 1000 of individual services.

Key Feature of Kubernetes:

It has a tremendous amount of features which are as follows.

+ Runs everywhere: It is an open-source tool and gives you the freedom to take advantage of on-premises, Public & hybrid cloud infrastructure letting you move your workload to anywhere you want.
+ Automation: For instance, Kubernetes will control for you with servable host the container how it will be launched.
+ Interaction: Kubernetes is able to manage more clusters at the same time. & It allows not only horizontal even vertical scaling also.
+ Additional services: It provides additional features as well as the management of containers, Kubernetes offers security networking & storage services.
+ self-monitoring: It also gives you a provision of self-monitoring as it constantly checks the health of nodes and the container itself.

Key Feature of Docker:

+ Easy configuration: This is one of the key features of Docker in which you can easily deploy your code in less time & effort as you can use Docker in a wide variety of environments. The requirement of the infrastructure is no longer linked with the environment of the application helping in configuring the system easier and faster.
+ You can use swarm: It is a clustering and scheduling tool for Docker containers, SO swarm used the Docker API as a frontend which helps us to use various tools to the controller, it also helps us to control cluster for Docker host as a single virtual host, it is a self-organizing group of engines that is used to enable, pluggable backbends.
+ Manages security: Docker allows us to save secrets in the swarm itself. And then choose to give services access to certain secrets. It includes some important commands to the engine like secret inspection, secretly creating, etc.
+ Services: Service is a list of tasks that lets us specify the state of a container inside of a cluster. Each task represents one instance of a container that should be running and swan schedules them across the nodes.
+ More Productivity: By easing technical configuration & rapid deployment of applications no doubt it has increased productivity, Docker not only helps to execute the application in an isolated environment but it also reduces the resources also.

Pros of Docker:

+ Build app only once: An application inside a container can run on a system that has Docker installed. So there is no need to build and configure apps multiple times on different platforms.
+ More sleep and less worry: With Docker, you test your application inside a container and ship it inside a container. This means the environment in which you test is identical to the one on which the app will run in production
+ Portability: Docker containers can run on any platform. It can run on any local system, Amazon ec2, Google cloud, Virtual box, etc.
+ Version control: Like git, Docker has a built version control system. Docker containers work just like GIT repositories, allowing you to commit changes to your Docker images and version control them.

Cons of Docker:

+ Missing feature: It has got Missing features. There are tons of features that are under progress like container self-registration, self-inspects copying files from host to container, and many more.
+ Data in the container: When the container is going down after that it needs a backup and recovery strategy although we have several solutions for that they are not automated or not very scalable yet.
+ Graphical app: Docker was designed as a solution for deploying server apps that do not require a graphical interface, while there are some creative strategies such as x11 video forwarding that u can use to run GUI app inside the container.
+ The benefit is few: Generally, only apps that are designed to run as a discrete set of microservices stand to gain the most from containers, otherwise, Docker's only real benefit is that it can simplify application delivery by providing an easy package machinima.

Pros of Kubernetes:

+ Automatic container schedule: Kubernetes may reschedule a container from one node to another to increase resource utilization. This means you get more work out of the same number of machines, which saves money.
+ Service discovery: When you have a bunch of services that need to communicate with each other it's critical that they are able to find each other first. This is especially true because containers are automatically scheduled and may potentially get moved around. Thankfully, Kubernetes makes it easy for containers to communicate with each other.
+ Self-Healing: Kubernetes automatically monitors containers and reschedules them if they crash or are terminated when they shouldn't. Kubernetes will also reschedule containers in the event that the node that they're living on fails.
+ Rolling Upgrades: Fortunately, Kubernetes has the ability to perform rolling updates. This is where old containers are judiciously swapped out of a new version of the same containers all without disrupting the service provided by the running application.

Cons of Kubernetes:

+ Steep learning curve: Kubernetes is not an easy platform to learn, even for the most experienced developers and DevOps engineers.
+ Install & configure: Kubernetes consists of multiple no. of components that should be configured and installed separately to initialize the cluster. if you install Kubernetes manually you should also configure the security which includes creating a certificate authority & issuing the certificate
+ No high availability: Kubernetes does not provide high availability mode by default to create a fault-tolerant cluster you have to manually configure HA for your ETCD cluster.
+ Compatibility issues: Sometimes when you have containers you may need to use Docker with communities. But at that time communities were not compatible with existing Docker CLI and composing tools. And it requires more effort during the migration whenever you have to migrate to a stateless It actually requires many efforts.

Kubernetes vs Docker:

Docker

{Kubernetes is an open-source platform used for maintaining and deploying a group of containers}{Docker is a tool that is used to automate the deployment of applications in lightweight containers so that applications can work efficiently in different environments.}

{In practice, Kubernetes is most commonly used alongside Docker for better control and implantation of containerized applications.}{With Docker, multiple containers run on the same hardware much more efficiently than the VM environment & productivity of Docker is extremely high. }

{Applications are deployed as a combination of pods, Deployment, and services. }{Apps are deployed in the form of services.}

{It supports auto-scaling of the container in a cluster. }{Docker does not support auto-scaling.}

{The health check is of two kinds: liveness and readiness.}{Health checks are limited to service.}

{Hard to set up and configure.}{Docker's setup and installation are easy.}

{It does not have extensive documentation but quite less than Docker. But it does include everything from installation to deployment. }{Docker documentation is more effective, more extensive, and even more capabilities & it includes everything from installation to deployment & quick-start instructions as well as the more detailed tutorial. }

{Kubernetes installation is provided to be quite difficult than Docker and even the command for Kubernetes is quite more complex than Docker.}{Docker installation is quite easier, by using fewer commands you can install Docker in your virtual machine or even on cloud.}

{Azure, buffer, intel, Evernote, Shopify Using Kubernetes. }{Google, Amazon, ADP, VISA, citizens bank, MetLife companies using Docker. }

Javascript Program For Counting Inversions In An Array - Set 1 (Using Merge Sort)

How to Remove Duplicates From Array Using VBA in Excel?

Kubernetes Cluster Components with Emphasis on AWS Elastic Kubernetes Services

01, Aug 21

Kubernetes - Monolithic Architecture of Kubernetes

25, Jul 21

Difference between Kubernetes and Docker Swarm

28, Jul 20

Docker - Docker Container for Node.js

18, Aug 21

Docker - Publishing Images to Docker Hub

17, Jan 22

Google Cloud Platform - Using Config Sync for Managing Kubernetes

25, Apr 21

Microsoft Azure - Starting & Stopping a Azure Kubernetes Service Cluster

29, May 21

Kubernetes - Installation Methods

25, Jul 21

Kubernetes - Physical Servers vs Virtual Machines vs Containers

07, Sep 21

Kubernetes - Cluster IP vs Node-Port

16, Jan 22

Microsoft Azure Arc Enabled Kubernetes

24, Feb 22

How to Enable JMX For Java Application Running in the Kubernetes Cluster?

Enable Remote Debugging For Java Application Deployed in Kubernetes Environment

Kubernetes - Taint and Toleration

15, Oct 21

Kubernetes - Concept of Containers

22, Oct 21

Difference between RKT and Docker

01, Jun 21

Difference between Docker Image and Container

28, Jun 20

Difference Between Vagrant and Docker

10, May 21

Microsoft Azure - Running an App inside a Docker Container Image

02, Jul 21

How to Push a Container Image to a Docker Repository?

27, Jul 21

How to Run GUI Based Applications inside Docker?

14, Aug 21

Data Storage in Docker

04, Oct 21

How to Provide the Static IP to a Docker Container?

13, Oct 21

Docker - Continuous Integration

03, Dec 21

shubhamp338

@shubhamp338

+ avtarkumar719
+ devtanumisra

+ Cloud-Computing
+ Difference Between
+ Docker
+ Google Cloud Platform
+ Kubernetes

Most popular in Difference Between

+ Difference between var, let and const keywords in JavaScript
+ Difference Between Method Overloading and Method Overriding in Java
+ Differences and Applications of List, Tuple, Set and Dictionary in Python
+ Similarities and Difference between Java and C++
+ Difference between Compile-time and Run-time Polymorphism in Java

Most visited in Docker

+ Connecting Two Docker Containers Over the Same Network
+ How to Dockerize a ReactJS App ?
+ Remove All Containers and Images in Docker
+ Execution of C Program Using Docker Environment
+ What is Docker Hub?


=======asdf45======== Q\Go K8s\$\9dedf72e5b32e2b85d17ce243442a260.txt
https://computingforgeeks.com/install-go-golang-on-centos-rhel-linux/
TITLE: Install Go (Golang) on CentOS 7 / RHEL 7 | ComputingForGeeks

Welcome! Log into your account

your username

your password

Forgot your password? Get help

Password recovery

Recover your password

your email

A password will be e-mailed to you.

ComputingForGeeks

+ How To
+ Automation
+ Virtualization
+ Containers
+ Databases
+ Electronics
+ Books
+ Advertise

Home CentOS Install Go (Golang) on CentOS 7 / RHEL 7

+ CentOS
+ Dev
+ How To
+ Linux Tutorials
+ RHEl

Install Go (Golang) on CentOS 7 / RHEL 7

By

Klinsmann Oteyo

-

June 21, 2022

7594

0

Go or GoLang, as it is called, is an open-source programming language designed to help ease the development of simple and scalable applications. It was implemented as a product of Google Engineering in 2009. It was referred to as a statically-typed programming language with the ease of use, versatility, and reliability.

Currently, Golang has become one of the most popular programming languages due to its efficiency, clean design, expressive, and concise design model. Some of the projects that make use of Golang are:

+ snappy - a package manager
+ Juju - a service orchestration tool by canonical
+ Docker - a set of tools for deploying containers
+ Dropbox moved the critical components to Go lang from python

The features of the Go programming language are:

+ It is Open-Source
+ It has a powerful Standard Library and Tool Set
+ Concurrency Support - it offers easy and trackable concurrency options.
+ Garbage Collection
+ Testing Capabilities
+ Cross-Platform Development Opportunities
+ Hiighly scalable

This guide offers a systematic demonstration of how to install Go (Golang) on CentOS 7 / RHEL 7.

Step 1 - Update System

First, ensure that your system is up-to-date and packages are to their latest versions. This is achieved using the command below.

sudo yum update

Install the required packages.

sudo yum install wget

Step 2 - Install Go (Golang) on CentOS 7 / RHEL 7

In this guide, I will demonstrate two ways to install Go (Golang) on CentOS 7 / RHEL 7 i.e

+ Manual installation
+ Using Golang installer.

Option 1) - Install Go (Golang) on CentOS 7 / RHEL 7 using the Golang Installer.

This is yet another method to get Golang installed on your CentOS 7 / RHEL 7 system. It involves downloading the official Golang Installers for Linux systems as below.

sudo yum -y install wget
wget https://storage.googleapis.com/golang/getgo/installer_linux

With the installer downloaded, make it executable.

chmod +x ./installer_linux

Now run the installer to install the latest Golang version.

./installer_linux 

The installation will proceed as below:

Welcome to the Go installer!
Downloading Go version go1.18.3 to /home/thor/.go
This may take a bit of time...
Downloaded!
Setting up GOPATH
GOPATH has been set up!

One more thing! Run `source /home/thor/.bash_profile` to persist the
new environment variables to your current session, or open a
new shell prompt.

You will then be required to source the ~/.bash_profile

source ~/.bash_profile

Finally, verify the installed version of Golang.

$ go version
go version go1.18.3 linux/amd64

Option 2) Install Go (Golang) on CentOS 7 / RHEL 7 Manually.

This installation method requires one to download the latest available Golang package from the official Golang release page. 

Alternatively, you can download the tarball using wget as below.

wget https://go.dev/dl/go1.18.3.linux-amd64.tar.gz

With the tarball downloaded, verify the checksum.

sha256sum go1.18.3.linux-amd64.tar.gz

Sample Output:

956f8507b302ab0bb747613695cdae10af99bbd39a90cae522b7c0302cc27245 go1.18.3.linux-amd64.tar.gz

Verify that the output matches the one on the download page.

Next, extract the tarball.

sudo tar -C /usr/local -xzf go*.linux-amd64.tar.gz

Then proceed and adjust your PATH variable. This will tell your system where to find and execute the GO executable binaries. This can be done by adding the below line to $HOME/.profile for installation on the current user or /etc/profile for the system-wide installation.

##For Current user
$ vi $HOME/.profile 

##For system-wide
$ sudo vi /etc/profile 

In the file, add the below lines.

export PATH=$PATH:/usr/local/go/bin

For the changes made to apply, you may be required to log out and log in back to your system or directly execute them from the profile with the command:

$ source $HOME/.profile
##OR##
$ source /etc/profile

That it! You have installed Golang on your CentOS 7 / RHEL 7 system.

Now, verify your installation by checking the installed Golang version.

$ go version
go version go1.18.3 linux/amd64

Step 3 - Test your Go Installation on CentOS 7 / RHEL 7

Here, we want to test our Go installation by setting up a simple workspace then building a simple Hello World program using Golang.

First, create a workspace directory.

mkdir ~/go

Then create a Go file for the Hello World program.

mkdir -p ~/go/src/hello

Now in the directory, create a hello.go file as below.

vi ~/go/src/hello/hello.go

In the created file, add the below lines.

func main() {
fmt.Printf("Hello, World! Golang is Amazing!\n")
}

Build the Go file.

cd ~/go/src/hello 
go mod init
go build

Now execute your program.

./hello

Sample Output:

rhellab$ ./hello
Hello, World! Golang is Amazing!

From the output above, it is safe to assume that our Golang installation is working perfectly.

That was enough learning! I hope you too managed to install Go (Golang) on CentOS 7 / RHEL 7.

Interested in more?

+ How To Install Go (Golang) On Fedora
+ How To Install Go (Golang) on Linux Mint
+ Install Go (Golang) on Ubuntu

YOU CAN SUPPORT OUR WORK WITH A CUP OF COFFEE

As we continue to grow, we would wish to reach and impact more people who visit and take advantage of the guides we have on our blog. This is a big task for us and we are so far extremely grateful for the kind people who have shown amazing support for our work over the time we have been online.

Thank You for your support as we work to give you the best of guides and articles. Click below to buy us a coffee.

+ TAGS
+ Go on CentOS 7
+ Go on RHEL 7
+ Golang on CentOS 7
+ Golang on RHEL 7

Previous articleHow To Upgrade From OpenShift 4.8 To 4.9

Next articleInstall Vault Cluster in GKE via Helm, Terraform and BitBucket Pipelines

Klinsmann Oteyo

A systems engineer with excellent skills in systems administration, cloud computing, systems deployment, virtualization, containers, and a certified ethical hacker.

LEAVE A REPLY Cancel reply

Please enter your comment!

Please enter your name here

You have entered an incorrect email address!

Please enter your email address here

Save my name, email, and website in this browser for the next time I comment.

^</form>

Recent Posts

Install Rocky Linux 8 on Hetzner Root Server^

Run Amazon Linux 2 on VirtualBox/VMware/Hyper-V

Run Semaphore Ansible web UI in Docker Container

RHEL 8 vs RHEL 9 - Comparison Table

Modified date: June 19, 2022

Automate Bitbucket Tasks via Terraform

Modified date: June 18, 2022

Configure HTTP Security Headers in Nginx / Apache Server

Modified date: June 15, 2022

3 Ways AI Video Is Changing Marketing Forever

Modified date: June 14, 2022

Install PostgreSQL 14 on Ubuntu 22.04 (Jammy Jellyfish)

Modified date: June 11, 2022

Electronics

10 Best Video Editing Laptops for Creators 2022

5 Best Laptops For Design Students 2022

Doogee V20 Launches With A Massive Discount Promo

Modified date: February 21, 2022

Cheap & Affordable Laptops Compatible With Windows 11

Modified date: August 6, 2021

Doogee S98 Pro Set To Hit The Market In Early June...

Modified date: April 27, 2022

Best Gaming Desktop Computers to buy in 2022

The Alien-Inspired Doogee S98 Pro Rugged Phone's Price & Launch Date...

Modified date: May 17, 2022

Are the Latest Surface Devices Worth Their Money?

Modified date: March 9, 2022

10 Best Wireless Earbuds to buy 2022

Cheaper Ink for HP Printers - Key Things to Know

Modified date: December 23, 2021

Books

Best LPIC-1 and LPIC-2 certification study books 2022

Best books for Learning OpenStack Cloud Platform 2022

Top RHCSA / RHCE Certification Study Books 2022

Books To Help You Master Apache Solr in 2022

Best Books to learn Web Development - PHP, HTML, CSS, JavaScript...


=======asdf46======== Q\Go K8s\$\5f95c2a1ae9d938b34ab2c0dc918eda2.txt
https://www.techtarget.com/searchitoperations/definition/Go-programming-language
TITLE: What is the Go Programming Language?

SearchITOperations Search the TechTarget Network </form> Sign-up now. Start my free, unlimited access. 

Login Register 

+ Techtarget Network 
+ News 
+ Features 
+ Tips 
+ Webinars 
+ More Content 

+ Answers 
+ Definitions 
+ Essential Guides 
+ Opinions 
+ Photo Stories 
+ Podcasts 
+ Quizzes 
+ Tutorials 
+ Sponsored Communities 

+ WATCH VIDEO TUTORIALS 

SearchITOperations 

Topic IT operations careers and skills 

+ Containers and virtualization 
+ DevOps 
+ IT systems management 
+ Systems automation and orchestration 
+ All Topics 

+ Follow: 
+ 
+ 
+ 

+ Home 
+ IT operations careers and skills 
+ Programming 
+ Go (programming language) 

Definition 

Go (programming language) 

By 

+ Alexander S. Gillis, Technical Writer and Editor 

Go (also called Golang or Go language) is an open source programming language used for general purpose. Go was developed by Google engineers to create dependable and efficient software. Most similarly modeled after C, Go is statically typed and explicit.

The language was designed by taking inspiration for the productivity and relative simplicity of Python, with the ability of C. Some of the problems that Go addresses are slow build time, uncontrolled dependencies, effort duplication, difficulty of writing automatic tools and cross-language development.

Go works by using "goroutines," or lightweight processes, which allows further efficiencies. Go also uses a collection of packages for efficient dependency management.

Some examples of organizations that use Go include Google, Cloudflare, Dropbox, MongoDB, Netflix, SoundCloud, Twitch and Uber.

What does the Go programming language do?

Go includes a number of features such as its standard library, package management, static typing, support for testing as well as its platform independence. Go's standard library is based off the use of distributed packages. Package management refers to how Go will manage support for user-based and external package management. Packages can be published using a small set of commands. Static typing is a type system that ensures conversions and compatibility while avoiding the issues that come with dynamically typed languages. Go also supports unit tests to run in parallel with written code. In addition, due to Go's modular design, the code can be compiled onto almost any platform.

More specifically, Go uses lightweight processes that enable concurrent processing and behave like threads. The syntax will mimic patterns commonly seen in dynamic languages. Golang favors composition interfaces over inheritance. Some of Go's tools worth highlighting are its "Gofmt" feature that automatically formats and indents code for readability, "Go run" that compiles and runs code simultaneously, "Go get" that seamlessly integrates with GitHub and "Godoc" that generates HTML-based documentation according to the code structure and developer comments.

Learn how to write a function in Go. 

Benefits of Go

Using Go over other programming languages has a number of advantages, such as:

+ Quick compilation and execution speed 
+ No virtual machine (VM) needed 
+ Portability 
+ Lightweight goroutines that support concurrency 
+ Interfaces enable loosely coupled systems 
+ Automatic garbage collection 
+ Memory safety 
+ Independent error handling 
+ Extensive built-in libraries 

Drawbacks of Go

Some potential drawbacks include:

+ Does not support generics, or the ability to write abstract, implicit code 
+ Lack of runtime safety 
+ Enforces strict rules 
+ Incompatible with function overloading 
+ Not conventionally object-oriented 

Applications of the Go programming language

Go is used by various software development teams and in various software. Applications using Go include container services like Docker and Kubernetes, cloud services such as Terraform and OpenShift, service orchestration tools such as Juju, and other applications such as Bitcoin networks -- for example, Lightning Network.

Companies that use the Go programming language include Couchbase, which uses Go for Query and Indexing services; Dropbox, which changed from using Python to Go; MongoDB, for tools related to MongoDB instances; and Netflix with some of its server architectures.

Go versus competitors

Golang has comparable features to other programming languages but provides an overall unique alternative. The main design goal of Go is to facilitate fast compilation, unlike some of the other common languages. When compared to C++, Go reduces the amount of runtime errors and dependencies while increasing memory safety and memory management. Ruby provides a safer approach, but requires an interpreter and takes longer to compile. Java is another popular programming language; however, it requires a virtual machine in order to run the code. Go eliminates this necessity and combats the complexity and verbosity of Java code itself.

Developers will want to code in Go when they want a programming language that is good for web development, front-end development, command-line scripting and network server applications. Because of the Go language's fast startup time, low runtime overhead and ability to run without a virtual machine, Go has become a very popular language for writing microservices. In addition, Go can also be used for concurrent programming -- a strategy to execute multiple tasks at one time. As for how Go compares to how often other program languages are used and rated, Go is often rated within the bottom or middle of top ten lists for the most in-demand and liked programming languages -- typically just behind other known languages such as JavaScript and Python.

The history of Go

The creation of Go was motivated by the need to solve software engineering issues at Google and to provide an alternative for C++. Also, as multi-core processors became more popular, developing a language with higher productivity levels was necessary.

Go started being designed at Google in 2007. The designers wanted to create a programming language that was easier to use but still had the useful characteristics found in other languages such as C++, Python or JavaScript. By 2008, the language started taking shape, as it moved on from prototype stages and was publicly announced in 2009. In that same year, Go also became an open source project where community members could begin ideas and code. Version 1.0 was later released in 2012.

Over the years, new updates and features were added, such as in 2018, when generics and error handling were added. The popularity of Go has continued to grow and fluctuate. 

This was last updated in May 2020 

Continue Reading About Go (programming language) 

+ Google's Go beats Java, C, Python to programming language of the year crown 

+ Follow a Kubernetes and Go tutorial in your home lab 

+ A Go programming language tutorial for IT ops 

+ Three things you didn't know about Golang, NoSql, and Cloud 

+ These Go code examples showcase its main features 

Related Terms

DevOps as a Service : : DevOps as a Service is a delivery model for a set of tools that facilitates collaboration between an organization's software ... See complete definition 

information technology (IT) director : : An information technology (IT) director is the person in charge of technology within an organization. IT directors manage ... See complete definition 

troubleshooting : : Troubleshooting is a systematic approach to problem-solving that is often used to find and correct issues with complex machines, ... See complete definition 

Dig Deeper on IT operations careers and skills

A 7-point language comparison of Ballerina vs. Golang

By: Kerry Doyle 

How viable is it to create microservices in Python?

By: Kerry Doyle 

How to learn Golang: A DevOps engineer's experience

By: Matthew Grasberger 

bytecode

By: Robert Sheldon 

Latest TechTarget resources 

+ Software Quality 
+ Application Architecture 
+ Cloud Computing 
+ AWS 
+ Java 
+ Data Center 

SearchSoftwareQuality 

+ CircleCI vs. GitHub Actions: CI/CD platform comparison 

Learn the differing features, commands and perks that make CircleCI and GitHub Actions distinct CI/CD platforms. Then, decide ...

+ Key things to consider when choosing regression testing tools 

Making a decision about regression testing tooling purchases means taking stock of plans for CI/CD implementations, existing ...

+ Amazon CodeWhisperer joins packed AI code completion market 

AI code completion tool Amazon CodeWhisperer is now available for developers who are willing to wait.

SearchAppArchitecture 

+ A 7-point language comparison of Ballerina vs. Golang 

This comparison takes a look at both Ballerina and Golang, including their support for high-level programming, libraries, ...

+ How viable is it to create microservices in Python? 

Python offers microservices developers access to advanced scripting, embedded testing and plugin tooling. But is it a good fit ...

+ Ardoq Discover boosts enterprise architecture tool usability 

Tools for enterprise architects get criticized for their complexity, but they are getting better. A recently released module from...

SearchCloudComputing 

+ Cloud-native modernization is on the rise 

Research suggests that cloud-native application deployment is becoming more prevalent as organizations continue to embrace public...

+ IT buyers respond to HPE GreenLake cloud pitch 

Tech buyers are interested in the breadth and depth of services sold through the HPE GreenLake service, but want proof of cost ...

+ How to create an EC2 instance using PowerShell 

PowerShell has practical integrations that provide users with cross-platform capabilities. Get to know prerequisites and ...

SearchAWS 

+ AWS Control Tower aims to simplify multi-account management 

Many organizations struggle to manage their vast collection of AWS accounts, but Control Tower can help. The service automates ...

+ Break down the Amazon EKS pricing model 

There are several important variables within the Amazon EKS pricing model. Dig into the numbers to ensure you deploy the service ...

+ Compare EKS vs. self-managed Kubernetes on AWS 

AWS users face a choice when deploying Kubernetes: run it themselves on EC2 or let Amazon do the heavy lifting with EKS. See ...

TheServerSide.com 

+ 8 tech jobs that don't require coding 

Looking for an IT job that doesn't involve coding? These eight tech roles are important in any organization, with no programming ...

+ Agile versus Scrum: What's the difference? 

What's the difference between Agile and Scrum? What are their similarities? Learn how to compare and contrast these two popular ...

+ How to communicate effectively in the workplace 

Don't bury the lead. Grab your audience's attention early. Be graceful when others disagree. These and other tips will help you ...

SearchDataCenter 

+ HPE GreenLake achieves everything as a service 

The latest version of HPE GreenLake has realized the vision of everything as a service, although customers are still figuring out...


=======asdf47======== Q\Go K8s\$\ba674d8ea0c00aa2b95fc31c05c4367a.txt
https://careerkarma.com/blog/is-golang-worth-learning/
TITLE: Is Golang Worth Learning

+ What is a Coding Bootcamp? 
+ Are Coding Bootcamps Worth It? 
+ How to Choose a Coding Bootcamp 
+ Best Online Coding Bootcamps and Courses 
+ Best Free Bootcamps and Coding Training 
+ Coding Bootcamp vs. Community College 
+ Coding Bootcamp vs. Self-Learning 
+ Bootcamps vs. Certifications: Compared 
+ Read Stories from Students 

+ Paying for a Bootcamp 

+ How to Pay for Coding Bootcamp 
+ Ultimate Guide to Coding Bootcamp Loans 
+ Best Coding Bootcamp Scholarships and Grants 
+ Education Stipends for Coding Bootcamps 
+ Get Your Coding Bootcamp Sponsored by Your Employer 
+ GI Bill and Coding Bootcamps 

+ Other Topics in Tech 

+ Tech Intevriews 
+ Career Advice 
+ Python 
+ HTML 
+ CSS 
+ JavaScript 
+ Git 
+ Java 
+ C++ 

Start my journey 

+ Community 
+ Career Guides 
+ Schools & Applications 
+ Prep Courses & Scholarships 
+ Resources 

Live Events 

Stories 

About 

+ Company 
+ Jobs 
+ Values 
+ Publication 
+ Press 
+ Reskill America 
+ Partner With Us 

+ Browse Bootcamps 

+ Popular Bootcamps 

+ Best Coding Bootcamps 
+ Best Online Bootcamps 
+ Best Web Design Bootcamps 
+ Best Data Science Bootcamps 
+ Best Technology Sales Bootcamps 
+ Best Data Analytics Bootcamps 
+ Best Cybersecurity Bootcamps 
+ Best Product Management Botcamps 
+ Best Project Management Bootcamps 
+ Best Digital Marketing Bootcamps 

+ Bootcamps Near You 

+ New York 
+ Los Angeles 
+ San Francisco 
+ Atlanta 
+ Chicago 
+ Seattle 
+ San Diego 
+ Houston 
+ Browse All Locations 

+ Explore by Subject 

+ Python 
+ Web Development 
+ Digital Marketing 
+ iOS 
+ Java 
+ JavaScript 
+ SQL 
+ Machine Learning 
+ See All Subjects 

+ Learn for Free 

+ Browse Questions From Others 

+ Bootcamps 101 
+ Data Science 
+ Software Engineering 
+ Full-Stack Development 
+ JavaScript 
+ Job Search 
+ Career Changes 
+ View all Career Discussions 

+ Browse Top Careers 

+ Software Engineering 
+ Web Development 
+ Mobile App Development 
+ Data Science 
+ Cybersecurity 
+ Product Management 
+ Digital Marketing 
+ UX/UI Design 

+ Choosing a Bootcamp 

+ What is a Coding Bootcamp? 
+ Are Coding Bootcamps Worth It? 
+ How to Choose a Coding Bootcamp 
+ Best Online Coding Bootcamps and Courses 
+ Best Free Bootcamps and Coding Training 
+ Coding Bootcamp vs. Community College 
+ Coding Bootcamp vs. Self-Learning 
+ Bootcamps vs. Certifications: Compared 
+ Read Stories from Students 

+ Paying for a Bootcamp 

+ How to Pay for Coding Bootcamp 
+ Ultimate Guide to Coding Bootcamp Loans 
+ Best Coding Bootcamp Scholarships and Grants 
+ Education Stipends for Coding Bootcamps 
+ Get Your Coding Bootcamp Sponsored by Your Employer 
+ GI Bill and Coding Bootcamps 

+ Other Topics in Tech 

+ Tech Intevriews 
+ Career Advice 
+ Python 
+ HTML 
+ CSS 
+ JavaScript 
+ Git 
+ Java 
+ C++ 

+ Start my journey 

+ Community 
+ Career Guides 
+ Schools & Applications 
+ Prep Courses & Scholarships 
+ Resources 

+ Live Events 
+ Stories 
+ About 

+ Company 
+ Jobs 
+ Values 
+ Publication 
+ Press 
+ Reskill America 
+ Partner With Us 

+ Sign Up 
+ Sign In 

+ Front Page 
+ Bootcamps 

+ Graduate Stories 
+ Popular Bootcamps 
+ Bootcamp Prep 
+ University Bootcamps 
+ Bootcamp Financing 
+ Bootcamp Grads 

+ Coding 

+ Coding Tools 
+ HTML 
+ CSS 
+ Java 
+ JavaScript 
+ Python 
+ C++ 
+ Ruby 
+ SQL 
+ Git 

+ Career Resources 

+ Career Advice 
+ Tech Interviews 
+ Tech Salaries 
+ Tech Cities 
+ Research 

+ Tech Fields 

+ Web Development 
+ Software Engineering 
+ Web Design 
+ Data Science 

+ Higher Ed 

+ Associate 
+ Bachelor's 
+ Master's 
+ Doctoral 
+ Certifications 
+ Trade Schools 

+ About 

+ Home
+ Career Advice
+ Is Golang Worth Learning? 5 Reasons to Learn Golang

Career Advice 

Is Golang Worth Learning? 5 Reasons to Learn Golang

Golang is worth learning because it shows no sign of decline. It's a comprehensive language that has gained popularity among developers. It's an ideal language for programming efficiency, as it can execute parallel and concurrent language. This article explores whether or not Golang is worth learning and how to learn Golang for free.

What Is Golang?

Golang, also known as Go, is an open source, statically typed programming language. Google's developers Robert Griesemer, Rob Pike, and Ken Thompson compiled Golang in 2009 to update lines of code. Even if Google pioneered this language, many developers still find this modern language useful in writing programs outside of Google systems.

Is Golang Worth Learning in 2022? 

Yes, Golang is still worth learning in 2022 as it has experienced an increase in popularity among developers. According to Stack Overflow's 2020 Developer Survey, Golang moved up to fifth place from ninth place in 2019 on the most loved languages list. The same survey reported that Golang programmers had the third-highest median salaries in 2020. 

5 Reasons Golang Is Worth Learning

In this section, we have detailed our top five reasons this general-purpose language is worth learning for real-world development. We've included some of its vast benefits and why a Golang developer career in this promising programming language can be a good option for you.

Beginner-Friendly

Golang is a simple language, meaning it has a basic syntax that's easy to learn and read. It produces human-readable code that is easy to read and write. Golang is easy to learn as a beginner developer, so it's no wonder that Golang is recommended for developers of all skill levels. 

" MORE: How to Become a Carpenter: Work With Your Hands

Vast Opportunities

Even though Golang is a new language, it has garnered good attention, attracting well-known companies like BBC, Intel, Google, Docker, and Medium. More companies adopt it because of its simplicity, maintainability, robust security, code readability, and excellent support. 

Stability

Despite its continuous growth, Golang is still very stable. Since its official release, only a few changes have been made, signifying Golang code compatibility with what's on the market. Unlike their counterparts, Golang developers can rely on being kept up-to-date, even with complex projects and complicated concepts.

Excellent Hourly Pay

Golang offers excellent hourly rates to freelancers. So, if you learned Golang and aren't ready to apply for a permanent developer position, you can start as a freelancer and gain experience. According to ZipRecruiter, Golang developers earn an average hourly rate of $61.89.

81% of participants stated they felt more confident about their tech job prospects after attending a bootcamp. Get matched to a bootcamp today.

Find Your Bootcamp Match 

The average bootcamp grad spent less than six months in career transition, from starting a bootcamp to finding their first job.

Start your career switch today 

Backed and Made by Google

Google designed Golang to streamline the software development process. One of the largest cloud infrastructures worldwide, Google Cloud, is built on Golang. Considering Google has excellent perks and is a big tech company, learning this basic language surely gives you an advantage if you decide to pursue a career there.

How to Learn Golang for Free

This section shows you how to learn Golang for free. There are a lot of free resources like massive open online courses (MOOCs), bootcamps, and online resources. Some of these options are listed below.

{Resource} {Provider} {Type of Resource} {Length} 

{Programming with Google Go Specialization } {Coursera} {MOOC} {3 months } 

{Getting started with GO} {Coursera} {MOOC} {11 hours} 

{Learn Go} {Codecademy} {Online Course} {9 hours} 

{Learning Go} {LinkedIn Learning} {Free Online Tutorial} {1 hour 7 minutes} 

{Functions, Methods, and Interfaces in Go} {Coursera} {MOOC} {8 hours} 

" MORE: C# Apprenticeships: Programs, Jobs, and Salary

Is Learning Golang Worth It? 

Yes, learning Golang is worth it, and the reasons are numerous as Golang continuously grows and evolves with time. So, if you are considering learning a programming language but are confused about which one is worth it, you should learn Golang as it is easy to understand, has free plans, is popular, and offers great pay for beginners. 

FAQ: Is Golang Worth Learning?

Should I learn Golang or Python? 

It depends on your interests and goals because both languages are excellent and worthy of learning. Golang is a new language with simple syntax, it's fast, and has better support for concurrent code. On the other hand, Python is more popular, flexible, and reads like English. So the choice remains with you as both offer benefits.

Does Golang have a future? 

Golang has a promising future. While it's primarily used for mobile applications, Go also has also been used in machine learning libraries. This only proves that it's a programming language that will last for years to come.

Is Golang losing popularity? 

Golang isn't losing popularity as it continues to gain attention from developers. According to Stack Overflow's survey, Golang ranked 5th on the most loved coding language list. Huge companies use Golang and look for programmers with Golang coding skills.

Find Your Bootcamp Match

+ Career Karma matches you with top tech bootcamps 
+ Get exclusive scholarships and prep courses 

Please enter a valid phone number 

Get Matched 

By continuing you agree to our Terms of Service and Privacy Policy, and you consent to receive offers and opportunities from Career Karma by telephone, text message, and email.a 

Is Golang good for your career? 

Go is an excellent investment for your career and future growth in the IT industry. Looking at the latest surveys for demanding programming languages, you will find Golang with its notable features in the top 10.

" MORE: Penetration Testing Apprenticeships: Programs, Jobs, and Salary

Rate this Article 

About us: Career Karma is a platform designed to help job seekers find, research, and connect with job training programs to advance their careers. Learn about the CK publication. 

What's Next?

Want to take action?

Get matched with top bootcamps

Want to dive deeper?

Ask a question to our community

Want to explore tech careers?

Take our careers quiz

Segba Eseoghene Keva Laya

Keva is a content writer with extensive experience in the field and with her own blog. In the future, she hopes to become a life coach and continue sharing ideas on her own website. She holds a Bachelor of Arts in History and International Studies from the University of... read more 

Read more by Segba Eseoghene Keva Laya 

Share This

Previous Article

Cloud Computing for Business: How Cloud Computing Helps Business Growth

Next Article

Is JavaScript Worth Learning? 5 Reasons to Learn JavaScript

Feb 7, 2022 

Comments (0) 

Leave a Reply Cancel reply

Your email address will not be published. Required fields are marked *

Your Comment

Name *

Email *

Website

Apply to top tech training programs in one click

Get Matched

Home

Mission

Blog

Press

Sitemap

Terms & conditions

Do Not Sell My Personal Information

Instagram

Youtube

(c) 2021 Career Karma

Rankings

Best Coding Bootcamps

Best Online Bootcamps

Best Web Design Bootcamps

Best Data Science Bootcamps

Best Data Analytics Bootcamps

Best Cyber Security Bootcamps

Best ISA Bootcamps 2020

Comparisons

Flatiron School vs Fullstack Academy

Hack Reactor vs App Academy

Fullstack Academy vs Hack Reactor

Thinkful vs General Assembly

Flatiron School vs Thinkful

General Assembly vs Flatiron School

App Academy vs Lambda School

General Assembly vs Hack Reactor

Springboard vs Thinkful

Locations

San Francisco Bootcamps

New York Bootcamps

Los Angeles Bootcamps

Chicago Bootcamps

Seattle Bootcamps

Atlanta Bootcamps

Austin Bootcamps

Schools

Kenzie Academy

Flatiron School

Thinkful

General Assembly

Springboard

Galvanize

Hack Reactor

App Academy

Bloc

Software Engineering

UX/UI Design

Data Science

Web Development

Mobile Development

Cybersecurity

Product Management

Subjects

JavaScript

Python

Ruby

Java

Swift

Android

.Net

React

Angular

Many careers in tech pay over $100,000 per year. With help from Career Karma, you can find a training program that meets your needs and will set you up for a long-term, well-paid career in tech. 


=======asdf48======== Q\Go K8s\$\cec7e43f4cb66eb554e42a294ab64e48.txt
https://cloud.google.com/kubernetes-engine/
TITLE: Kubernetes - Google Kubernetes Engine (GKE) | Google Cloud

+ Save money with our transparent approach to pricing 
+ Google Cloud's pay-as-you-go pricing offers automatic savings based on monthly usage and discounted rates for prepaid resources. Contact us today to get a quote. 
+ 

Request a quote 

+ Google Cloud 
+ 

Pricing overview 

Pay only for what you use with no lock-in. 

Price list 

Get pricing details for individual products. 

Pricing calculator 

Calculate your cloud savings. 

Google Cloud Free Program 

$300 in free credits and 20+ free products. 

+ Related Products 
+ 

Google Workspace 

Google Maps Platform 

Chrome Enterprise 

Apigee 

Firebase 

Getting started 

+ Get started with Google Cloud 
+ Start building right away on our secure, intelligent platform. New customers get $300 in free credits to use toward Google Cloud products and services. 
+ 

Get started for free 

+ Self-service Resources 
+ 

Get started 

Get started with Google Cloud. 

Developer Center 

Stay in the know and become an Innovator. 

Google Cloud certification 

Prepare and register for certifications. 

+ Expert help and training 
+ 

Consulting 

Partner with our experts on cloud projects. 

Technical Account Management 

Get ongoing guidance from Google. 

Training 

Enroll in on-demand or classroom training. 

+ Partners and third-party tools 
+ 

Google Cloud partners 

Explore benefits of working with a partner. 

Become a partner 

Join the Partner Advantage program. 

Google Cloud Marketplace 

Deploy ready-to-go solutions in a few clicks. 

Docs Support 

Docs Support Language English Deutsch Espanol Espanol - America Latina Francais Italiano Portugues - Brasil ^^ - ^^ ^^ - ^^ ^^^ ^^^ Sign in 

+ Google Kubernetes Engine (GKE) 

Contact Us Get started for free 

+ Why Google 

+ Solutions 

+ Products 

+ Pricing 

+ Getting started 

+ Docs 
+ Support 
+ Console 
+ Contact Us 
+ Get started for free 

+ Discover why leading businesses choose Google Cloud 
+ Learn more 
+ Key benefits 
+ Overview 
+ Multicloud 
+ Trust and security 
+ Global infrastructure 
+ Data cloud 
+ Open cloud 
+ Sustainability 
+ Productivity and collaboration 
+ Resources 
+ Events 
+ Blog 
+ Customer stories 
+ Analyst reports 

+ Industry Solutions 
+ Retail 
+ Consumer Packaged Goods 
+ Financial Services 
+ Healthcare and Life Sciences 
+ Media and Entertainment 
+ Telecommunications 
+ Gaming 
+ Manufacturing 
+ Supply Chain and Logistics 
+ Government 
+ Education 
+ See all industry solutions 
+ See all solutions 
+ Application Modernization 
+ Hybrid and Multi-cloud Application Platform 
+ API Management 
+ Serverless Solutions 
+ DevOps 
+ Continuous Delivery (CD) 
+ Continuous Integration (CI) 
+ Mainframe Modernization 
+ CAMP 
+ Hosting 
+ Site Reliability Engineering (SRE) 
+ Artificial Intelligence 
+ Contact Center AI 
+ Document AI 
+ Intelligent products 
+ Product Discovery 
+ APIs and Applications 
+ New Business Channels Using APIs 
+ Unlocking Legacy Applications Using APIs 
+ Open Banking APIx 
+ Databases 
+ Database Migration 
+ Database Modernization 
+ Google Cloud Databases 
+ Migrate Oracle workloads to Google Cloud 
+ Open Source Databases 
+ SQL Server on Google Cloud 
+ Data Cloud 
+ Databases Solutions 
+ Smart Analytics Solutions 
+ AI Solutions 
+ Data Cloud for ISVs 
+ Data Cloud Alliance 
+ Digital Transformation 
+ Digital Innovation 
+ Operational Efficiency 
+ COVID-19 Solutions 
+ COVID-19 Solutions for the Healthcare Industry 
+ Infrastructure Modernization 
+ Application Migration 
+ SAP on Google Cloud 
+ High Performance Computing 
+ Windows on Google Cloud 
+ Data Center Migration 
+ Active Assist 
+ Virtual Desktops 
+ Rapid Assessment & Migration Program (RAMP) 
+ Backup and Disaster Recovery 
+ Productivity and Collaboration 
+ Google Workspace 
+ Google Workspace Essentials 
+ Cloud Identity 
+ Chrome Enterprise 
+ Cloud Search 
+ Security 
+ Security Analytics and Operations 
+ Web App and API Protection 
+ Security and Resilience Framework 
+ Risk and compliance as code (RCaC) 
+ Software Supply Chain Security 
+ Smart Analytics 
+ Data Warehouse Modernization 
+ Data Lake Modernization 
+ Spark on Google Cloud 
+ Stream Analytics 
+ Business Intelligence 
+ Data Science 
+ Marketing Analytics 
+ Geospatial Analytics and AI 
+ Datasets 
+ Startups and SMB 
+ Startup Solutions 
+ Startup Program 
+ Small and Medium Business 
+ Software as a Service 

+ Featured Products 
+ Compute Engine 
+ Cloud Storage 
+ Cloud SDK 
+ Cloud SQL 
+ Google Kubernetes Engine 
+ BigQuery 
+ Cloud CDN 
+ Dataflow 
+ Operations 
+ Cloud Run 
+ Anthos 
+ See all products (100+) 
+ AI and Machine Learning 
+ Vertex AI 
+ Vertex AI Workbench 
+ AI Infrastructure 
+ AutoML 
+ Natural Language AI 
+ Speech-to-Text 
+ Text-to-Speech 
+ Translation AI 
+ Video AI 
+ Vision AI 
+ Dialogflow 
+ See all AI and machine learning products 
+ API Management 
+ Apigee API Management 
+ Apigee Integration 
+ Cloud Healthcare API 
+ AppSheet 
+ API Gateway 
+ Compute 
+ Compute Engine 
+ App Engine 
+ Cloud GPUs 
+ Migrate for Compute Engine 
+ Spot VMs 
+ Shielded VMs 
+ Sole-Tenant Nodes 
+ Bare Metal 
+ Recommender 
+ VMware Engine 
+ Cloud Run 
+ See all compute products 
+ Containers 
+ Google Kubernetes Engine 
+ Container Registry 
+ Container Security 
+ Cloud Build 
+ Deep Learning Containers 
+ Kubernetes Applications 
+ Artifact Registry 
+ Knative 
+ Cloud Run 
+ Cloud Code 
+ Data Analytics 
+ BigQuery 
+ Looker 
+ Dataflow 
+ Pub/Sub 
+ Dataproc 
+ Cloud Data Fusion 
+ Cloud Composer 
+ Dataprep 
+ Dataplex 
+ Data Catalog 
+ Analytics Hub 
+ See all data analytics products 
+ Databases 
+ AlloyDB for PostgreSQL 
+ Cloud Bigtable 
+ Firestore 
+ Memorystore 
+ Cloud Spanner 
+ Cloud SQL 
+ Database Migration Service 
+ Bare Metal Solution for Oracle 
+ Firebase Realtime Database 
+ Datastream 
+ Developer Tools 
+ Artifact Registry 
+ Cloud Build 
+ Cloud Code 
+ Cloud Deployment Manager 
+ gcloud CLI 
+ Cloud Scheduler 
+ Cloud Source Repositories 
+ Cloud Tasks 
+ Google Cloud Deploy 
+ Tekton 
+ Tools for PowerShell 
+ See all developer tools 
+ Healthcare and Life Sciences 
+ Apigee Healthcare APIx 
+ Cloud Healthcare API 
+ Cloud Life Sciences 
+ Healthcare Natural Language AI 
+ Hybrid and Multicloud 
+ Anthos 
+ Looker 
+ Cloud Run for Anthos 
+ Google Cloud Marketplace for Anthos 
+ Migrate for Anthos 
+ Operations 
+ Cloud Build 
+ Traffic Director 
+ Apigee API Management 
+ Google Distributed Cloud 
+ Internet of Things 
+ Cloud IoT Core 
+ Edge TPU 
+ Management Tools 
+ Anthos Config Management 
+ Carbon Footprint 
+ Cloud APIs 
+ Cloud console 
+ Cloud Mobile App 
+ Cloud Shell 
+ Config Connector 
+ Cost Management 
+ Intelligent Management 
+ Private Catalog 
+ Terraform on Google Cloud 
+ Media and Gaming 
+ Game Servers 
+ OpenCue 
+ Transcoder API 
+ Migration 
+ Application Migration 
+ BigQuery Data Transfer Service 
+ Cloud Foundation Toolkit 
+ Database Migration Service 
+ Migrate for Anthos 
+ Migrate for Compute Engine 
+ Rapid Assessment & Migration Program (RAMP) 
+ Transfer Appliance 
+ Storage Transfer Service 
+ VMware Engine 
+ Networking 
+ Cloud Armor 
+ Cloud CDN 
+ Cloud DNS 
+ Cloud Load Balancing 
+ Cloud NAT 
+ Hybrid Connectivity 
+ Network Connectivity Center 
+ Network Intelligence Center 
+ Network Service Tiers 
+ Traffic Director 
+ See all networking products 
+ Operations 
+ Cloud Logging 
+ Cloud Monitoring 
+ Error Reporting 
+ Kubernetes Engine Monitoring 
+ Cloud Trace 
+ Cloud Profiler 
+ Cloud Debugger 
+ Intelligent Operations 
+ Security and Identity 
+ Cloud IAM 
+ Assured Workloads 
+ Cloud Key Management 
+ Confidential Computing 
+ Security Command Center 
+ Cloud Data Loss Prevention 
+ Managed Service for Microsoft Active Directory 
+ Access Transparency 
+ Titan Security Key 
+ Secret Manager 
+ BeyondCorp Enterprise 
+ See all security and identity products 
+ Serverless Computing 
+ Cloud Run 
+ Cloud Functions 
+ App Engine 
+ Workflows 
+ Storage 
+ All Storage Products 
+ Cloud Storage 
+ Filestore 
+ Persistent Disk 
+ Cloud Storage for Firebase 
+ Local SSD 
+ Storage Transfer Service 
+ Google Workspace Essentials 

+ Save money with our transparent approach to pricing 
+ Request a quote 
+ Google Cloud 
+ Pricing overview 
+ Price list 
+ Pricing calculator 
+ Google Cloud Free Program 
+ Related Products 
+ Google Workspace 
+ Google Maps Platform 
+ Chrome Enterprise 
+ Apigee 
+ Looker 
+ Firebase 

+ Get started with Google Cloud 
+ Get started for free 
+ Self-service Resources 
+ Get started 
+ Developer Center 
+ Google Cloud certification 
+ Expert help and training 
+ Consulting 
+ Technical Account Management 
+ Training 
+ Partners and third-party tools 
+ Google Cloud partners 
+ Become a partner 
+ Google Cloud Marketplace 

+ Home 
+ 

Products 
+ 

Google Kubernetes Engine (GKE) 

Send feedback 

Join tech leaders from Google, Snap, and Broadcom on July 13 for the first ever Google Cloud Infrastructure Spotlight. Register now. 

Jump to 

The most automated and scalable managed Kubernetes platform.

New customers can use $300 in free credits to try out GKE. 

Try GKE free Contact sales Go to console Contact sales 

Run your apps on a fully managed Kubernetes cluster with GKE Autopilot 

Start quickly with single-click clusters and scale up to 15000 nodes 

Leverage a high-availability control plane including multi-zonal and regional clusters

Eliminate operational overhead with industry-first four-way auto scaling 

Secure by default, including vulnerability scanning of container images and data encryption

VIDEO

What is Google Kubernetes Engine (GKE)?

6:30

Benefits

Speed up app development without sacrificing security 

Develop a wide variety of apps with support for stateful, serverless, and application accelerators. Use Kubernetes-native CI/CD tooling to secure and speed up each stage of the build-and-deploy life cycle.

Streamline operations with release channels

Choose the channel that fits your business needs. Rapid, regular, and stable release channels have different cadences of node upgrades and offer support levels aligned with the channel nature.

Reduce Day 2 ops with help from Google SREs

Get back time to focus on your applications with help from Google Site Reliability Engineers (SREs). Our SREs constantly monitor your cluster and its computing, networking, and storage resources.

Key features

Key features

Two modes of operation, one GKE

GKE now offers two modes of operations: Autopilot and Standard. Autopilot mode is a hands-off, fully managed solution that manages your entire cluster's infrastructure without worrying about configuring and monitoring, while still delivering a complete Kubernetes experience. And with per-pod billing, Autopilot ensures you pay only for your running pods, not system components, operating system overhead, or unallocated capacity. Standard mode is the experience we've been building since the launch of GKE, enabling additional customization options over the nodes with the ability to fine tune and run custom administrative workloads for when you need low level controls.

Pod and cluster autoscaling

GKE is the industry's first fully managed Kubernetes service that implements full Kubernetes API, 4-way autoscaling, release channels and multi-cluster support. Horizontal pod autoscaling can be based on CPU utilization or custom metrics. Autopilot automatically scales your cluster capacity based on the resource requirements in your Pod specs. In the Standard mode of operation, cluster autoscaling works on a per-node-pool basis to scale up your nodes on demand. Vertical pod autoscaling continuously analyzes the CPU and memory usage of pods, automatically adjusting CPU and memory requests.

Prebuilt Kubernetes applications and templates

Get access to enterprise-ready containerized solutions with prebuilt deployment templates, featuring portability, simplified licensing, and consolidated billing. These are not just container images, but open source, Google-built, and commercial applications that increase developer productivity. Click to deploy on-premises or in third-party clouds from Google Cloud Marketplace. 

Container native networking and security

Privately networked clusters in GKE can be restricted to a private endpoint or a public endpoint that only certain address ranges can access. GKE Sandbox for the Standard mode of operation provides a second layer of defense between containerized workloads on GKE for enhanced workload security. GKE clusters natively support Kubernetes Network Policy to restrict traffic with pod-level firewall rules.

Migrate traditional workloads to GKE containers with ease

Migrate for Anthos and GKE makes it fast and easy to modernize traditional applications away from virtual machines and into native containers. Our unique automated approach extracts the critical application elements from the VM so you can easily insert those elements into containers in Google Kubernetes Engine or Anthos clusters without the VM layers (like Guest OS) that become unnecessary with containers. This product also works with GKE Autopilot.

View all features 

VIDEO

Introducing GKE Autopilot: Managed K8s, fully automated and highly optimized

06:36

Customers

Learn from customers using our secured, fully managed Kubernetes service

Case study

Makerbot achieved 30% cost savings per month by migrating to GKE.

5-min read

Case study

Gamigo serves more than 100 million players worldwide with reliable gaming platform built on GKE.

5-min read

Case study

With GKE Autopilot, Ubie reduces infra costs by 20% and focuses on making healthcare accessible to all.

5-min read

Case study

Pizza Hut transforms its ecommerce infrastructure and speeds response time.

5-min read

Case study

Tokopedia scales to accommodate major shopping events seamlessly with GKE.

5-min read

keyboard_arrow_left 

keyboard_arrow_right 

See all customers 

What's new

What's new

Sign up for Google Cloud newsletters to receive product updates, event information, special offers, and more.

Report 

Leader in The Forrester Wave(tm): Public Cloud Container Platforms, Q1 2022 Read report 

Report 

BCG research: Discover digital transformation strategies from global IT leaders. Read report 

Report 

Learn how GKE users experienced greater productivity, lower costs, reduced risk. Read report 

Report 

ESG Technical Validation: Scalable, Secure and Reliable Gaming Infrastructure Read report 

keyboard_arrow_left 

keyboard_arrow_right 

Documentation

Documentation

Best Practice 

Best practices for operating containers

Learn best practices for operating containers in GKE.

Tutorial 

GKE tutorial: Deploying a containerized web application 

Create a simple application, package it into a container, and then deploy the container image to GKE-all directly in the Cloud Shell Editor. 

Best Practice 

Preparing a GKE environment for production

Follow the guidance and methodology for onboarding your workloads more securely, reliably, and cost-effectively to GKE.

Tutorial 

Hardening your GKE cluster

Learn how to implement the guidance for hardening your GKE cluster.

Tutorial 

GKE resources

Find more information on features, updates, pricing, and more.

Tutorial 

Explore what you can build on Google Cloud

Discover Google Cloud technical resource guides to help unlock the potential of GKE.

Not seeing what you're looking for? 

View all product documentation 

Explore more docs 

Get a quick intro to using this product.

Learn to complete specific tasks with this product.

Browse walkthroughs of common uses and scenarios for this product.

View APIs, references, and other resources for this product.

Release notes

Read about the latest releases for GKE

Use cases

Use cases 

Use case 

Continuous delivery pipeline 

Enable rapid application development and iteration by making it easy to deploy, update, and manage your applications and services. Configure GKE, Cloud Source Repositories, Cloud Build, and Spinnaker for Google Cloud services to automatically build, test, and deploy an app. When the app code is modified, the changes trigger the continuous delivery pipeline to automatically rebuild, retest, and redeploy the new version.

Use case 

Migrating a two-tier application to GKE 

Use Migrate for Anthos to move and convert workloads directly into containers in GKE. Migrate a two-tiered LAMP stack application, with both application and database VMs, from VMware to GKE. Improve security by making the database accessible from the application container only and not from outside the cluster. Replace SSH access with authenticated shell access through kubectl. See container system logs through automatic Cloud Logging integration.

View all technical guides 

All features

All features 

{ Backup for GKE } { Backup for GKE is an easy, cloud-native way for customers running stateful workloads on GKE to protect, manage, and restore their containerized applications and data. } 

{ Identity and access management } { Control access in the cluster with your Google accounts and role permissions. } 

{ Hybrid networking } { Reserve an IP address range for your cluster, allowing your cluster IPs to coexist with private network IPs via Google Cloud VPN. } 

{ Security and compliance } { GKE is backed by a Google security team of over 750 experts and is both HIPAA and PCI DSS compliant. } 

{ Integrated logging and monitoring } { Enable Cloud Logging and Cloud Monitoring with simple checkbox configurations, making it easy to gain insight into how your application is running. } 

{ Cluster options } { Choose clusters tailored to the availability, version stability, isolation, and pod traffic requirements of your workloads. } 

{ Auto scale } { Automatically scale your application deployment up and down based on resource utilization (CPU, memory). } 

{ Auto upgrade } { Automatically keep your cluster up to date with the latest release version of Kubernetes. Kubernetes release updates are quickly made available within GKE. } 

{ Auto repair } { When auto repair is enabled, if a node fails a health check, GKE initiates a repair process for that node. } 

{ Resource limits } { Kubernetes allows you to specify how much CPU and memory (RAM) each container needs, which is used to better organize workloads within your cluster. } 

{ Container isolation } { Use GKE Sandbox for a second layer of defense between containerized workloads on GKE for enhanced workload security. } 

{ Stateful application support } { GKE isn't just for 12-factor apps. You can attach persistent storage to containers, and even host complete databases. } 

{ Docker image support } { GKE supports the common Docker container format. } 

{ Fully managed } { GKE clusters are fully managed by Google Site Reliability Engineers (SREs), ensuring your cluster is available and up-to-date. } 

{ OS built for containers } { GKE runs on Container-Optimized OS, a hardened OS built and managed by Google. } 

{ Private container registry } { Integrating with Google Container Registry makes it easy to store and access your private Docker images. } 

{ Fast consistent builds } { Use Cloud Build to reliably deploy your containers on GKE without needing to setup authentication. } 

{ Workload portability, on-premises and cloud } { GKE runs Certified Kubernetes, enabling workload portability to other Kubernetes platforms across clouds and on-premises. } 

{ GPU and TPU support } { GKE supports GPUs and TPUs and makes it easy to run ML, GPGPU, HPC, and other workloads that benefit from specialized hardware accelerators. } 

{ Built-in dashboard } { Cloud Console offers useful dashboards for your project's clusters and their resources. You can use these dashboards to view, inspect, manage, and delete resources in your clusters. } 

{ Spot VMs } { Affordable compute instances suitable for batch jobs and fault-tolerant workloads. Spot VMs provide significant savings of up to 91% while still getting the same performance and capabilities as regular VMs. } 

{ Persistent disks support } { Durable, high-performance block storage for container instances. Data is stored redundantly for integrity, flexibility to resize storage without interruption, and automatic encryption. You can create persistent disks in HDD or SSD formats. You can also take snapshots of your persistent disk and create new persistent disks from that snapshot. } 

{ Local SSD support } { GKE offers always-encrypted local solid-state drive (SSD) block storage. Local SSDs are physically attached to the server that hosts the virtual machine instance for very high input/output operations per second (IOPS) and very low latency compared to persistent disks. } 

{ Global load balancing } { Global load-balancing technology helps you distribute incoming requests across pools of instances across multiple regions, so you can achieve maximum performance, throughput, and availability at low cost. } 

{ Linux and Windows support } { Fully supported for both Linux and Windows workloads, GKE can run both Windows Server and Linux nodes. } 

{ Hybrid and multi-cloud support } { Take advantage of Kubernetes and cloud technology in your own data center. Get the GKE experience with quick, managed, and simple installs as well as upgrades validated by Google through Anthos. } 

{ Serverless containers } { Run stateless serverless containers abstracting away all infrastructure management and automatically scale them with Cloud Run. } 

{ Usage metering } { Fine-grained visibility to your Kubernetes clusters. See your GKE clusters' resource usage broken down by namespaces and labels, and attribute it to meaningful entities. } 

{ Release channels } { Release channels provide more control over which automatic updates a given cluster receives, based on the stability requirements of the cluster and its workloads. You can choose rapid, regular, or stable. Each has a different release cadence and targets different types of workloads. } 

{ Software supply chain security } { Verify, enforce, and improve security of infrastructure components and packages used for container images with Container Analysis. } 

{ Per-second billing } { Google bills in second-level increments. You pay only for the compute time that you use. } 

Pricing

Pricing 

One autopilot cluster or zonal cluster per billing account is free.

Cluster management fee of $0.10 per cluster/hour apply, except for Anthos clusters. User pods in autopilot clusters are billed per second for CPU cores, memory, and ephemeral storage, until a pod is deleted. Worker nodes in standard clusters accrue compute costs, until a cluster is deleted.

View pricing details 

Partners

Accelerate your app development with partners

Find just the right partner to help you develop your app using Kubernetes-native CI/CD tooling, or build your own using a partner-built, ready-to-go solution.

Expand all 

Service partners

These partners are well versed in GKE and building streamlined apps using CI/CD. 

+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 

Partner solutions

Discover popular enterprise-ready containerized solutions on Google Cloud Marketplace and tap into portability, simplified licensing, and consolidated billing.

+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 

See all partners Explore our marketplace 

Take the next step 

Start building on Google Cloud with $300 in free credits and 20+ always free products. 

Try GKE free 

Take the next step 

Start your next project, explore interactive tutorials, and manage your account. 

Go to console 

Need help getting started? 

Contact sales 
+ 

Work with a trusted partner 

Find a partner 
+ 

Continue browsing 

See all products 

Need help getting started? 

Contact sales 
+ 

Work with a trusted partner 

Find a partner 
+ 

Get tips & best practices 

See tutorials 

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to understand" },{ "type": "thumb-down", "id": "incorrectInformationOrSampleCode", "label":"Incorrect information or sample code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed", "label":"Missing the information/samples I need" },{ "type": "thumb-down", "id": "otherDown", "label":"Other" }] [{ "type": "thumb-up", "id": "easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id": "solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id": "otherUp", "label":"Other" }] Need to tell us more? 

Why Google

+ Choosing Google Cloud 
+ Trust and security 
+ Open cloud 
+ Multicloud 
+ Global infrastructure 
+ Customers and case studies 
+ Analyst reports 
+ Whitepapers 
+ Blog 

Products and pricing

+ Google Cloud pricing 
+ Google Workspace pricing 
+ See all products 

Solutions

+ Infrastructure modernization 
+ Databases 
+ Application modernization 
+ Smart analytics 
+ Artificial Intelligence 
+ Security 
+ Productivity & work transformation 
+ Industry solutions 
+ DevOps solutions 
+ Small business solutions 
+ See all solutions 

+ Google Cloud documentation 
+ Google Cloud quickstarts 
+ Google Cloud Marketplace 
+ Learn about cloud computing 
+ Support 
+ Code samples 
+ Cloud Architecture Center 
+ Training 
+ Certifications 
+ Google Developers 
+ Google Cloud for Startups 
+ System status 
+ Release Notes 

Engage

+ Contact sales 
+ Find a Partner 
+ Become a Partner 
+ Events 
+ Podcasts 
+ Developer Center 
+ Press Corner 
+ Google Cloud on YouTube 
+ Google Cloud Tech on YouTube 
+ Follow on Twitter 
+ Join User Research 
+ We're hiring. Join Google Cloud! 
+ Google Cloud Community 


=======asdf49======== Q\Go K8s\$\831867ea53e62434bc354b5eccb40904.txt
https://go.dev/blog/get-familiar-with-workspaces
TITLE: Get familiar with workspaces - The Go Programming Language

Go 1.18 adds workspace mode to Go, which lets you work on multiple modules simultaneously.

You can get Go 1.18 by visiting the download page. The release notes have more details about all the changes.

Workspaces

Workspaces in Go 1.18 let you work on multiple modules simultaneously without having to edit go.mod files for each module. Each module within a workspace is treated as a root module when resolving dependencies.

Previously, to add a feature to one module and use it in another module, you needed to either publish the changes to the first module, or edit the go.mod file of the dependent module with a replace directive for your local, unpublished module changes. In order to publish without errors, you had to remove the replace directive from the dependent module's go.mod file after you published the local changes to the first module.

With Go workspaces, you control all your dependencies using a go.work file in the root of your workspace directory. The go.work file has use and replace directives that override the individual go.mod files, so there is no need to edit each go.mod file individually.

You create a workspace by running go work init with a list of module directories as space-separated arguments. The workspace doesn't need to contain the modules you're working with. The init command creates a go.work file that lists modules in the workspace. If you run go work init without arguments, the command creates an empty workspace.

To add modules to the workspace, run go work use [moddir] or manually edit the go.work file. Run go work use -r to recursively add directories in the argument directory with a go.mod file to your workspace. If a directory doesn't have a go.mod file, or no longer exists, the use directive for that directory is removed from your go.work file.

The syntax of a go.work file is similar to a go.mod file and contains the following directives:

+ go: the go toolchain version e.g. go 1.18 
+ use: adds a module on disk to the set of main modules in a workspace. Its argument is a relative path to the directory containing the module's go.mod file. A use directive doesn't add modules in subdirectories of the specified directory. 
+ replace: Similar to a replace directive in a go.mod file, a replace directive in a go.work file replaces the contents of a specific version of a module, or all versions of a module, with contents found elsewhere. 

Workflows

Workspaces are flexible and support a variety of workflows. The following sections are a brief overview of the ones we think will be the most common.

Add a feature to an upstream module and use it in your own module

Create a directory for your workspace.

Clone the upstream module you want to edit. If you haven't contributed to Go before, read the contribution guide.

Add your feature to the local version of the upstream module.

Run go work init [path-to-upstream-mod-dir] in the workspace folder.

Make changes to your own module in order to implement the feature added to the upstream module.

Run go work use [path-to-your-module] in the workspace folder.

The go work use command adds the path to your module to your go.work file:

go 1.18

use (
./path-to-upstream-mod-dir
./path-to-your-module
)

Run and test your module using the new feature added to the upstream module.

Publish the upstream module with the new feature.

Publish your module using the new feature.

Work with multiple interdependent modules in the same repository

While working on multiple modules in the same repository, the go.work file defines the workspace instead of using replace directives in each module's go.mod file.

Create a directory for your workspace.

Clone the repository with the modules you want to edit. The modules don't have to be in your workspace folder as you specify the relative path to each with the use directive.

Run go work init [path-to-module-one] [path-to-module-two] in your workspace directory.

Example: You are working on example.com/x/tools/groundhog which depends on other packages in the example.com/x/tools module.

You clone the repository and then run go work init tools tools/groundhog in your workspace folder.

The contents of your go.work file resemble the following:

go 1.18

use (
./tools
./tools/groundhog
)

Any local changes made in the tools module will be used by tools/groundhog in your workspace.

Switching between dependency configurations

To test your modules with different dependency configurations you can either create multiple workspaces with separate go.work files, or keep one workspace and comment out the use directives you don't want in a single go.work file.

To create multiple workspaces:

+ Create separate directories for different dependency needs. 
+ Run go work init in each of your workspace directories. 
+ Add the dependencies you want within each directory via go work use [path-to-dependency]. 
+ Run go run [path-to-your-module] in each workspace directory to use the dependencies specified by its go.work file. 

To test out different dependencies within the same workspace, open the go.work file and add or comment out the desired dependencies.

Still using GOPATH?

Maybe using workspaces will change your mind. GOPATH users can resolve their dependencies using a go.work file located at the base of their GOPATH directory. Workspaces don't aim to completely recreate all GOPATH workflows, but they can create a setup that shares some of the convenience of GOPATH while still providing the benefits of modules.

To create a workspace for GOPATH:

+ Run go work init in the root of your GOPATH directory. 
+ To use a local module or specific version as a dependency in your workspace, run go work use [path-to-module]. 
+ To replace existing dependencies in your modules' go.mod files use go work replace [path-to-module]. 
+ To add all the modules in your GOPATH or any directory, run go work use -r to recursively add directories with a go.mod file to your workspace. If a directory doesn't have a go.mod file, or no longer exists, the use directive for that directory is removed from your go.work file. 

Note: If you have projects without go.mod files that you want to add to the workspace, change into their project directory and run go mod init, then add the new module to your workspace with go work use [path-to-module].

Workspace commands

Along with go work init and go work use, Go 1.18 introduces the following commands for workspaces:

+ go work sync: pushes the dependencies in the go.work file back into the go.mod files of each workspace module. 
+ go work edit: provides a command-line interface for editing go.work, for use primarily by tools or scripts. 

Module-aware build commands and some go mod subcommands examine the GOWORK environment variable to determine if they are in a workspace context.

Workspace mode is enabled if the GOWORK variable names a path to a file that ends in .work. To determine which go.work file is being used, run go env GOWORK. The output is empty if the go command is not in workspace mode.

When workspace mode is enabled, the go.work file is parsed to determine the three parameters for workspace mode: A Go version, a list of directories, and a list of replacements.

Some commands to try in workspace mode (provided you already know what they do!):

go work init
go work sync
go work use
go list
go build
go test
go run
go vet

Editor experience improvements

We're particularly excited about the upgrades to Go's language server gopls and the VSCode Go extension that make working with multiple modules in an LSP-compatible editor a smooth and rewarding experience.

Find references, code completion, and go to definitions work across modules within the workspace. Version 0.8.1 of gopls introduces diagnostics, completion, formatting, and hover for go.work files. You can take advantage of these gopls features with any LSP-compatible editor.

Editor specific notes

+ The latest vscode-go release allows quick access to your workspace's go.work file via the Go status bar's Quick Pick menu. 

+ GoLand supports workspaces and has plans to add syntax highlighting and code completion for go.work files. 

For more information on using gopls with different editors see the gopls documentation.

What's next?


=======asdf50======== Q\Go K8s\$\bb73b3d9701b4c3e61bd118cd36be7aa.txt
https://www.redhat.com/sysadmin/troubleshooting-terminating-namespaces
TITLE: How to fix Kubernetes namespaces stuck in the terminating state | Enable Sysadmi...

We use cookies on our websites to deliver our online services. Details about how we use cookies and how you may disable them are set out in our Privacy Statement. By using this website you agree to our use of cookies. X 

Enable Sysadmin 

+ Articles 

Automation Career Cloud Containers Kubernetes Linux Programming Security 

+ About 

About Enable Sysadmin Email newsletter Join the community Sudoers program Meet the team FAQs 

+ Welcome 

Enable Sysadmin 

+ Articles 

Automation Career Cloud Containers Kubernetes Linux Programming Security 

+ About 

About Enable Sysadmin Email newsletter Join the community Sudoers program Meet the team FAQs 

+ Welcome 

Subscribe to our RSS feed or Email newsletter. 

GO 

How to fix Kubernetes namespaces stuck in the terminating state

Sometimes the process to delete Kubernetes namespaces gets hung up, and the command never completes. Here's how to troubleshoot terminating namespaces

Posted: February 9, 2022 | by Shveta Sachdeva (Red Hat) 

Photo by Andrea Piacquadio from Pexels

A Kubernetes namespace isolates specific system resources usually visible to all processes. Each namespace has its own services, pods, and deployments in the cluster. A namespace in Kubernetes is essentially the same as a project in OpenShift.

These days, most products are containerized and can easily be deployed on Kubernetes or OpenShift. This requires continuous application deployment and testing. I recently worked on test automation that involves the creation of namespaces, resources, and data in the namespace, followed by running the test suite, and then removing the data and namespace once the tests are complete.

While frequently creating and deleting namespaces in Kubernetes, I stumbled upon an issue where a namespace got stuck in the Terminating state and just refused to delete.

I use minikube to run Kubernetes locally, but you can use the following steps and commands in any Kubernetes or OpenShift environment.

Note: The example namespace in my screenshots and commands is tackle-operator.

Problem: Deleting a namespace

Sometimes the process to delete namespaces gets stuck, and the command never completes. While the command returns a message showing that the namespace was deleted, querying it indicates that it's actually in a Terminating state:

$ kubectl delete namespace tackle-operator
namespace "tackle-operator" deleted

$ kubectl get namespace
NAME STATUS AGE
default Active 148d
ingress-nginx Active 148d
kube-node-lease Active 148d
kube-public Active 148d
kube-system Active 148d
kubernetes-dashboard Active 148d
tackle-operator Terminating 10d

The result shows the namespace was deleted, but its status reveals that it's not quite gone yet, and you can still see the namespace in the minikube UI.

Open the minikube dashboard in the Select namespace dropdown on the top, and you can still select the namespace you thought you deleted.

(Shveta Sachdeva, CC BY-SA 4.0) 

You might try to delete it from the user interface (UI). To do so, click on the three dots shown at the right of the namespace and select Delete.

Check after a few minutes (or days, months, years). It still shows up as terminating.

[ Ready to get started with containers quickly? Download the eBook OpenShift for Developers. ]

Why do some namespaces never delete?

Kubernetes stores each namespace as a YAML or JSON file.

$ kubectl get namespace ${NAMESPACE} -o yaml
apiVersion: v1
kind: Namespace
metadata:
annotations:
kubectl.kubernetes.io/last-applied-configuration: |
kubernetes.io/metadata.name: tackle-operator
spec:
finalizers:
- kubernetes
status:
conditions:
- lastTransitionTime: "2022-01-19T19:05:31Z"
message: 'Some content in the namespace has finalizers remaining: tackles.tackle.io/finalizer in 1 resource instances'
reason: SomeFinalizersRemain
status: "True"
type: NamespaceFinalizersRemaining
phase: Terminating

Notice the inclusion of the finalizers field in the above JSON. Some namespaces have a finalizer defined under spec.

A finalizer is a special metadata key that tells Kubernetes to wait until a specific condition is met before it fully deletes a resource.

So when you run a command like kubectl delete namespace abcd, Kubernetes checks for a finalizer in the metadata.finalizers field. If the resource defined in the finalizer cannot be deleted for any reason, then the namespace is not deleted either. This puts the namespace into a terminating state awaiting the removal of the resource, which never occurs.

When an object has been terminating for an excessive time, check its finalizers by inspecting the metadata.finalizers field in its YAML.

Deleting a namespace stuck in a terminating state

Once you understand the cause of the problem, you can understand why the solution is to remove the finalizer from the YAML. Only by eliminating the constraint preventing a namespace from being deleted can you remove the namespace successfully.

There are subtleties in this task, though. For example, you can't just edit the namespace YAML from the Kubernetes UI to remove the finalizer because the UI doesn't update the namespace. To see this, edit the namespace to remove the finalizer, and then update. Edit the YAML again, and you'll notice that the finalizer still exists.

[ Learn 16 steps for building production-ready Kubernetes clusters. ]

Here's the right way to do it.

Step 1: Dump the contents of the namespace in a temporary file called tmp.json:

$ kubectl get namespace ${NAMESPACE} -o json > tmp.json

Step 2: Edit the temporary file in your favorite text editor (mine is Vi):

$ vi tmp.json

Step 3: Remove kubernetes from the finalizer array, and save the file. You can skip to step 4 now unless you're on OpenShift or OKD. For those, you must set up a temporary proxy. Keep this terminal open until the namespace is deleted. To start a proxy server at http://127.0.0.1:8001, use the proxy subcommand:

$ oc proxy

From a separate window, run this command:

$ curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/${PROJECT_NAME}/finalize

Step 4: Call the Kubernetes API application/json against the /finalize endpoint for the namespace to update the JSON. Use the port number appropriate for your instance. I'm using 44315 because that's where my instance of minikube is running:

$ curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:44315/api/v1/namespaces/${NAMESPACE}/finalize

If you don't know what port your Kubernetes instance is using, look in your browser's URL bar when you navigate to the UI:

$ curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:44315/api/v1/namespaces/${NAMESPACE}/finalize
{
"kind": "Namespace",
"apiVersion": "v1",
"metadata": {
"name": "tackle-operator",
"creationTimestamp": "2022-01-10T19:13:58Z",
"deletionTimestamp": "2022-01-19T19:05:18Z",
"status": {
"phase": "Terminating",
"conditions": [
{
"type": "NamespaceDeletionDiscoveryFailure",
"status": "False",
"lastTransitionTime": "2022-01-21T04:51:31Z",
"reason": "ResourcesDiscovered",
"message": "All resources successfully discovered"
},
{
"type": "NamespaceDeletionContentFailure",
"status": "False",
"lastTransitionTime": "2022-01-19T19:05:31Z",
"reason": "ContentDeleted",
"message": "All content successfully deleted, may be waiting on finalization"
},
}

Download now

And that's it. The minikube dashboard no longer displays the namespace:

$ kubectl get namespace ${NAMESPACE}
Error from server (NotFound): namespaces "${NAMESPACE}" not found

Stop terminating

In my testing, I create and delete namespaces frequently. During this, I discovered an issue where namespaces became stuck in the terminating state. I developed a straightforward process for entirely deleting the namespaces. I hope that this process will help anyone else who encounters the same issue.

Check out these related articles on Enable Sysadmin

How to use a VM as a Jenkins agent 

Get started with DevOps by learning how to create infrastructure for application testing predictably and reliably.

Posted: February 4, 2022 

Author: Shveta Sachdeva (Red Hat) 

The 7 most used Linux namespaces 

Check out this brief overview of what the seven most used Linux namespaces are.

Posted: January 11, 2021 

Author: Steve Ovens (Red Hat, Sudoer) 

Kubernetes labels: 11 things to know 

Using Kubernetes labels effectively requires an understanding of tagging methods, labeling use cases, best practices, and things you definitely want to avoid.

Posted: December 16, 2021 

Author: Kirby Drumm 

Topics: OpenShift Kubernetes Troubleshooting 

Shveta Sachdeva 

Shveta is a senior software engineer at Red Hat, leading a team. She is a subject-matter expert on the Migration Toolkit for Applications (MTA) and Pathfinder that helps customers migrate their applications to containers (Openshift and Kubernetes) and the latest technologies. More about me 

Red Hat Summit 2022: On Demand

Get the latest on Ansible, Red Hat Enterprise Linux, OpenShift, and more from our virtual event on demand.

Register for free 

Related Content

How to create a Rust application on OpenShift 

With the help of a container and OpenShift's "import from Git" functionality, you can onboard a Rust application onto OpenShift quickly.

Posted: June 22, 2022 

Author: Nicole Lama (Red Hat) 

How to install and run Rust on Linux 

Learn how to install the Rust programming language and then create, build, run, and test a new Rust project.

Posted: June 20, 2022 

Author: Nicole Lama (Red Hat) 

How to interrupt the Linux boot process 

Interrupting the boot process is useful for troubleshooting and maintenance, but make sure you enable full disk encryption first.

Posted: June 14, 2022 

Author: Seth Kenlon (Red Hat) 

OUR BEST CONTENT, DELIVERED TO YOUR INBOX

The opinions expressed on this website are those of each author, not of the author's employer or of Red Hat. The content published on this site are community contributions and are for informational purpose only AND ARE NOT, AND ARE NOT INTENDED TO BE, RED HAT DOCUMENTATION, SUPPORT, OR ADVICE.

Red Hat and the Red Hat logo are trademarks of Red Hat, Inc., registered in the United States and other countries.

Copyright (c)2022 Red Hat, Inc.

+ Privacy Policy 
+ Terms of Use 
+ All policies and guidelines 

x

Subscribe now

Get the highlights in your inbox every week.


=======asdf51======== Q\Go K8s\$\aa9673a179d82614699eb49e269239cb.txt
https://www.guru99.com/kubernetes-tutorial.html
TITLE: Kubernetes Tutorial for Beginners: Basics, Features, Architecture

Kubernetes is a container management system developed on the Google platform. Kubernetes helps to manage containerised applications in various types of physical, virtual, and cloud environments. Google Kubernetes is a highly flexible container tool to consistently deliver complex applications running on clusters of hundreds to thousands of individual servers.

Why you need containers?

Today's internet user never accept downtime. Therefore developers have to find a method to perform maintenance and update without interrupting their services.

Therefore container, which is isolated environments. It includes everything needed for application to run. It makes it easy for a developer to edit and deploying apps. Moreover, containerization has become a preferred method for packaging, deploying, and update web apps.

In this Kubernetes tutorial for beginners, you will learn Kubernetes basics like:

+ What is Kubernetes? 
+ Why you need containers? 
+ What task are performed by Kubernetes? 
+ Why use Kubernetes? 
+ Features of Kubernetes 
+ Kubernetes Basics 
+ Kubernetes Architecture 
+ Other Key Terminologies 
+ Kubernetes vs. Docker Swarm 
+ Advantages of Kubernetes 
+ Disadvantages of Kubernetes 
+ Top Kubernetes Interview Questions and Answers 

What task are performed by Kubernetes?

Kubernetes is the Linux kernel which is used for distributed systems. It helps you to be abstract the underlying hardware of the nodes(servers) and offers a consistent interface for applications that consume the shared pool of resources.

Why use Kubernetes?

Kubernetes helps you to control the resource allocation and traffic management for cloud applications and microservices. It also helps to simplify various aspects of service-oriented infrastructures. Kubernetes allows you to assure where and when containerized applications run and helps you to find resources and tools you want to work with.

Features of Kubernetes

Here are the essential Kubernetes features:

+ Automated Scheduling 
+ Self-Healing Capabilities 
+ Automated rollouts & rollback 
+ Horizontal Scaling & Load Balancing 
+ Offers environment consistency for development, testing, and production 
+ Infrastructure is loosely coupled to each component can act as a separate unit 
+ Provides a higher density of resource utilization 
+ Offers enterprise-ready features 
+ Application-centric management 
+ Auto-scalable infrastructure 
+ You can create predictable infrastructure 

Kubernetes Basics

Now in this Kubernetes tutorial, we will learn some important Basics of Kubernetes:

Cluster:

It is a collection of hosts(servers) that helps you to aggregate their available resources. That includes ram, CPU, ram, disk, and their devices into a usable pool. 
+ 

Master:

The master is a collection of components which make up the control panel of Kubernetes. These components are used for all cluster decisions. It includes both scheduling and responding to cluster events. 
+ 

Node:

It is a single host which is capable of running on a physical or virtual machine. A node should run both kube-proxy, minikube, and kubelet which are considered as a part of the cluster. 
+ 

Namespace:

It is a logical cluster or environment. It is a widely used method which is used for scoping access or dividing a cluster. 

Kubernetes Architecture

Below is a detailed Kubernetes architecture diagram:

Kubernetes Architecture Diagram 

Master Node

The master node is the first and most vital component which is responsible for the management of Kubernetes cluster. It is the entry point for all kind of administrative tasks. There might be more than one master node in the cluster to check for fault tolerance.

The master node has various components like API Server, Controller Manager, Scheduler, and ETCD. Let see all of them.

API Server: The API server acts as an entry point for all the REST commands used for controlling the cluster.

Scheduler

The scheduler schedules the tasks to the slave node. It stores the resource usage information for every slave node. It is responsible for distributing the workload.

It also helps you to track how the working load is used on cluster nodes. It helps you to place the workload on resources which are available and accept the workload.

Etcd

etcd components store configuration detail and wright values. It communicates with the most component to receive commands and work. It also manages network rules and port forwarding activity.

Worker/Slave nodes

Worker nodes are another essential component which contains all the required services to manage the networking between the containers, communicate with the master node, which allows you to assign resources to the scheduled containers.

+ Kubelet: gets the configuration of a Pod from the API server and ensures that the described containers are up and running. 
+ Docker Container: Docker container runs on each of the worker nodes, which runs the configured pods 
+ Kube-proxy: Kube-proxy acts as a load balancer and network proxy to perform service on a single worker node 
+ Pods: A pod is a combination of single or multiple containers that logically run together on nodes 

Other Key Terminologies

Replication Controllers

A replication controller is an object which defines a pod template. It also controls parameters to scale identical replicas of Pod horizontally by increasing or decreasing the number of running copies.

Replication Sets

Replication sets are an interaction on the replication controller design with flexibility in how the controller recognizes the pods it is meant to manage. It replaces replication controllers because of their higher replicate selection capability.

Deployments

Deployment is a common workload which can be directly created and manage. Deployment use replication set as a building block which adds the feature of life cycle management.

Stateful Sets

It is a specialized pod control which offers ordering and uniqueness. It is mainly used to have fine-grained control, which you have a particular need regarding deployment order, stable networking, and persistent data.

Daemon Sets

Daemon sets are another specialized form of pod controller that runs a copy of a pod on every node in the cluster. This type of pod controller is an effective method for deploying pods that allows you to perform maintenance and offers services for the nodes themselves.

Kubernetes vs. Docker Swarm

Here are important differences between Kubernetes vs Docker.

{Parameter} {Docker Swarm} {Kubernetes} 

{Scaling} {No Autoscaling} {Auto-scaling} 

{Load balancing} {Does auto load balancing} {Manually configure your load balancing settings} 

{Storage volume sharing} {Shares storage volumes with any other container} {Shares storage volumes between multiple containers inside the same Pod} 

{Use of logining and monitoring tool} {Use 3rd party tool like ELK} {Provide an in-built tool for logging and monitoring.} 

{Installation} {Easy & fast} {Complicated & time-consuming} 

{GUI} {GUI not available} {GUI is available} 

{Scalability} {Scaling up is faster than K8S, but cluster strength not as robust} {Scaling up is slow compared to Swarm, but guarantees stronger cluster state Load balancing requires manual service configuration} 

{Load Balancing} {Provides a built-in load balancing technique} {Process scheduling to maintain services while updating} 

{Updates & Rollbacks Data Volumes Logging & Monitoring} {Progressive updates and service health monitoring.} {Only shared with containers in same Pod Inbuilt logging & monitoring tools.} 

Advantages of Kubernetes

+ Easy organization of service with pods 
+ It is developed by Google, who bring years of valuable industry experience to the table 
+ Largest community among container orchestration tools 
+ Offers a variety of storage options, including on-premises, SANs and public clouds 
+ Adheres to the principals of immutable infrastructure 
+ Kubernetes can run on-premises bare metal, OpenStack, public clouds Google, Azure, AWS, etc. 
+ Helps you to avoid vendor lock issues as it can use any vendor-specific APIs or services except where Kubernetes provides an abstraction, e.g., load balancer and storage. 
+ Containerization using kubernetes allows package software to serve these goals. It will enable applications that need to be released and updated without any downtime. 
+ Kubernetes allows you to assure those containerized applications run where and when you want and helps you to find resources and tools which you want to work. 

Disadvantages of Kubernetes

+ Kubenetes dashboard not as useful as it should be 
+ Kubernetes is a little bit complicated and unnecessary in environments where all development is done locally. 
+ Security is not very effective. 

Summary:

+ Container helps an organization to perform maintenance and update without interrupting services 
+ Kubernetes is an example of a container management system developed in the Google platform. 
+ The biggest advantage of using Kubernetes is that it can run on-premises OpenStack, public clouds Google, Azure, AWS, etc. 
+ Kubernetes offers automated Scheduling and Self-Healing Capabilities. 
+ Cluster, master, node, and namespace are important basic of kubernetes 
+ Master node and work node are important components of Kubernetes architecture. 
+ Replication Controllers, Replication sets, Deployments, Stateful Sets, Daemon Sets are other important terms used in Kubernetes. 
+ Docker swarm does not allow auto-scaling while Kubernetes allows auto-scaling. 
+ The biggest drawback of Kubenetes is that it's dashboard not very useful and effective 

You Might Like:

+ Nagios Tutorial: What is Nagios Tool? Architecture & Installation 
+ 10+ Best ITSM Tools (Jul 2022) 
+ 19 BEST TeamViewer Alternative Software (Jul 2022) 
+ 20 Best IT Asset Management Software 2022 [Open source/Paid] 
+ What is DevOps? Full Form, Meaning, Principles & Examples 


=======asdf52======== Q\Go K8s\$\26e2bdf0c3f5940e3c57b1ba34b76abe.txt
https://www.geeksforgeeks.org/golang-gopath-and-goroot/

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang
+ fmt.Sprintf() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ Top 5 Golang Frameworks in 2020
+ How to convert a string in lower case in Golang?
+ How to Split a String in Golang?
+ How to compare times in Golang?
+ Inheritance in GoLang
+ Arrays in Go
+ How to Replace Characters in Golang String?
+ How to Take Input from the User in Golang?
+ Different Ways to Find the Type of Variable in Golang
+ Interfaces in Golang
+ Slices in Golang
+ Go Programming Language (Introduction)
+ How to Trim a String in Golang?
+ How to Assign Default Value for Struct Field in Golang?
+ How to copy one slice into another slice in Golang?
+ Data Types in Go
+ strings.Join() Function in Golang With Examples
+ Golang Maps
+ Channel in Golang
+ How to convert Int data type to Float in Golang?
+ Pointers in Golang
+ How to Delete or Remove a File in Golang?
+ Anonymous function in Go Language

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Time Formatting in Golang
+ fmt.Sprintf() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ Top 5 Golang Frameworks in 2020
+ How to convert a string in lower case in Golang?
+ How to Split a String in Golang?
+ How to compare times in Golang?
+ Inheritance in GoLang
+ Arrays in Go
+ How to Replace Characters in Golang String?
+ How to Take Input from the User in Golang?
+ Different Ways to Find the Type of Variable in Golang
+ Interfaces in Golang
+ Slices in Golang
+ Go Programming Language (Introduction)
+ How to Trim a String in Golang?
+ How to Assign Default Value for Struct Field in Golang?
+ How to copy one slice into another slice in Golang?
+ Data Types in Go
+ strings.Join() Function in Golang With Examples
+ Golang Maps
+ Channel in Golang
+ How to convert Int data type to Float in Golang?
+ Pointers in Golang
+ How to Delete or Remove a File in Golang?
+ Anonymous function in Go Language

Golang - GOPATH and GOROOT

+ Last Updated : 30 May, 2022

There is a set of programs to build and process Go source code. Instead of being run directly, programs in that set are usually invoked by the go program. GOPATH and GOROOT are environment variables that define a certain arrangement and organization for the Go source code. The paths of gopath and goroot can be modified explicitly if required. 

GOPATH

GOPATH, also called the workspace directory, is the directory where the Go code belongs. It is implemented by and documented in the go/build package and is used to resolve import statements. The go get tool downloads packages to the first directory in GOPATH. If the environment variable is unset, GOPATH defaults to a subdirectory named "go" in the user's home directory. To check this, enter the following command:

On Windows: C:\Users\%USERPROFILE%\go

On Linux: $HOME/go

To check the current GOPATH enter the following command:

C:\Users\%USERPROFILE%\go env GOPATH

GOPATH contains 3 directories under it and each directory under it has specific functions:

+ src: It holds source code. The path below this directory determines the import path or the executable name.
+ pkg: It holds installed package objects. Each target operating system and architecture pair has its own subdirectory of pkg.
+ bin: It holds compiled commands. Every command is named for its source directory.

When using modules in Go, the GOPATH is no longer used to determine imports. However, it is still used to store downloaded source code in pkg and compiled commands bin.

GOROOT

GOROOT is for compiler and tools that come from go installation and is used to find the standard libraries. It should always be set to the installation directory. In order to check the current GOROOT enter the following command:

C:\Users\%USERPROFILE%\go env GOROOT

It is possible to install the Go tools to a different location. This can be done by setting the GOROOT environment variable to point to the directory in which it was installed, although this is not recommended as it comes preset with the tooling. 

Multivariate Optimization and its Types - Data Science

Convert Python Code to a Software to Install on Windows Using Inno Setup Compiler

Getting the current date and time with timestamp in local and other timezones in Golang

08, Jun 20

Difference between var keyword and short declaration operator in Golang

01, Jul 19

Anonymous Structure and Field in Golang

09, Aug 19

main and init function in Golang

30, Aug 19

Golang | Deadlock and Default Case in Select Statement

26, Sep 19

How to Rename and Move a File in Golang?

17, Mar 20

How to Remove All Directories and Files in Golang?

12, Mar 20

How to Find the Sin and Cos Value of a Number in Golang?

How to find the capacity of Channel, Pointer and Slice in Golang?

How to Create and Print Multi Dimensional Slice in Golang?

Calculating total number of Hours, Days, Minutes and Seconds between two dates in Golang

How to declare and access pointer variable in Golang?

How to find the Length of Channel, Pointer, Slice, String and Map in Golang?

How to use for and foreach loop in Golang?

How to use Array Reverse Sort Functions for Integer and Strings in Golang?

How to Get First and Last Element of Slice in Golang?

12, May 20

Function that takes an interface type as value and pointer in Golang

12, May 20

Golang Program that Uses Named Return Values and Defaults

How to Get Current Date and Time in Various Format in Golang?

How to Read and Write the Files in Golang?

How to Compare Equality of Struct, Slice and Map in Golang?

Copy an Array by Value and Reference into Another Array in Golang

28, May 20

How to Copy Struct Type Using Value and Pointer Reference in Golang?

04, Jun 20

Difference Between Golang and Ruby

11, Oct 20

vanigupta20024

@vanigupta20024

+ Himansh_Jain

+ Go Language

+ How to Parse JSON in Golang?
+ How to iterate over an Array using for loop in Golang?
+ Structures in Golang
+ Time Durations in Golang
+ Loops in Go Language

+ Class and Object in Golang
+ Strings in Golang
+ time.Parse() Function in Golang With Examples
+ Rune in Golang
+ How to Install Go on Windows?


=======asdf53======== Q\Go K8s\$\faa8aa5b84523d65773e649db04c5aa8.txt
https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes
TITLE: Introduction to Azure Kubernetes Service - Azure Kubernetes Service | Microsoft ...

Azure Kubernetes Service (AKS) simplifies deploying a managed Kubernetes cluster in Azure by offloading the operational overhead to Azure. As a hosted Kubernetes service, Azure handles critical tasks, like health monitoring and maintenance. Since Kubernetes masters are managed by Azure, you only manage and maintain the agent nodes. Thus, AKS is free; you only pay for the agent nodes within your clusters, not for the masters.

You can create an AKS cluster using:

+ The Azure CLI 
+ The Azure portal 
+ Azure PowerShell 
+ Using template-driven deployment options, like Azure Resource Manager templates, Bicep and Terraform. 

When you deploy an AKS cluster, the Kubernetes master and all nodes are deployed and configured for you. Advanced networking, Azure Active Directory (Azure AD) integration, monitoring, and other features can be configured during the deployment process.

For more information on Kubernetes basics, see Kubernetes core concepts for AKS.

Note

This service supports Azure Lighthouse, which lets service providers sign in to their own tenant to manage subscriptions and resource groups that customers have delegated.

AKS also supports Windows Server containers.

Access, security, and monitoring

For improved security and management, AKS lets you integrate with Azure AD to:

+ Use Kubernetes role-based access control (Kubernetes RBAC). 
+ Monitor the health of your cluster and resources. 

Identity and security management

Kubernetes RBAC

To limit access to cluster resources, AKS supports Kubernetes RBAC. Kubernetes RBAC controls access and permissions to Kubernetes resources and namespaces.

Azure AD

You can configure an AKS cluster to integrate with Azure AD. With Azure AD integration, you can set up Kubernetes access based on existing identity and group membership. Your existing Azure AD users and groups can be provided with an integrated sign-on experience and access to AKS resources.

For more information on identity, see Access and identity options for AKS.

To secure your AKS clusters, see Integrate Azure Active Directory with AKS.

Integrated logging and monitoring

Azure Monitor for Container Health collects memory and processor performance metrics from containers, nodes, and controllers within your AKS cluster and deployed applications. You can review both container logs and the Kubernetes master logs, which are:

+ Stored in an Azure Log Analytics workspace. 
+ Available through the Azure portal, Azure CLI, or a REST endpoint. 

For more information, see Monitor Azure Kubernetes Service container health.

Clusters and nodes

AKS nodes run on Azure virtual machines (VMs). With AKS nodes, you can connect storage to nodes and pods, upgrade cluster components, and use GPUs. AKS supports Kubernetes clusters that run multiple node pools to support mixed operating systems and Windows Server containers.

For more information about Kubernetes cluster, node, and node pool capabilities, see Kubernetes core concepts for AKS.

Cluster node and pod scaling

As demand for resources change, the number of cluster nodes or pods that run your services automatically scales up or down. You can adjust both the horizontal pod autoscaler or the cluster autoscaler to adjust to demands and only run necessary resources.

For more information, see Scale an Azure Kubernetes Service (AKS) cluster.

Cluster node upgrades

AKS offers multiple Kubernetes versions. As new versions become available in AKS, you can upgrade your cluster using the Azure portal or Azure CLI. During the upgrade process, nodes are carefully cordoned and drained to minimize disruption to running applications.

To learn more about lifecycle versions, see Supported Kubernetes versions in AKS. For steps on how to upgrade, see Upgrade an Azure Kubernetes Service (AKS) cluster.

GPU-enabled nodes

AKS supports the creation of GPU-enabled node pools. Azure currently provides single or multiple GPU-enabled VMs. GPU-enabled VMs are designed for compute-intensive, graphics-intensive, and visualization workloads.

For more information, see Using GPUs on AKS.

Confidential computing nodes (public preview)

AKS supports the creation of Intel SGX-based, confidential computing node pools (DCSv2 VMs). Confidential computing nodes allow containers to run in a hardware-based, trusted execution environment (enclaves). Isolation between containers, combined with code integrity through attestation, can help with your defense-in-depth container security strategy. Confidential computing nodes support both confidential containers (existing Docker apps) and enclave-aware containers.

For more information, see Confidential computing nodes on AKS.

Storage volume support

To support application workloads, you can mount static or dynamic storage volumes for persistent data. Depending on the number of connected pods expected to share the storage volumes, you can use storage backed by either:

+ Azure Disks for single pod access, or 
+ Azure Files for multiple, concurrent pod access. 

For more information, see Storage options for applications in AKS.

Get started with dynamic persistent volumes using Azure Disks or Azure Files.

Virtual networks and ingress

An AKS cluster can be deployed into an existing virtual network. In this configuration, every pod in the cluster is assigned an IP address in the virtual network, and can directly communicate with:

+ Other pods in the cluster 
+ Other nodes in the virtual network. 

Pods can also connect to other services in a peered virtual network and to on-premises networks over ExpressRoute or site-to-site (S2S) VPN connections.

For more information, see the Network concepts for applications in AKS.

Ingress with HTTP application routing

The HTTP application routing add-on helps you easily access applications deployed to your AKS cluster. When enabled, the HTTP application routing solution configures an ingress controller in your AKS cluster.

As applications are deployed, publicly accessible DNS names are autoconfigured. The HTTP application routing sets up a DNS zone and integrates it with the AKS cluster. You can then deploy Kubernetes ingress resources as normal.

To get started with ingress traffic, see HTTP application routing.

Development tooling integration

Kubernetes has a rich ecosystem of development and management tools that work seamlessly with AKS. These tools include Helm and the Kubernetes extension for Visual Studio Code.

Azure provides several tools that help streamline Kubernetes, such as DevOps Starter.

DevOps Starter

DevOps Starter provides a simple solution for bringing existing code and Git repositories into Azure. DevOps Starter automatically:

+ Creates Azure resources (such as AKS); 
+ Configures a release pipeline in Azure DevOps Services that includes a build pipeline for CI; 
+ Sets up a release pipeline for CD; and, 
+ Generates an Azure Application Insights resource for monitoring. 

For more information, see DevOps Starter.

Docker image support and private container registry

AKS supports the Docker image format. For private storage of your Docker images, you can integrate AKS with Azure Container Registry (ACR).

To create a private image store, see Azure Container Registry.

Kubernetes certification

AKS has been CNCF-certified as Kubernetes conformant.

Regulatory compliance

AKS is compliant with SOC, ISO, PCI DSS, and HIPAA. For more information, see Overview of Microsoft Azure compliance.

Next steps

Learn more about deploying and managing AKS with the Azure CLI Quickstart.


=======asdf54======== Q\Go K8s\$\0450d6e2d511632d66aac8efaa79a493.txt
https://www.geeksforgeeks.org/golang-maps/

+ Golang program that uses structs as map keys
+ Golang Maps
+ Slices in Golang
+ Arrays in Go
+ How to Copy an Array into Another Array in Golang?
+ How to copy one slice into another slice in Golang?
+ How to Install Go on Windows?
+ Hello World in Golang
+ Identifiers in Go Language
+ Go Keywords
+ Data Types in Go
+ Go Variables
+ Constants- Go Language
+ Rune in Golang
+ Golang | How to find the index of rune in the string?
+ How to find the index value of specified string in Golang?
+ strings.Index() Function in Golang With Examples
+ Different ways to concatenate two strings in Golang
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Check if the given characters is present in Golang String
+ Check If the Rune is a Letter or not in Golang
+ Check If the Rune is a Unicode Punctuation Character or not in Golang
+ How to check the specified rune in Golang String?
+ How to Map a Rune to the Specified Case in Golang?
+ time.Sleep() Function in Golang With Examples
+ Time Formatting in Golang

+ Golang program that uses structs as map keys
+ Golang Maps
+ Slices in Golang
+ Arrays in Go
+ How to Copy an Array into Another Array in Golang?
+ How to copy one slice into another slice in Golang?
+ How to Install Go on Windows?
+ Hello World in Golang
+ Identifiers in Go Language
+ Go Keywords
+ Data Types in Go
+ Go Variables
+ Constants- Go Language
+ Rune in Golang
+ Golang | How to find the index of rune in the string?
+ How to find the index value of specified string in Golang?
+ strings.Index() Function in Golang With Examples
+ Different ways to concatenate two strings in Golang
+ Different ways to compare Strings in Golang
+ strings.Contains Function in Golang with Examples
+ Check if the given characters is present in Golang String
+ Check If the Rune is a Letter or not in Golang
+ Check If the Rune is a Unicode Punctuation Character or not in Golang
+ How to check the specified rune in Golang String?
+ How to Map a Rune to the Specified Case in Golang?
+ time.Sleep() Function in Golang With Examples
+ Time Formatting in Golang

Golang Maps

+ Last Updated : 10 Sep, 2021

In Go language, a map is a powerful, ingenious, and versatile data structure. Golang Maps is a collection of unordered pairs of key-value. It is widely used because it provides fast lookups and values that can retrieve, update or delete with the help of keys.

+ It is a reference to a hash table.
+ Due to its reference type it is inexpensive to pass, for example, for a 64-bit machine it takes 8 bytes and for a 32-bit machine, it takes 4 bytes.
+ In the maps, a key must be unique and always in the type which is comparable using == operator or the type which support != operator. So, most of the built-in type can be used as a key like an int, float64, rune, string, comparable array and structure, pointer, etc. The data types like slice and noncomparable arrays and structs or the custom data types which are not comparable don't use as a map key.
+ In maps, the values are not unique like keys and can be of any type like int, float64, rune, string, pointer, reference type, map type, etc.
+ The type of keys and type of values must be of the same type, different types of keys and values in the same maps are not allowed. But the type of key and the type values can differ.
+ The map is also known as a hash map, hash table, unordered map, dictionary, or associative array.
+ In maps, you can only add value when the map is initialized if you try to add value in the uninitialized map, then the compiler will throw an error.

How to creating and initializing Maps?

In Go language, maps can create and initialize using two different ways: 

1. Simple: In this method, you can create and initialize a map without the use of make() function:

Creating Map: You can simply create a map using the given syntax:

// An Empty map
map[Key_Type]Value_Type{}

// Map with key-value pair
map[Key_Type]Value_Type{key1: value1, ..., keyN: valueN}

Example: 

var mymap map[int]string

In maps, the zero value of the map is nil and a nil map doesn't contain any key. If you try to add a key-value pair in the nil map, then the compiler will throw runtime error. 
Initializing map using map literals: Map literal is the easiest way to initialize a map with data just simply separate the key-value pair with a colon and the last trailing colon is necessary if you do not use, then the compiler will give an error. 

// Go program to illustrate how to

// create and initialize maps

// Creating and initializing empty map

// Using var keyword

var map_1 map[int]int

// Checking if the map is nil or not

if map_1 == nil {

fmt.Println("True")

} else {

fmt.Println("False")

// Using shorthand declaration and

// using map literals

map_2 := map[int]string{

fmt.Println("Map-2: ", map_2)

True
Map-2: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]

2. Using make function: You can also create a map using make() function. This function is an inbuilt function and in this method, you just need to pass the type of the map and it will return an initialized map.]

make(map[Key_Type]Value_Type, initial_Capacity)
make(map[Key_Type]Value_Type)

// Go program to illustrate how to

// create and initialize a map

// Using make() function

// Creating a map

// Using make() function

var My_map = make(map[float64]string)

fmt.Println(My_map)

// As we already know that make() function

// always returns a map which is initialized

// So, we can add values in it

My_map[1.3] = "Rohit"

My_map[1.5] = "Sumit"

fmt.Println(My_map)

map[]
map[1.3:Rohit 1.5:Sumit]

Important Points 

1. How to iterate over a map?: You can iterate a map using the range for loop. The value of this loop may vary because the map is an unordered collection.

// Go program to illustrate how

// to iterate the map using for

// rang loop

// Iterating map using for rang loop

for id, pet := range m_a_p {

fmt.Println(id, pet)

90 Dog
91 Cat
92 Cow
93 Bird
94 Rabbit

2. How to add key-value pairs in the map?: In maps, you are allowed to add key-value pairs in the initialized map using the given syntax:

map_name[key]=value

In maps, if you try to add an already existing key, then it will simply override or update the value of that key with the new value.

// Go program to illustrate how to add

// a key-value pair in the map using

// make() function

fmt.Println("Original map: ", m_a_p)

// Adding new key-value pairs in the map

m_a_p[95] = "Parrot"

m_a_p[96] = "Crow"

fmt.Println("Map after adding new key-value pair:\n", m_a_p)

// Updating values of the map

m_a_p[91] = "PIG"

m_a_p[93] = "DONKEY"

fmt.Println("\nMap after updating values of the map:\n", m_a_p)

Original map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]
Map after adding new key-value pair:
map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit 95:Parrot 96:Crow]

Map after updating values of the map:
map[90:Dog 91:PIG 92:Cow 93:DONKEY 94:Rabbit 95:Parrot 96:Crow]

3. How to retrieve a value related to a key in the maps?: In maps, you can retrieve a value with the help of key using the following syntax:

map_name[key]

If the key doesn't exist in the given map, then it will return zero value of the map, i.e, nil. And if the key exists in the given map, then it will return the value related to that key.

// Go program to illustrate how to

// retrieve the value of the key

fmt.Println("Original map: ", m_a_p)

// Retrieving values with the help of keys

value_1 := m_a_p[90]

value_2 := m_a_p[93]

fmt.Println("Value of key[90]: ", value_1)

fmt.Println("Value of key[93]: ", value_2)

Original map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]
Value of key[90]: Dog
Value of key[93]: Bird

4. How to check the existence of the key in the map?: In maps, you can check whether the given key exists or not using the following syntax:

// With value
// It will gives the value and check result
value, check_variable_name:= map_name[key]

or

// Without value using the blank identifier
// It will only give check result
_, check_variable_name:= map_name[key]

Here, if the value of the check_variable_name is true which means the key exists in the given map and if the value of check_variable_name is false which means the key does not exist in the given map. 

// Go program to illustrate how to

// check the key is available or not

fmt.Println("Original map: ", m_a_p)

// Checking the key is available

// or not in the m_a_p map

pet_name, ok := m_a_p[90]

fmt.Println("\nKey present or not:", ok)

fmt.Println("Value:", pet_name)

// Using blank identifier

_, ok1 := m_a_p[92]

fmt.Println("\nKey present or not:", ok1)

Original map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]

Key present or not: true
Value: Dog

Key present or not: true

5. How to delete key from the map?: In maps, you are allowed to delete the key present in the map using the delete() function. It is inbuilt function and does not return any value and does not do anything if the key does not present in the given map. In this function, you just simply pass the map and key which you want to delete from the map.

Syntax: 

delete(map_name, key)

// Go program to illustrate how to delete a key

fmt.Println("Original map: ", m_a_p)

// Deleting keys

// Using delete function

delete(m_a_p, 90)

delete(m_a_p, 93)

fmt.Println("Map after deletion: ", m_a_p)

Original map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]
Map after deletion: map[91:Cat 92:Cow 94:Rabbit]

6. Modifying map: As we know that maps are of reference type. So, when we assign an existing map to a new variable, both the maps still refer to the same underlying data structure. So, when we update one map it will reflect in another map.

// modification concept in map

fmt.Println("Original map: ", m_a_p)

// Assigned the map into a new variable

new_map := m_a_p

// Perform modification in new_map

new_map[96] = "Parrot"

new_map[98] = "Pig"

// Display after modification

fmt.Println("New map: ", new_map)

fmt.Println("\nModification done in old map:\n", m_a_p)

Original map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit]
New map: map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit 96:Parrot 98:Pig]

Modification done in old map:
map[90:Dog 91:Cat 92:Cow 93:Bird 94:Rabbit 96:Parrot 98:Pig]

Golang program that uses structs as map keys

Slices in Golang

Comparing Maps in Golang

30, Aug 19

How to convert a slice of bytes in uppercase in Golang?

Golang program that uses fallthrough keyword

18, Apr 20

math.Lgamma() Function in Golang with Examples

13, Apr 20

math.Float64bits() Function in Golang With Examples

How to check equality of slices of bytes in Golang?

21, Aug 19

atomic.AddInt64() Function in Golang With Examples

10, Mar 20

atomic.StoreInt64() Function in Golang With Examples

15, Mar 20

reflect.FieldByIndex() Function in Golang with Examples

strings.Contains Function in Golang with Examples

bits.Sub() Function in Golang with Examples

How to convert a slice of bytes in lowercase in Golang?

io.PipeWriter.CloseWithError() Function in Golang with Examples

Import in GoLang

20, Jul 20

time.Round() Function in Golang With Examples

06, Apr 20

How to add a method to struct type in Golang?

11, Jun 20

Converting a string variable into Boolean, Integer or Float type in Golang

Check if the given slice is sorted in Golang

26, Aug 19

How to compare times in Golang?

reflect.AppendSlice() Function in Golang with Examples

How to Deploy a Golang WebApp to Heroku?

28, Mar 22

reflect.ChanOf() Function in Golang with Examples

flag.Bool() Function in Golang With Examples

time.Sleep() Function in Golang With Examples

12, Mar 20

ankita_saini

@ankita_saini

+ surinderdawra388

+ Golang
+ Go Language

+ strings.Replace() Function in Golang With Examples
+ fmt.Sprintf() Function in Golang With Examples
+ How to Split a String in Golang?
+ Interfaces in Golang
+ How to convert a string in lower case in Golang?

+ Different Ways to Find the Type of Variable in Golang
+ How to compare times in Golang?
+ How to Trim a String in Golang?
+ How to Parse JSON in Golang?
+ Inheritance in GoLang


=======asdf55======== Q\Go K8s\$\d890d08435eb6d56181ae23b26ef4f2e.txt
https://aws.amazon.com/kubernetes/
TITLE: Kubernetes on AWS | Amazon Web Services

Kubernetes is open-source software that allows you to deploy and manage containerized applications at scale. Kubernetes manages clusters of Amazon Elastic Compute Cloud (EC2) compute instances and runs containers on those instances with processes for deployment, maintenance, and scaling. Using Kubernetes, you can run any type of containerized applications using the same toolset on-premises and in the cloud.

AWS makes it easy to run Kubernetes in the cloud with scalable and highly available virtual machine infrastructure, community-backed service integrations, and Amazon Elastic Kubernetes Service (EKS), a certified conformant, managed Kubernetes service.

HOW KUBERNETES WORKS

Kubernetes works by managing a cluster of compute instances and scheduling containers to run on the cluster based on the available compute resources and the resource requirements of each container. Containers are run in logical groupings called pods and you can run and scale one or many containers together as a pod.

Kubernetes control plane software decides when and where to run your pods, manages traffic routing, and scales your pods based on utilization or other metrics that you define. Kubernetes automatically starts pods on your cluster based on their resource requirements and automatically restarts pods if they or the instances they are running on fail. Each pod is given an IP address and a single DNS name, which Kubernetes uses to connect your services with each other and external traffic.

WHY USE KUBERNETES

Because Kubernetes is an open-source project, you can use it to run your containerized applications anywhere without needing to change your operational tooling. Kubernetes is maintained by a large community of volunteers and is always improving. Additionally, many other open-source projects and vendors build and maintain Kubernetes-compatible software that you can use to improve and extend your application architecture.

RUN APPLICATIONS AT SCALE

Kubernetes lets you define complex containerized applications and run them at scale across a cluster of servers.

SEAMLESSLY MOVE APPLICATIONS

Using Kubernetes, containerized applications can be seamlessly moved from local development machines to production deployments on the cloud using the same operational tooling.

RUN ANYWHERE

Run highly available and scalable Kubernetes clusters on AWS while maintaining full compatibility with your Kubernetes deployments running on-premises.

ADD NEW FUNCTIONALITY

As an open-source project, adding new functionality to Kubernetes is easy. A large community of developers and companies build extensions, integrations, and plugins that help Kubernetes users do more.

RUN KUBERNETES ON AWS

AWS makes it easy to run Kubernetes. You can choose to manage Kubernetes infrastructure yourself with Amazon EC2 or get an automatically provisioned, managed Kubernetes control plane with Amazon EKS. Either way, you get powerful, community-backed integrations to AWS services like Amazon Virtual Private Cloud (VPC), AWS Identity and Access Management (IAM), and service discovery as well as the security, scalability, and high-availability of AWS.

{IF YOU WANT TO...
} {CONSIDER USING} 

{Fully manage your Kubernetes deployment. Provision and run Kubernetes on your choice of powerful instance types.} {Amazon EC2} {} 

{Run Kubernetes without needing to provision or manage master instances and etcd.
} {Amazon EKS} {} 

{Store, encrypt, and manage container images for fast deployment.
} {Amazon ECR
} {} 

AWS Community Kubernetes Collaborations

AWS actively works with the Kubernetes community, including making contributions to the Kubernetes code base, to help Kuberentes users take advantage of AWS services and features.

CNI Plugin

Pod networking in Kubernetes using Elastic Network Interfaces on AWS.

CDK8s

Cdk8s lets you define Kubernetes applications using code.

External DNS

Configure Route 53 Service Discovery for Kubernetes Ingresses and Services.

Karpenter

Just-in-time nodes for any Kubernetes cluster.

SIG AWS

Community-led special interest group focused on AWS integrations to the Kubernetes API.

TorchServe

A PyTorch model serving framework to deploy trained ML models.

KUBERNETES FREQUENTLY ASKED QUESTIONS

Q: What is a Kubernetes cluster? 

Q: What is a Kubernetes cluster?

A Kubernetes cluster is a logical grouping of EC2 compute instances that run your containers. A cluster consists of the control plane (the instances that control how, when, and where your containers run), and the data plane (the instances where your containers run). You must define a cluster before you can run containers or services with Kubernetes.

Q: What is a Kubernetes node? 

Q: What is a Kubernetes node?

A Kubernetes node is a single compute instance (virtual machine) that is part of a Kubernetes cluster. There are two types of instances: masters and workers. Masters host the Kubernetes API server and control how, when, and where your containers run. Workers are the compute instances where your containers actually run and process data.

Q: What is a Kubernetes pod? 

Q: What is a Kubernetes pod?

A Kubernetes pod is the way that Kubernetes runs containers on a compute instance and includes containers and specifications for how they should run, networking, and storage. A pod can be a single container or multiple containers that always run together. If you usually run single containers, you can think of a pod as a running container.

Q: What is etcd? 

Q: What is etcd?

etcd is a distributed key value store that lets you store and share data across a distributed cluster of machines. Kubernetes uses etcd to store data about your cluster and share it across the Kubernetes control plane.

Q: Does AWS support Kubernetes? 

Q: Does AWS support Kubernetes?

AWS makes it easy to run Kubernetes. In fact, AWS has the most customers running Kubernetes in the cloud, with the majority of Kubernetes deployments running on AWS according to the Cloud Native Computing Federation (CNCF). AWS collaborates with and actively contributes to the Kubernetes community in order to make it easy for customers to run Kubernetes on AWS.

AWS offers Amazon Elastic Kubernetes Service (EKS), a managed service that makes it easy for you to use Kubernetes on AWS without needing to install and operate the Kubernetes control plane.

Q: How do I use Kubernetes on AWS? 

Q: How do I use Kubernetes on AWS?

There are two main ways to use Kubernetes on AWS: run it yourself on Amazon EC2 virtual machine instances, or use the Amazon EKS service. You can learn more about running Kubernetes yourself on EC2 in our Github workshop. You can learn more about using Amazon EKS on the product page.

Learn more about Kubernetes on AWS

Visit the Amazon Elastic Kubernetes Service page 

Learn more about containers on AWS

Visit the containers page 

Ready to build? 

Create an AWS account 

Have more questions? 

Contact us 

Sign In to the Console 

Learn About AWS

+ What Is AWS? 
+ What Is Cloud Computing? 
+ AWS Inclusion, Diversity & Equity 
+ What Is DevOps? 
+ What Is a Container? 
+ What Is a Data Lake? 
+ AWS Cloud Security 
+ What's New 
+ Blogs 
+ Press Releases 

Resources for AWS

+ Getting Started 
+ Training and Certification 
+ AWS Solutions Portfolio 
+ Architecture Center 
+ Product and Technical FAQs 
+ Analyst Reports 
+ AWS Partners 

Developers on AWS

+ Developer Center 
+ SDKs & Tools 
+ .NET on AWS 
+ Python on AWS 
+ Java on AWS 
+ PHP on AWS 
+ JavaScript on AWS 

Help

+ Contact Us 
+ File a Support Ticket 
+ Knowledge Center 
+ AWS re:Post 
+ AWS Support Overview 
+ Legal 
+ AWS Careers 

Create an AWS Account 

Amazon is an Equal Opportunity Employer: Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age. 

+ Language 
+ ^^^^ 
+ Bahasa Indonesia 
+ Deutsch 
+ English 
+ Espanol 
+ Francais 
+ Italiano 
+ Portugues 
+ Ti^ng Vi^t 
+ Turkce 
+ ^^^^^^^ 
+ ^^^ 
+ ^^^ 
+ ^^^ 
+ ^^ (^^) 
+ ^^ (^^) 

+ Privacy 
+ | 
+ Site Terms 
+ | 
+ Cookie Preferences 
+ | 
+ (c) 2022, Amazon Web Services, Inc. or its affiliates. All rights reserved. 

Ending Support for Internet Explorer

Got it 

AWS support for Internet Explorer ends on 07/31/2022. Supported browsers are Chrome, Firefox, Edge, and Safari. Learn more " 


=======asdf56======== Q\Go K8s\$\db484cccdfe516ae90e2c077fdb99231.txt
https://www.tecmint.com/install-go-in-linux/
TITLE: How to Install GoLang (Go Programming Language) in Linux

Go (also referred to as GoLang) is an open-source and lower-level programming language designed to enable users to easily write simple, reliable, and highly efficient computer programs.

Developed in 2007 at Google by a team of programmers - Robert Griesemer, Rob Pike, and Ken Thompson, it is a compiled, statically typed language same to other system languages such as C, C++, Java, and many more.

GoLang is highly productive, and readable with support for networking and multiprocessing and it is scalable in extensive systems as well. Below is a list of a few well known open source projects developed using GoLang:

+ Docker 
+ Kubernetes 
+ Lime 
+ InfluxDB 
+ Gogs (Go Git Service) among others. 

Install GoLang in Linux Systems

1. Go to https://golang.org/dl/ and download the latest version (i.e 1.15.2) of GoLang in an archive file using wget command as follows:

$ wget -c https://golang.org/dl/go1.15.2.linux-amd64.tar.gz [64-bit]
$ wget -c https://golang.org/dl/go1.15.2.linux-386.tar.gz [32-bit]

2. Next, check the integrity of the tarball by verifying the SHA256 checksum of the archive file using the shasum command as below, where the flag -a is used to specify the algorithm to be used:

$ shasum -a 256 go1.7.3.linux-amd64.tar.gz

b49fda1ca29a1946d6bb2a5a6982cf07ccd2aba849289508ee0f9918f6bb4552 go1.15.2.linux-amd64.tar.gz

Important: To show that the contents of the downloaded archive file are the exact copy provided on the GoLang website, the 256-bit hash value generated from the command above as seen in the output should be the same as that provided along with the download link.

If that is the case, proceed to the next step, otherwise, download a new tarball and run the check again.

3. Then extract the tar archive files into /usr/local directory using the command below.

$ sudo tar -C /usr/local -xvzf go1.15.2.linux-amd64.tar.gz

Where, -C specifies the destination directory..

Configuring GoLang Environment in Linux

4. First, set up your Go workspace by creating a directory ~/go_projects which is the root of your workspace. The workspace is made of three directories namely:

+ bin which will contain Go executable binaries. 
+ src which will store your source files and 
+ pkg which will store package objects. 

Therefore create the above directory tree as follows:

$ mkdir -p ~/go_projects/{bin,src,pkg}
$ cd ~/go_projects
$ ls

5. Now it's time to execute Go like the rest of Linux programs without specifying its absolute path, its installation directory must be stored as one of the values of $PATH environment variable.

Now, add /usr/local/go/bin to the PATH environment variable by inserting the line below in your /etc/profile file for a system-wide installation or $HOME/.profile or $HOME./bash_profile for user-specific installation:

Using your preferred editor, open the appropriate user profile file as per your distribution and add the line below, save the file, and exit:

export PATH=$PATH:/usr/local/go/bin

6. Then, set the values of GOPATH and GOBIN Go environment variables in your user profile file (~/.profile or ~/bash_profile) to point to your workspace directory.

export GOPATH="$HOME/go_projects"
export GOBIN="$GOPATH/bin"

Note: If you installed GoLang in a custom directory other than the default (/usr/local/), you must specify that directory as the value of the GOROOT variable.

For instance, if you have installed GoLang in the home directory, add the lines below to your $HOME/.profile or $HOME/.bash_profile file.

export GOROOT=$HOME/go
export PATH=$PATH:$GOROOT/bin

7. The final step under this section is to effect the changes made to the user profile in the current bash session like so:

$ source ~/.bash_profile
OR
$ source ~/.profile

Verify GoLang Installation

8. Run the commands below to view your Go version and environment:

$ go version
$ go env

Check GoLang Version and Environment 

Type the following command to display usage information for the Go tool, which manages Go source code:

$ go help

9. To test your if your Go installation is working correctly, write a small Go hello world program, save the file in ~/go_projects/src/hello/ directory. All your GoLang source files must end with the .go extension.

Begin by creating the hello project directory under ~/go_projects/src/:

$ mkdir -p ~/go_projects/src/hello

Then use your favorite editor to create the hello.go file:

$ vi ~/go_projects/src/hello/hello.go

Add the lines below in the file, save it, and exit:

package main 

func main() {
fmt.Printf("Hello, you have successfully installed GoLang in Linux\n")
}

10. Now, compile the program above as using go install and run it:

$ go install $GOPATH/src/hello/hello.go
$ $GOBIN/hello

First GoLang Program 

If you see the output showing you the message in the program file, then your installation is working correctly.

11. To run your Go binary executables like other Linux commands, add $GOBIN to your $PATH environment variable.

Reference Links: https://golang.org/

That's it! You can now go on and learn GoLang for writing simple, reliable, and highly efficient computer programs. Are you already make use of GoLang?

Share your experience with us and many other Linux users out there via the comment section below or imaginably, you can ask a question in relation to this guide or GoLang.

Tags Go Langage Post navigation 

spf13-vim - The Ultimate Distribution for Vim Editor

Deal: Master All-Level Java Programming Course for Less Than $50

If you liked this article, then do subscribe to email alerts for Linux tutorials. If you have any questions or doubts? do ask for help in the comments section.

If You Appreciate What We Do Here On TecMint, You Should Consider:

TecMint is the fastest growing and most trusted community site for any kind of Linux Articles, Guides and Books on the web. Millions of people visit TecMint! to search or browse the thousands of published articles available FREELY to all.

If you like what you are reading, please consider buying us a coffee ( or 2 ) as a token of appreciation.

We are thankful for your never ending support.

Related Posts

The Beginner's Guide to IPTables (Linux Firewall) Commands

7 Ways to Speed Up Firefox Browser in Linux Desktop

How to Install Java 17 on RHEL-based Linux Distributions

How to Install Firefox 93 in Linux Desktop

Install Guacamole for Remote Linux/Windows Access in Ubuntu

How to Access Remote Desktop from Browser Using TightVNC

8 thoughts on "How to Install GoLang (Go Programming Language) in Linux" 

Rolln 

September 12, 2020 at 6:58 pm 

If you export PATH=$PATH:$GOBIN as well then you could just call hello instead of $GOBIN/hello.

Just a suggestion but maybe that's not the proper way to do things... newer Linux user here!

Brentl 

January 5, 2021 at 10:02 am 

Thank you for the tip, I just did this myself. 

I would like to add, to those noobs such as myself. If you do this tip after all the other steps in the article and it is saying no command when you run "hello" make sure you do the source command on the file where you added the path env variables like 

$ source ~/.profile

If you don't do this, it won't work. (took me a couple of min of it not working to remember about the source command ran earlier.)

GoUpdate 

September 11, 2020 at 1:15 am 

It would be nice to update this article to a more recent version of Go.

Ravi Saive 

September 11, 2020 at 10:48 am 

@GoUpdate,

We've updated the article to the most recent version of GoLang...

gws 

September 14, 2019 at 11:20 pm 

Under part 3:
"Where, -C specifies the destination directory.."

Destination directory of what exactly?

Aaron Kili 

September 18, 2019 at 1:08 pm 

@GWS

The destination directory is /usr/local as specified in the command.

The Linux Evangelist 

November 25, 2016 at 1:45 pm 

There's a typo in your panel image itself. It's "Google's first programming language" and not "first Google's programming language"

Aaron Kili 

November 28, 2016 at 3:20 pm 

Thanks a lot for mentioning that, we shall correct it as soon as possible.

Got something to say? Join the discussion. Cancel reply

Have a question or suggestion? Please leave a comment to start the discussion. Please keep in mind that all comments are moderated and your email address will NOT be published. 

Comment

Name Email 

Save my name, email, and website in this browser for the next time I comment.

Tecmint: Linux Howtos, Tutorials & Guides (c) 2022. All Rights Reserved. 

The material in this site cannot be republished either online or offline, without our permission.


=======asdf57======== Q\Go K8s\$\17d7a501230ade5e6834e75109bb7297.txt
https://cloud.google.com/learn/what-is-kubernetes
TITLE: What Is Kubernetes | Google Cloud

+ Save money with our transparent approach to pricing 
+ Google Cloud's pay-as-you-go pricing offers automatic savings based on monthly usage and discounted rates for prepaid resources. Contact us today to get a quote. 
+ 

Request a quote 

+ Google Cloud 
+ 

Pricing overview 

Pay only for what you use with no lock-in. 

Price list 

Get pricing details for individual products. 

Pricing calculator 

Calculate your cloud savings. 

Google Cloud Free Program 

$300 in free credits and 20+ free products. 

+ Related Products 
+ 

Google Workspace 

Google Maps Platform 

Chrome Enterprise 

Apigee 

Firebase 

Getting started 

+ Get started with Google Cloud 
+ Start building right away on our secure, intelligent platform. New customers get $300 in free credits to use toward Google Cloud products and services. 
+ 

Get started for free 

+ Self-service Resources 
+ 

Get started 

Get started with Google Cloud. 

Developer Center 

Stay in the know and become an Innovator. 

Google Cloud certification 

Prepare and register for certifications. 

+ Expert help and training 
+ 

Consulting 

Partner with our experts on cloud projects. 

Technical Account Management 

Get ongoing guidance from Google. 

Training 

Enroll in on-demand or classroom training. 

+ Partners and third-party tools 
+ 

Google Cloud partners 

Explore benefits of working with a partner. 

Become a partner 

Join the Partner Advantage program. 

Google Cloud Marketplace 

Deploy ready-to-go solutions in a few clicks. 

Docs Support 

Docs Support Language English Deutsch Espanol Espanol - America Latina Francais Italiano Portugues - Brasil ^^ - ^^ ^^ - ^^ ^^^ ^^^ Sign in 

Contact Us Get started for free 

+ Why Google 

+ Solutions 

+ Products 

+ Pricing 

+ Getting started 

+ Docs 
+ Support 
+ Console 
+ Contact Us 
+ Get started for free 

+ Discover why leading businesses choose Google Cloud 
+ Learn more 
+ Key benefits 
+ Overview 
+ Multicloud 
+ Trust and security 
+ Global infrastructure 
+ Data cloud 
+ Open cloud 
+ Sustainability 
+ Productivity and collaboration 
+ Resources 
+ Events 
+ Blog 
+ Customer stories 
+ Analyst reports 

+ Industry Solutions 
+ Retail 
+ Consumer Packaged Goods 
+ Financial Services 
+ Healthcare and Life Sciences 
+ Media and Entertainment 
+ Telecommunications 
+ Gaming 
+ Manufacturing 
+ Supply Chain and Logistics 
+ Government 
+ Education 
+ See all industry solutions 
+ See all solutions 
+ Application Modernization 
+ Hybrid and Multi-cloud Application Platform 
+ API Management 
+ Serverless Solutions 
+ DevOps 
+ Continuous Delivery (CD) 
+ Continuous Integration (CI) 
+ Mainframe Modernization 
+ CAMP 
+ Hosting 
+ Site Reliability Engineering (SRE) 
+ Artificial Intelligence 
+ Contact Center AI 
+ Document AI 
+ Intelligent products 
+ Product Discovery 
+ APIs and Applications 
+ New Business Channels Using APIs 
+ Unlocking Legacy Applications Using APIs 
+ Open Banking APIx 
+ Databases 
+ Database Migration 
+ Database Modernization 
+ Google Cloud Databases 
+ Migrate Oracle workloads to Google Cloud 
+ Open Source Databases 
+ SQL Server on Google Cloud 
+ Data Cloud 
+ Databases Solutions 
+ Smart Analytics Solutions 
+ AI Solutions 
+ Data Cloud for ISVs 
+ Data Cloud Alliance 
+ Digital Transformation 
+ Digital Innovation 
+ Operational Efficiency 
+ COVID-19 Solutions 
+ COVID-19 Solutions for the Healthcare Industry 
+ Infrastructure Modernization 
+ Application Migration 
+ SAP on Google Cloud 
+ High Performance Computing 
+ Windows on Google Cloud 
+ Data Center Migration 
+ Active Assist 
+ Virtual Desktops 
+ Rapid Assessment & Migration Program (RAMP) 
+ Backup and Disaster Recovery 
+ Productivity and Collaboration 
+ Google Workspace 
+ Google Workspace Essentials 
+ Cloud Identity 
+ Chrome Enterprise 
+ Cloud Search 
+ Security 
+ Security Analytics and Operations 
+ Web App and API Protection 
+ Security and Resilience Framework 
+ Risk and compliance as code (RCaC) 
+ Software Supply Chain Security 
+ Smart Analytics 
+ Data Warehouse Modernization 
+ Data Lake Modernization 
+ Spark on Google Cloud 
+ Stream Analytics 
+ Business Intelligence 
+ Data Science 
+ Marketing Analytics 
+ Geospatial Analytics and AI 
+ Datasets 
+ Startups and SMB 
+ Startup Solutions 
+ Startup Program 
+ Small and Medium Business 
+ Software as a Service 

+ Featured Products 
+ Compute Engine 
+ Cloud Storage 
+ Cloud SDK 
+ Cloud SQL 
+ Google Kubernetes Engine 
+ BigQuery 
+ Cloud CDN 
+ Dataflow 
+ Operations 
+ Cloud Run 
+ Anthos 
+ See all products (100+) 
+ AI and Machine Learning 
+ Vertex AI 
+ Vertex AI Workbench 
+ AI Infrastructure 
+ AutoML 
+ Natural Language AI 
+ Speech-to-Text 
+ Text-to-Speech 
+ Translation AI 
+ Video AI 
+ Vision AI 
+ Dialogflow 
+ See all AI and machine learning products 
+ API Management 
+ Apigee API Management 
+ Apigee Integration 
+ Cloud Healthcare API 
+ AppSheet 
+ API Gateway 
+ Compute 
+ Compute Engine 
+ App Engine 
+ Cloud GPUs 
+ Migrate for Compute Engine 
+ Spot VMs 
+ Shielded VMs 
+ Sole-Tenant Nodes 
+ Bare Metal 
+ Recommender 
+ VMware Engine 
+ Cloud Run 
+ See all compute products 
+ Containers 
+ Google Kubernetes Engine 
+ Container Registry 
+ Container Security 
+ Cloud Build 
+ Deep Learning Containers 
+ Kubernetes Applications 
+ Artifact Registry 
+ Knative 
+ Cloud Run 
+ Cloud Code 
+ Data Analytics 
+ BigQuery 
+ Looker 
+ Dataflow 
+ Pub/Sub 
+ Dataproc 
+ Cloud Data Fusion 
+ Cloud Composer 
+ Dataprep 
+ Dataplex 
+ Data Catalog 
+ Analytics Hub 
+ See all data analytics products 
+ Databases 
+ AlloyDB for PostgreSQL 
+ Cloud Bigtable 
+ Firestore 
+ Memorystore 
+ Cloud Spanner 
+ Cloud SQL 
+ Database Migration Service 
+ Bare Metal Solution for Oracle 
+ Firebase Realtime Database 
+ Datastream 
+ Developer Tools 
+ Artifact Registry 
+ Cloud Build 
+ Cloud Code 
+ Cloud Deployment Manager 
+ gcloud CLI 
+ Cloud Scheduler 
+ Cloud Source Repositories 
+ Cloud Tasks 
+ Google Cloud Deploy 
+ Tekton 
+ Tools for PowerShell 
+ See all developer tools 
+ Healthcare and Life Sciences 
+ Apigee Healthcare APIx 
+ Cloud Healthcare API 
+ Cloud Life Sciences 
+ Healthcare Natural Language AI 
+ Hybrid and Multicloud 
+ Anthos 
+ Looker 
+ Cloud Run for Anthos 
+ Google Cloud Marketplace for Anthos 
+ Migrate for Anthos 
+ Operations 
+ Cloud Build 
+ Traffic Director 
+ Apigee API Management 
+ Google Distributed Cloud 
+ Internet of Things 
+ Cloud IoT Core 
+ Edge TPU 
+ Management Tools 
+ Anthos Config Management 
+ Carbon Footprint 
+ Cloud APIs 
+ Cloud console 
+ Cloud Mobile App 
+ Cloud Shell 
+ Config Connector 
+ Cost Management 
+ Intelligent Management 
+ Private Catalog 
+ Terraform on Google Cloud 
+ Media and Gaming 
+ Game Servers 
+ OpenCue 
+ Transcoder API 
+ Migration 
+ Application Migration 
+ BigQuery Data Transfer Service 
+ Cloud Foundation Toolkit 
+ Database Migration Service 
+ Migrate for Anthos 
+ Migrate for Compute Engine 
+ Rapid Assessment & Migration Program (RAMP) 
+ Transfer Appliance 
+ Storage Transfer Service 
+ VMware Engine 
+ Networking 
+ Cloud Armor 
+ Cloud CDN 
+ Cloud DNS 
+ Cloud Load Balancing 
+ Cloud NAT 
+ Hybrid Connectivity 
+ Network Connectivity Center 
+ Network Intelligence Center 
+ Network Service Tiers 
+ Traffic Director 
+ See all networking products 
+ Operations 
+ Cloud Logging 
+ Cloud Monitoring 
+ Error Reporting 
+ Kubernetes Engine Monitoring 
+ Cloud Trace 
+ Cloud Profiler 
+ Cloud Debugger 
+ Intelligent Operations 
+ Security and Identity 
+ Cloud IAM 
+ Assured Workloads 
+ Cloud Key Management 
+ Confidential Computing 
+ Security Command Center 
+ Cloud Data Loss Prevention 
+ Managed Service for Microsoft Active Directory 
+ Access Transparency 
+ Titan Security Key 
+ Secret Manager 
+ BeyondCorp Enterprise 
+ See all security and identity products 
+ Serverless Computing 
+ Cloud Run 
+ Cloud Functions 
+ App Engine 
+ Workflows 
+ Storage 
+ All Storage Products 
+ Cloud Storage 
+ Filestore 
+ Persistent Disk 
+ Cloud Storage for Firebase 
+ Local SSD 
+ Storage Transfer Service 
+ Google Workspace Essentials 

+ Save money with our transparent approach to pricing 
+ Request a quote 
+ Google Cloud 
+ Pricing overview 
+ Price list 
+ Pricing calculator 
+ Google Cloud Free Program 
+ Related Products 
+ Google Workspace 
+ Google Maps Platform 
+ Chrome Enterprise 
+ Apigee 
+ Looker 
+ Firebase 

+ Get started with Google Cloud 
+ Get started for free 
+ Self-service Resources 
+ Get started 
+ Developer Center 
+ Google Cloud certification 
+ Expert help and training 
+ Consulting 
+ Technical Account Management 
+ Training 
+ Partners and third-party tools 
+ Google Cloud partners 
+ Become a partner 
+ Google Cloud Marketplace 

+ Home 

Jump to 

What is Kubernetes? 

+ Topics 
+ 
+ What is Kubernetes? 

What is Kubernetes? 

With the widespread adoption of containers among organizations, Kubernetes, the container-centric management software, has become the de facto standard to deploy and operate containerized applications. Google Cloud is the birthplace of Kubernetes-originally developed at Google and released as open source in 2014. Kubernetes builds on 15 years of running Google's containerized workloads and the valuable contributions from the open source community. Inspired by Google's internal cluster management system, Borg, Kubernetes makes everything associated with deploying and managing your application easier. Providing automated container orchestration, Kubernetes improves your reliability and reduces the time and resources attributed to daily operations.

Learn more about GKE, Google Cloud's managed Kubernetes. 

Kubernetes defined

Kubernetes (sometimes shortened to K8s with the 8 standing for the number of letters between the "K" and the "s") is an open source system to deploy, scale, and manage containerized applications anywhere.

Kubernetes automates operational tasks of container management and includes built-in commands for deploying applications, rolling out changes to your applications, scaling your applications up and down to fit changing needs, monitoring your applications, and more-making it easier to manage applications. 

What are the benefits of Kubernetes?

Automated operations

Kubernetes has built-in commands to handle a lot of the heavy lifting that goes into application management, allowing you to automate day-to-day operations. You can make sure applications are always running the way you intended them to run.

Infrastructure abstraction

When you install Kubernetes, it handles the compute, networking, and storage on behalf of your workloads. This allows developers to focus on applications and not worry about the underlying environment.

Service health monitoring

Kubernetes continuously runs health checks against your services, restarting containers that fail, or have stalled, and only making available services to users when it has confirmed they are running.

Kubernetes vs. Docker

Often misunderstood as a choice between one or the other, Kubernetes and Docker are different yet complementary technologies for running containerized applications. 

Docker lets you put everything you need to run your application into a box that can be stored and opened when and where it is required. Once you start boxing up your applications, you need a way to manage them; and that's what Kubernetes does.

Kubernetes is a Greek word meaning 'captain' in English. Like the captain is responsible for the safe journey of the ship in the seas, Kubernetes is responsible for carrying and delivering those boxes safely to locations where they can be used.

+ Kubernetes can be used with or without Docker 
+ Docker is not an alternative to Kubernetes, so it's less of a "Kubernetes vs. Docker" question. It's about using Kubernetes with Docker to containerize your applications and run them at scale 
+ The difference between Docker and Kubernetes relates to the role each play in containerizing and running your applications 
+ Docker is an open industry standard for packaging and distributing applications in containers 
+ Kubernetes uses Docker to deploy, manage, and scale containerized applications 

What is Kubernetes used for?

Kubernetes is used to create applications that are easy to manage and deploy anywhere. When available as a managed service, Kubernetes offers you a range of solutions to meet your needs. Here are some common use cases.

Increasing development velocity

Kubernetes helps you to build cloud-native microservices-based apps. It also supports containerization of existing apps, thereby becoming the foundation of application modernization and letting you develop apps faster.

Deploying applications anywhere

Kubernetes is built to be used anywhere, allowing you to run your applications across on-site deployments and public clouds; as well as hybrid deployments in between. So you can run your applications where you need them. 

Running efficient services

Kubernetes can automatically adjust the size of a cluster required to run a service. This enables you to automatically scale your applications, up and down, based on the demand and run them efficiently.

Related products and services

Created by the same developers that built Kubernetes, Google Kubernetes Engine (GKE) is an easy to use cloud based Kubernetes service for running containerized applications. GKE can help you implement a successful Kubernetes strategy for your applications in the cloud. With Anthos, Google offers a consistent Kubernetes experience for your applications across on-premises and multiple clouds. Using Anthos, you get a reliable, efficient, and trusted way to run Kubernetes clusters, anywhere.

Google Kubernetes Engine

Google Cloud's highly reliable and automated Kubernetes service that lets you get started easily.

Solution

Application Modernization

Google Cloud's application modernization platform lets you develop and run applications anywhere, using cloud-native technologies like Kubernetes.

Take the next step 

Start building on Google Cloud with $300 in free credits and 20+ always free products. 

Get started for free 

Take the next step 

Start your next project, explore interactive tutorials, and manage your account. 

Go to console 

Need help getting started? 

Contact sales 
+ 

Work with a trusted partner 

Find a partner 
+ 

Continue browsing 

See all products 

Need help getting started? 

Contact sales 
+ 

Work with a trusted partner 

Find a partner 
+ 

Get tips & best practices 

See tutorials 

[{ "type": "thumb-down", "id": "hardToUnderstand", "label":"Hard to understand" },{ "type": "thumb-down", "id": "incorrectInformationOrSampleCode", "label":"Incorrect information or sample code" },{ "type": "thumb-down", "id": "missingTheInformationSamplesINeed", "label":"Missing the information/samples I need" },{ "type": "thumb-down", "id": "otherDown", "label":"Other" }] [{ "type": "thumb-up", "id": "easyToUnderstand", "label":"Easy to understand" },{ "type": "thumb-up", "id": "solvedMyProblem", "label":"Solved my problem" },{ "type": "thumb-up", "id": "otherUp", "label":"Other" }] 

Why Google

+ Choosing Google Cloud 
+ Trust and security 
+ Open cloud 
+ Multicloud 
+ Global infrastructure 
+ Customers and case studies 
+ Analyst reports 
+ Whitepapers 
+ Blog 

Products and pricing

+ Google Cloud pricing 
+ Google Workspace pricing 
+ See all products 

Solutions

+ Infrastructure modernization 
+ Databases 
+ Application modernization 
+ Smart analytics 
+ Artificial Intelligence 
+ Security 
+ Productivity & work transformation 
+ Industry solutions 
+ DevOps solutions 
+ Small business solutions 
+ See all solutions 

+ Google Cloud documentation 
+ Google Cloud quickstarts 
+ Google Cloud Marketplace 
+ Learn about cloud computing 
+ Support 
+ Code samples 
+ Cloud Architecture Center 
+ Training 
+ Certifications 
+ Google Developers 
+ Google Cloud for Startups 
+ System status 
+ Release Notes 

Engage

+ Contact sales 
+ Find a Partner 
+ Become a Partner 
+ Events 
+ Podcasts 
+ Developer Center 
+ Press Corner 
+ Google Cloud on YouTube 
+ Google Cloud Tech on YouTube 
+ Follow on Twitter 
+ Join User Research 
+ We're hiring. Join Google Cloud! 
+ Google Cloud Community 


=======asdf58======== Q\Go K8s\$\f12fac4c4829822b1143aa3223a6ff6b.txt
https://www.tutorialspoint.com/kubernetes/kubernetes_architecture.htm
TITLE: Kubernetes - Architecture

In this chapter, we will discuss the basic architecture of Kubernetes.

Kubernetes - Cluster Architecture

As seen in the following diagram, Kubernetes follows client-server architecture. Wherein, we have master installed on one machine and the node on separate Linux machines.

The key components of master and node are defined in the following section.

Kubernetes - Master Machine Components

Following are the components of Kubernetes Master Machine.

etcd

It stores the configuration information which can be used by each of the nodes in the cluster. It is a high availability key value store that can be distributed among multiple nodes. It is accessible only by Kubernetes API server as it may have some sensitive information. It is a distributed key value Store which is accessible to all.

API Server

Kubernetes is an API server which provides all the operation on cluster using the API. API server implements an interface, which means different tools and libraries can readily communicate with it. Kubeconfig is a package along with the server side tools that can be used for communication. It exposes Kubernetes API.

Controller Manager

This component is responsible for most of the collectors that regulates the state of cluster and performs a task. In general, it can be considered as a daemon which runs in nonterminating loop and is responsible for collecting and sending information to API server. It works toward getting the shared state of cluster and then make changes to bring the current status of the server to the desired state. The key controllers are replication controller, endpoint controller, namespace controller, and service account controller. The controller manager runs different kind of controllers to handle nodes, endpoints, etc.

Scheduler

This is one of the key components of Kubernetes master. It is a service in master responsible for distributing the workload. It is responsible for tracking utilization of working load on cluster nodes and then placing the workload on which resources are available and accept the workload. In other words, this is the mechanism responsible for allocating pods to available nodes. The scheduler is responsible for workload utilization and allocating pod to new node.

Kubernetes - Node Components

Following are the key components of Node server which are necessary to communicate with Kubernetes master.

Docker

The first requirement of each node is Docker which helps in running the encapsulated application containers in a relatively isolated but lightweight operating environment.

Kubelet Service

This is a small service in each node responsible for relaying information to and from control plane service. It interacts with etcd store to read configuration details and wright values. This communicates with the master component to receive commands and work. The kubelet process then assumes responsibility for maintaining the state of work and the node server. It manages network rules, port forwarding, etc.

Kubernetes Proxy Service

This is a proxy service which runs on each node and helps in making services available to the external host. It helps in forwarding the request to correct containers and is capable of performing primitive load balancing. It makes sure that the networking environment is predictable and accessible and at the same time it is isolated as well. It manages pods on node, volumes, secrets, creating new containers' health checkup, etc.

Kubernetes - Master and Node Structure

The following illustrations show the structure of Kubernetes Master and Node.

Previous Page Print Page Next Page 

Advertisements

+ About us 
+ Refund Policy 
+ Terms of use 
+ Privacy Policy 
+ FAQ's 
+ Contact 

(c) Copyright 2022. All Rights Reserved.

We make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy. Agree Learn more


=======asdf59======== Q\Go K8s\$\86e49c4e082345fc78c768173480c921.txt
https://www.geeksforgeeks.org/pointers-in-golang/

Pointers in Go programming language or Golang is a variable that is used to store the memory address of another variable. Pointers in Golang is also termed as the special variables. The variables are used to store some data at a particular memory address in the system. The memory address is always found in hexadecimal format(starting with 0x like 0xFFAAF etc.).

What is the need for the pointers? 

To understand this need, first, we have to understand the concept of variables. Variables are the names given to a memory location where the actual data is stored. To access the stored data we need the address of that particular memory location. To remember all the memory addresses(Hexadecimal Format) manually is an overhead that's why we use variables to store data and variables can be accessed just by using their name. 
Golang also allows saving a hexadecimal number into a variable using the literal expression i.e. number starting from 0x is a hexadecimal number.

Example: In the below program, we are storing the hexadecimal number into a variable. But you can see that the type of values is int and saved as the decimal or you can say the decimal value of type int is storing. But the main point to explain this example is that we are storing a hexadecimal value(consider it a memory address) but it is not a pointer as it is not pointing to any other memory location of another variable. It is just a user-defined variable. So this arises the need for pointers.

// Golang program to demonstrate the variables

// storing the hexadecimal values

// storing the hexadecimal

// values in variables

x := 0xFF

y := 0x9C

// Displaying the values

fmt.Printf("Type of variable x is %T\n", x)

fmt.Printf("Value of x in hexadecimal is %X\n", x)

fmt.Printf("Value of x in decimal is %v\n", x)

fmt.Printf("Type of variable y is %T\n", y)

fmt.Printf("Value of y in hexadecimal is %X\n", y)

fmt.Printf("Value of y in decimal is %v\n", y) 

Type of variable x is int
Value of x in hexadecimal is FF
Value of x in decimal is 255
Type of variable y is int
Value of y in hexadecimal is 9C
Value of y in decimal is 156

A pointer is a special kind of variable that is not only used to store the memory addresses of other variables but also points where the memory is located and provides ways to find out the value stored at that memory location. It is generally termed as a Special kind of Variable because it is almost declared as a variable but with *(dereferencing operator).

Declaration and Initialization of Pointers

Before we start there are two important operators which we will use in pointers i.e. 

+ * Operator also termed as the dereferencing operator used to declare pointer variable and access the value stored in the address.
+ & operator termed as address operator used to returns the address of a variable or to access the address of a variable to a pointer.

Declaring a pointer:

var pointer_name *Data_Type

Example: Below is a pointer of type string which can store only the memory addresses of string variables.

var s *string

Initialization of Pointer: To do this you need to initialize a pointer with the memory address of another variable using the address operator as shown in the below example:

// normal variable declaration
var a = 45

// Initialization of pointer s with 
// memory address of variable a
var s *int = &a

// Golang program to demonstrate the declaration

// and initialization of pointers

// taking a normal variable

var x int = 5748

// declaration of pointer

var p *int

// initialization of pointer

p = &x

// displaying the result

fmt.Println("Value stored in x = ", x)

fmt.Println("Address of x = ", &x)

fmt.Println("Value stored in variable p = ", p)

Value stored in x = 5748
Address of x = 0x414020
Value stored in variable p = 0x414020

Important Points

1. The default value or zero-value of a pointer is always nil. Or you can say that an uninitialized pointer will always have a nil value.

// Golang program to demonstrate

// the nil value of the pointer

// taking a pointer

var s *int

// displaying the result

fmt.Println("s = ", s)

s = <nil>

2. Declaration and initialization of the pointers can be done into a single line.

Example: 

var s *int = &a

3. If you are specifying the data type along with the pointer declaration then the pointer will be able to handle the memory address of that specified data type variable. For example, if you taking a pointer of string type then the address of the variable that you will give to a pointer will be only of string data type variable, not any other type.

4. To overcome the above mention problem you can use the Type Inference concept of the var keyword. There is no need to specify the data type during the declaration. The type of a pointer variable can also be determined by the compiler like a normal variable. Here we will not use the * operator. It will internally determine by the compiler as we are initializing the variable with the address of another variable.

// Golang program to demonstrate

// the use of type inference in

// Pointer variables

// using var keyword

// we are not defining

// any type with variable

var y = 458

// taking a pointer variable using

// var keyword without specifying

// the type

var p = &y

fmt.Println("Value stored in y = ", y)

fmt.Println("Address of y = ", &y)

fmt.Println("Value stored in pointer variable p = ", p)

Value stored in y = 458
Address of y = 0x414020
Value stored in pointer variable p = 0x414020

5. You can also use the shorthand (:=) syntax to declare and initialize the pointer variables. The compiler will internally determine the variable is a pointer variable if we are passing the address of the variable using &(address) operator to it.

// Golang program to demonstrate

// the use of shorthand syntax in

// Pointer variables

// using := operator to declare

// and initialize the variable

y := 458

// taking a pointer variable using

// := by assigning it with the

// address of variable y

p := &y

fmt.Println("Value stored in y = ", y)

fmt.Println("Address of y = ", &y)

fmt.Println("Value stored in pointer variable p = ", p)

Value stored in y = 458
Address of y = 0x414020
Value stored in pointer variable p = 0x414020

Dereferencing the Pointer

As we know that * operator is also termed as the dereferencing operator. It is not only used to declare the pointer variable but also used to access the value stored in the variable which the pointer points to which is generally termed as indirecting or dereferencing. * operator is also termed as the value at the address of. Let's take an example to get a better understandability of this concept:

// Golang program to illustrate the

// concept of dereferencing a pointer

// using var keyword

// we are not defining

// any type with variable

var y = 458

// taking a pointer variable using

// var keyword without specifying

// the type

var p = &y

fmt.Println("Value stored in y = ", y)

fmt.Println("Address of y = ", &y)

fmt.Println("Value stored in pointer variable p = ", p)

// this is dereferencing a pointer

// using * operator before a pointer

// variable to access the value stored

// at the variable at which it is pointing

fmt.Println("Value stored in y(*p) = ", *p)

Value stored in y = 458
Address of y = 0x414020
Value stored in pointer variable p = 0x414020
Value stored in y(*p) = 458

You can also change the value of the pointer or at the memory location instead of assigning a new value to the variable.

// Golang program to illustrate the

// above mentioned concept

// using var keyword

// we are not defining

// any type with variable

var y = 458

// taking a pointer variable using

// var keyword without specifying

// the type

var p = &y

fmt.Println("Value stored in y before changing = ", y)

fmt.Println("Address of y = ", &y)

fmt.Println("Value stored in pointer variable p = ", p)

// this is dereferencing a pointer

// using * operator before a pointer

// variable to access the value stored

// at the variable at which it is pointing

fmt.Println("Value stored in y(*p) Before Changing = ", *p)

// changing the value of y by assigning

// the new value to the pointer

*p = 500

fmt.Println("Value stored in y(*p) after Changing = ",y)

Value stored in y before changing = 458
Address of y = 0x414020
Value stored in pointer variable p = 0x414020
Value stored in y(*p) Before Changing = 458
Value stored in y(*p) after Changing = 500

Different ways to compare Strings in Golang

Pointers to a Function in Go

Comparing Pointers in Golang

30, Aug 19

Pointers to a Function in Go

09, Jul 19

How to convert a slice of bytes in uppercase in Golang?

Golang program that uses fallthrough keyword

18, Apr 20

math.Lgamma() Function in Golang with Examples

13, Apr 20

math.Float64bits() Function in Golang With Examples

How to check equality of slices of bytes in Golang?

21, Aug 19

atomic.AddInt64() Function in Golang With Examples

10, Mar 20

atomic.StoreInt64() Function in Golang With Examples

15, Mar 20

reflect.FieldByIndex() Function in Golang with Examples

strings.Contains Function in Golang with Examples

bits.Sub() Function in Golang with Examples

How to convert a slice of bytes in lowercase in Golang?

io.PipeWriter.CloseWithError() Function in Golang with Examples

Import in GoLang

20, Jul 20

time.Round() Function in Golang With Examples

06, Apr 20

How to add a method to struct type in Golang?

11, Jun 20

Converting a string variable into Boolean, Integer or Float type in Golang

Check if the given slice is sorted in Golang

26, Aug 19

How to compare times in Golang?

reflect.AppendSlice() Function in Golang with Examples

How to Deploy a Golang WebApp to Heroku?

28, Mar 22

reflect.ChanOf() Function in Golang with Examples

flag.Bool() Function in Golang With Examples

Anshul_Aggarwal

@Anshul_Aggarwal

Current difficulty : Basic

+ sagartomar9927
+ YashPathak

+ Golang
+ Golang-Pointers
+ Go Language

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ strings.Contains Function in Golang with Examples
+ fmt.Sprintf() Function in Golang With Examples

+ Time Formatting in Golang
+ Golang Maps
+ Interfaces in Golang
+ How to convert a string in lower case in Golang?
+ Different Ways to Find the Type of Variable in Golang


=======asdf60======== Q\Go K8s\$\87941feec949355bd41694d66432884c.txt
https://www.redhat.com/en/blog/state-kubernetes-security-2022-1
TITLE: The State of Kubernetes Security in 2022

Not registered yet? Here are a few reasons why you should be:

+ Browse Knowledgebase articles, manage support cases and subscriptions, download updates, and more from one place. 
+ View users in your organization, and edit their account information, preferences, and permissions. 
+ Manage your Red Hat certifications, view exam history, and download certification-related logos and documents. 

Edit your profile and preferences 

Your Red Hat account gives you access to your member profile, preferences, and other services depending on your customer status.

For your security, if you're on a public computer and have finished using your Red Hat services, please be sure to log out.

Log out 

Account Log in 

Red Hat blog

Blog menu 

Latest postsBy product

+ Red Hat Enterprise Linux
+ Red Hat Insights
+ Red Hat OpenShift
+ Red Hat Ansible Automation
+ Red Hat OpenStack Platform
+ Red Hat Cloud Storage and Data Services
+ All products

By channel

+ Red Hat News
+ Red Hat Services Speak
+ Cloud native computing
+ Red Hat Security
+ Open Hybrid Cloud
+ Management and automation
+ All channels

The State of Kubernetes Security in 2022 

May 17, 2022Ajmal Kohgadai

+ Back to all posts 

Tags:Containers, Security

Kubernetes is the de facto standard when it comes to container orchestration and management at scale, but adoption is only one piece of Kubernetes strategy. Security plays a huge role in how organizations use cloud-native technologies, and is typically much trickier to address than simply spinning up and running containers. Red Hat's The State of Kubernetes Security for 2022 examines the security challenges organizations face when it comes to cloud-native development and how they address these challenges to protect their applications and IT environments.

The report is based on surveys of more than 300 DevOps, engineering and security professionals, highlighting how companies are adopting containers and Kubernetes while still balancing the security of these environments. While the full report is available here, read on to see some of the key findings from this year's data.

Security concerns linger - and are causing delays

Similar to previous years, security remains one of the biggest concerns around container adoption. New technologies can create unforeseen security challenges when integrated with traditional IT environments, and containers present particular complexities given that their security needs stretch across all aspects of the application lifecycle, from development through deployment and maintenance. The report found that concerns around security threats to containers and a lack of investment in container security is the number-one most common concern with container strategies for 31% of respondents.

Backing these concerns are the 93% of respondents who experienced at least one security incident in their Kubernetes environments in the last 12 months, with the incident sometimes leading to revenue or customer loss. More than half of respondents (55%) also have had to delay an application rollout because of security concerns over the past year. 

Despite extensive media attention over cyberattacks, the report highlights that it's actually misconfigurations that keep IT professionals up at night. Kubernetes is highly customizable, with various configuration options that can affect an application's security posture. Consequently, respondents worry the most about exposures due to misconfigurations in their container and Kubernetes environments (46%) - nearly three times the level of concern over attacks (16%). Automating configuration management as much as possible helps to alleviate these issues, so that security tools - rather than humans - provide the guardrails that help developers and DevOps teams configure containers and Kubernetes more securely.

DevSecOps has become the standard

Less than two years ago, our Fall 2020 report found that 40% of respondents were starting to have DevOps and Security teams collaborate on joint policies and workflows. Over the past two years that number has increased considerably, with DevSecOps now quickly becoming the standard for surveyed organizations. A vast majority of this year's respondents (78%) stated they have a DevSecOps initiative in either beginning or advanced stages. And 27% of respondents count themselves among the most forward-looking organizations when it comes to DevSecOps, with an advanced DevSecOps initiative, where they are integrating and automating security throughout application lifecycles. 

Collaboration across Dev, Ops, and Security teams to implement security early in the development lifecycle helps realize the greatest benefit of Kubernetes-innovating fast. In the past, the role of security was isolated to a specific team in the final stage of development. That wasn't as problematic when development cycles lasted months or even years. With today's rapid release cycles, security must shift left and be embedded into DevOps workflows instead of "bolted on" when the application is about to be deployed into production. 

The good news is, this seems to be resonating with respondents. Besides the high number who are implementing DevSecOps, only 22% of respondents reported that they continue to operate DevOps separate from Security. And only 16% of respondents identify the central IT security team to hold responsibility for Kubernetes security. 

Achieving better security through DevSecOps

Security has long been viewed as a business inhibitor, especially by developers and DevOps teams whose primary goal is to deliver code fast. With containers and Kubernetes, security should become a business accelerator by helping developers build stronger security controls into their applications right from the start. 

Despite potential security concerns, the benefits of container and Kubernetes adoption continue to outweigh the drawbacks. The key is to look for a container and Kubernetes security platform that incorporates DevOps best practices and internal controls as part of its configuration checks. It should also assess the configuration of Kubernetes itself for its security posture, so developers can focus on feature delivery.

To see more about the findings as well as read four tips for achieving better security, the full report can be found here.

About the author

Ajmal Kohgadai 

Principal Product Marketing Manager

Ajmal Kohgadai is Principal Product Marketing Manager for Red Hat Advanced Cluster Security for Kubernetes. Prior to its acquisition by Red Hat, he was the Director of Product Marketing and Growth at StackRox, a leading Kubernetes security company.

Read full bio 

We're the world's leading provider of enterprise open source solutions, using a community-powered approach to deliver high-performing Linux, cloud, container, and Kubernetes technologies. We help you standardize across environments, develop cloud-native applications, and integrate, automate, secure, and manage complex environments with award-winning support, training, and consulting services.


=======asdf61======== Q\Go K8s\$\1b00d7ce53800b5d1424b74cbc0e6f40.txt
https://golangdocs.com/golang-rest-api
TITLE: Golang REST API - Getting Started - GoLang Docs

Hello, tiny Gophers. Welcome to a new article segment on building a REST API using Go. I will try to make this a series so that it covers everything that is needed by you to make your own. This is the first part. Links will be provided at the end of this segment to the next article. So, let's get this going!

What is the REST API?

It stands for Representational State Transfer Application Programming Interface. And while that may be a mouthful, all company websites need to use some form of REST API to allow for functionality such as querying for information.

I have written previously that graphs are much better at the same operations than REST, and that slowly everyone will adopt it. And while that may be the case, REST APIs have flooded the website development world for the past decade and are not going anywhere anytime soon. Also, if you don't know how the wheel works, you wouldn't know how the bike works.

Consider a website where we have lots of books. we can query the REST interface for information. Say you want all books by the author "Robert A Heinlein" that have been published in the year 1941, you'll get a collection of 11 book titles. If you want to see an example for fetching book details using an interface, go to this tutorial for graphs.

In fact, this interfacing is so useful, it allows us to embed book windows from Google books API into our own webpages:

<!DOCTYPE html "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<title>Google Books Embedded Viewer API Example</title>
<script type="text/javascript" src="https://www.google.com/books/jsapi.js"></script>
<script type="text/javascript">
google.books.load();

function initialize() {
var viewer = new google.books.DefaultViewer(document.getElementById('viewerCanvas'));
viewer.load('ISBN:0738531367');
}

google.books.setOnLoadCallback(initialize);
</script>
</head>
<body>
<div id="viewerCanvas" style="width: 600px; height: 500px"></div>
</body>
</html>

If you don't have a HTML file ready to embed this in, you can just simply view the example here: 

https://developers-dot-devsite-v2-prod.appspot.com/books/docs/viewer/examples/book-simple

You can also check out their other examples, but you get the point.

Typically we send HTTP requests to an URL that we have defined in our REST API and it would either perform a given task for us or return a certain bit of data. Most APIs these days would return a response to us in the form of JSON.

Short Note on JSON

It stands for JavaScript Object Notation, which acts as a means of sending and receiving all information, and thankfully Go comes with some excellent support for encoding and decoding these formats using the standard library package, encoding/JSON.

Basic Structure of HTTP Server

Moving on to the basic structure of the HTTP server which we shall be used to query from. This is the same as the one taught in our previous tutorial on Http:

import (
"fmt"
"log"
"net/http"
)

func homePage(w http.ResponseWriter, r *http.Request){
fmt.Fprintf(w, "Welcome to the HomePage!")
fmt.Println("Endpoint Hit: homePage")
}

func handleRequests() {
http.HandleFunc("/", homePage)
log.Fatal(http.ListenAndServe(":8000", nil))
}

func main() {
handleRequests()
}

This is our main.go file for the server. We would like to describe 3 different functions within this main.go file - A homePage function that manages all requests for our root URL, a handleRequests function that matches the hit URL path with a given function, and the main function that will launch our API.

So now if we run this, we get a webpage at localhost:8000 saying "Welcome to the HomePage!"

Article struct for JSON Response

Now let's define our Article structure for querying inside the main.go file. We also create a global array called Articles, which we will populate through our main function. This will be similar to a database:

import (
"encoding/json"
"fmt"
"log"
"net/http"
)

// Article ...
type Article struct {
Title string `json:"Title"`
Author string `json:"author"`
Link string `json:"link"`
}

// Articles ...
var Articles []Article

func homePage(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Welcome to the HomePage!")
fmt.Println("Endpoint Hit: homePage")
}

func handleRequests() {
http.HandleFunc("/", homePage)
// add our articles route and map it to our
// returnAllArticles function like so
http.HandleFunc("/articles", returnAllArticles)
log.Fatal(http.ListenAndServe(":8000", nil))
}

func returnAllArticles(w http.ResponseWriter, r *http.Request) {
fmt.Println("Endpoint Hit: returnAllArticles")
json.NewEncoder(w).Encode(Articles)
}

func main() {
Articles = []Article{
Article{Title: "Python Intermediate and Advanced 101",
Author: "Arkaprabha Majumdar",
Link: "https://www.amazon.com/dp/B089KVK23P"},
Article{Title: "R programming Advanced",
Author: "Arkaprabha Majumdar",
Link: "https://www.amazon.com/dp/B089WH12CR"},
Article{Title: "R programming Fundamentals",
Author: "Arkaprabha Majumdar",
Link: "https://www.amazon.com/dp/B089S58WWG"},
}
handleRequests()
}

+ Article struct contains 3 properties we need to represent all of the articles on our site - Title, Author, and Link. Of course, we can add more in a similar manner.
+ We made a new function called returnAllArticles, which will do the simple task of returning our newly populated Articles variable, encoded in JSON format.
+ The call to JSON.NewEncoder(w).Encode(article) does the job of encoding our articles array into a JSON string and then writing as part of our response.
+ Before this will work, we'll also need to add a new route to our handleRequests function that will map any calls to http://localhost:8000/articles to our newly defined function.

Now, if you go run the file, then at localhost:8000/articles, you'll find a list of three books that I have written, and which are excellent books for Python and R programming.

Rest Api Golang Output In Server

That's it for this section. Fiddle around with this, and make your own json formats.

Next we'll be looking at working with a gorrilla/mux router in Golang Mux Router.


=======asdf62======== Q\Go K8s\$\358e1f226d59f97040876442d166101b.txt
https://docs.microsoft.com/en-us/azure/defender-for-cloud/defender-for-kubernetes-introduction
TITLE: Microsoft Defender for Kubernetes - the benefits and features | Microsoft Docs

Defender for Cloud provides real-time threat protection for your Azure Kubernetes Service (AKS) containerized environments and generates alerts for suspicious activities. You can use this information to quickly remediate security issues and improve the security of your containers.

Threat protection at the cluster level is provided by the analysis of the Kubernetes audit logs. Host-level threat detection for your Linux AKS nodes is available if you enable Microsoft Defender for Servers and its Log Analytics agent. However, if your cluster is deployed on an Azure Kubernetes Service virtual machine scale set, the Log Analytics agent is not currently supported.

Availability

Important

Microsoft Defender for Kubernetes has been replaced with Microsoft Defender for Containers. If you've already enabled Defender for Kubernetes on a subscription, you can continue to use it. However, you won't get Defender for Containers' improvements and new features.

This plan is no longer available for subscriptions where it isn't already enabled.

To upgrade to Microsoft Defender for Containers, open the Defender plans page in the portal and enable the new plan:

Learn more about this change in the release note.

{Aspect} {Details} 

{Release state:} {Deprecated (Use Microsoft Defender for Containers)} 

{Pricing:} {Microsoft Defender for Kubernetes is billed as shown on the pricing page.} 

{Required roles and permissions:} {Security admin can dismiss alerts.
Security reader can view findings.} 

{Clouds:} { Commercial clouds
National (Azure Government, Azure China 21Vianet)} 

What are the benefits of Microsoft Defender for Kubernetes?

Our global team of security researchers constantly monitor the threat landscape. As container-specific alerts and vulnerabilities are discovered, these researchers add them to our threat intelligence feeds and Defender for Cloud alerts you to any that are relevant for your environment.

In addition, Microsoft Defender for Kubernetes provides cluster-level threat protection by monitoring your clusters' logs. This means that security alerts are only triggered for actions and deployments that occur after you've enabled Defender for Kubernetes on your subscription.

Examples of security events that Microsoft Defender for Kubernetes monitors include:

+ Exposed Kubernetes dashboards 
+ Creation of high privileged roles 
+ Creation of sensitive mounts. 

For a full list of the cluster level alerts, see alerts with "K8S_" prefix in the alert type in the reference table of alerts.

FAQ - Microsoft Defender for Kubernetes

+ What happens to subscriptions with Microsoft Defender for Kubernetes or Microsoft Defender for Containers enabled? 
+ Is Defender for Containers a mandatory upgrade? 
+ Does the new plan reflect a price increase? 

What happens to subscriptions with Microsoft Defender for Kubernetes or Microsoft Defender for Containers enabled?

Subscriptions that already have one of these plans enabled can continue to benefit from it.

If you haven't enabled them yet, or create a new subscription, these plans can no longer be enabled.

Is Defender for Containers a mandatory upgrade?

No. Subscriptions that have either Microsoft Defender for Kubernetes or Microsoft Defender for Containers Registries enabled doesn't need to be upgraded to the new Microsoft Defender for Containers plan. However, they won't benefit from the new and improved capabilities and they'll have an upgrade icon shown alongside them in the Azure portal.

Does the new plan reflect a price increase?

No. There's no direct price increase. The new comprehensive Container security plan combines Kubernetes protection and container registry image scanning, and removes the previous dependency on the (paid) Defender for Servers plan.

Next steps

In this article, you learned about Kubernetes protection in Defender for Cloud, including Microsoft Defender for Kubernetes.


=======asdf63======== Q\Go K8s\$\b9b5bcc06a3aae94a254ff04809e4f57.txt
https://www.sohamkamani.com/golang/enums/
TITLE: Using Enums (and Enum Types) in Golang

This post will describe how to implement and use enumerations (or enum types) in Go.

Enums are types that contain only a limited number of fixed values, as opposed to types like int or string which can have a wide range of values.

This is useful for many situations: For example, when describing seasons in temperate climates, you'll want to limit the options to certain possible values: Summer, Winter, Spring and Autumn.

Let's look at different ways of implementing this type of data:

Defining Enums as Constants

The simplest way to implement enums for season options is to create an int or string constant for each season:

// int mapping
const (
Summer int = 0
Autumn = 1
Winter = 2
Spring = 3
)

// string mapping
const (
Summer string = "summer"
Autumn = "autumn"
Winter = "winter"
Spring = "spring"
)

While this would work for small codebases, we will face a few immediate issues:

It's easy to make mistakes in your code. A developer can make the mistake of using integers outside the range of the ones defined.
+ 

Definitions from unrelated enums can overlap and cause conflicts:

const (
Summer int = 0
Autumn = 1
Winter = 2
Spring = 3
)

const (
Apples = 0
Oranges = 1
)

func main() {
// Ideally, this should never be true!
fmt.Println(Summer == Apples)
}

This is semantically incorrect - Seasons are not really integers or strings, they're seasons!

Enum Types

We can define a new Season type with int as the base type:

type Season int64

const (
Summer Season = 0
Autumn = 1
Winter = 2
Spring = 3
)

This defines the above constants as their own types. You can also use the iota keyword to achieve the same result in a more readable manner:

const (
Summer Season = iota
Autumn
Winter
Spring
)

Using iota instead of manually assigning values also prevents you from inadvertently assigning the same value to more than one constant, which could otherwise cause a conflict

Since Season is a new type, you can't compare it to other types anymore:

func printSeason(s Season) {
fmt.Println("season: ", s)
}

func main() {
i := 0
printSeason(i)
// This will result in a compilation error since
// i is an int, and `printSeason` only accepts
// Season types
}

It's now impossible to compare Season constants with Fruit constants, or use them interchangeably.

Adding String Methods to Enum Types

In the previous example, if we call printSeason(Winter), we will get the output:

season: 2

Try this on the Go playground

It would be better if we can a more human-readable format when printing our season selection.

Let's implement the String method for the Season type to achieve this:

const (
Summer Season = iota
Autumn
Winter
Spring
)

func (s Season) String() string {
switch s {
case Summer:
return "summer"
case Autumn:
return "autumn"
case Winter:
return "winter"
case Spring:
return "spring"
}
return "unknown"
}

If we run the code now, we should get the output:

season: winter

We can add any number of methods to this type as we require.

Default Enum Values

In our previous examples, we defined our Season constants as integer values. This means that 0 (which is Summer) would be the default value.

When using enum types, you should make sure that you're ok with the default value. For example, if you want the value to be set explicitly, it's better to add a custom "unknown" or "undefined" value:

const (
// since iota starts with 0, the first value
// defined here will be the default
Undefined Season = iota
Summer
Autumn
Winter
Spring
)

This can be useful when you want to check if a value has been set or not:

if mySeason == Undefined {
// log an error
}

Test your knowledge: How would you implement a default string enum?

If we were using string enums (type Season string) instead of ints, how would you rewrite the constant definition for the Undefined value?

Undefined Season = "undefined"

Undefined Season = "0"

Undefined Season = iota

Undefined Season = ""

Since the default value of a string in Go is the empty string (""), this is what your default enum should be assigned to as well.

Find this post useful? Subscribe to my newsletter to know when I publish new posts!

Using Enums in Practice

Now that you know how to implement enums, the next question is: When to use them?

We can see enums used throughout the standard library. Some common examples are:

+ Prefix flags in the log package
+ Status codes and methods in the http package
+ Standard grayscale colors in the color package

In general, you should use enums whenever you have group of limited, and related values for a particular type.

Have you used enums, or something similar to enums in your code before? How was is useful? Let me know in the comments!

Share this on:
+ 

Like what I write? Join my mailing list, and I'll let you know whenever I write another post. No spam, I promise!


=======asdf64======== Q\Go K8s\$\53beb56c0d04a881471e626e8d2b1f29.txt
https://phoenixnap.com/kb/kubernetes-delete-namespace
TITLE: How to Delete a Kubernetes Namespace {Standard & Force Removal}

Namespaces are Kubernetes objects that partition a cluster into virtual clusters. Each Kubernetes object has a unique identity, defined by its name and the namespace it belongs to.

This article will show you how to delete a Kubernetes namespace. Alongside the standard namespace removal procedure, it will provide an additional method for troubleshooting problems concerning namespaces stuck in the terminating status.

+ A Kubernetes cluster
+ kubectl installed

Delete Kubernetes Namespace (Standard Method)

The standard method for deleting any Kubernetes namespace is using the dedicated kubectl command, kubectl delete:

kubectl delete namespace [your-namespace]

The output of the command confirms the deletion of the namespace:

Force Delete a Kubernetes Namespace

Sometimes a user deletes a namespace before all its resources have been removed. This action may cause the namespace to become permanently stuck in the Terminating status. Kubernetes does not allow creating another namespace with the same name until the deletion process is finished.

Check the status of the deleted namespace by using the kubectl get command:

kubectl get namespace [your-namespace]

If the namespace was deleted successfully, Kubernetes returns an error:

However, if the deletion did not complete successfully, the status of the namespace is listed as Terminating:

To force delete a Kubernetes namespace, remove the finalizer from the namespace's configuration. The finalizer is a Kubernetes resource whose purpose is to prohibit the force removal of an object. 

The steps below demonstrate the procedure for removing the finalizer from the namespace configuration. 

1. Display the namespace configuration in YAML format:

kubectl get namespace [your-namespace] -o yaml

2. Check if a finalizer exists in the spec field. The example shows the kubernetes finalizer in the configuration of test-namespace:

3. Copy the JSON-formatted output of the kubectl get command to the tmp.json file. The file will be used to communicate the changes to the Kubernetes API.

kubectl get namespace [your-namespace] -o json >tmp.json

4. Edit the tmp.json file using a text editor:

nano tmp.json

Remove all the finalizers from the spec.finalizers field. After editing, the file should resemble the example below:

Save and exit the file when you finish editing it.

5. Type the following command in the terminal to use HTTP proxy for accessing the Kubernetes API:

kubectl proxy

If successful, the proxy starts serving on an IP address specific to your cluster configuration.

6. Leave the proxy running in the terminal and open another terminal window.

7. Execute the following curl command to issue an API call to the Kubernetes API:

curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/[your-namespace]/finalize

If successful, the command displays the namespace configuration information. The finalizers are not in the configuration anymore:

To confirm that you removed the namespace, list available namespaces with kubectl get: 

kubectl get namespace

If the deletion is completed successfully, the namespace does not show in the list:

Note: BMC allows DevOps teams to utilize the Kubernetes API for BMC resource provisioning. The BMC controller for Kubernetes is available on phoenixNAP's official GitHub page.

After reading this article, you should know how to remove a Kubernetes namespace from your cluster. The article explained the standard kubectl method for deleting a namespace and the force removal method that utilizes a Kubernetes API call. 

Was this article helpful?

YesNo

Share on Twitter Share on Facebook Share on LinkedIn Share on Email

Marko Aleksic

Marko Aleksi^ is a Technical Writer at phoenixNAP. His innate curiosity regarding all things IT, combined with over a decade long background in writing, teaching and working in IT-related fields, led him to technical writing, where he has an opportunity to employ his skills and make technology less daunting to everyone.

Next you should read

DevOps and Development WordPress 

How to Deploy WordPress Instance on Kubernetes 

September 2, 2021

This tutorial explains two methods of deploying WordPress on Kubernetes - using Helm charts and creating your deployment...

Read more 

DevOps and Development Virtualization 

Understanding Kubernetes Architecture with Diagrams 

November 12, 2019

This tutorial is the first in a series of articles that focus on Kubernetes and the concept of container deployment. Kubernetes is a tool 

Read more 

DevOps and Development SysAdmin 

How to Configure Kubernetes for Rolling Update 

July 15, 2021

This tutorial shows you how to perform rolling updates using Kubernetes Deployments. This method allows you to quickly update your apps and...

Read more 

DevOps and Development 

15 Kubernetes Tools For Deployment, Monitoring, Security 

May 5, 2022

We are going to look at 15 of the best Kubernetes tools. These applications will complement K8s and enhance your development work...

Read more 

Recent Posts

+ Kubernetes Service Discovery Guide
+ Portainer vs. Rancher: In-depth Comparison
+ How to Run ELK Stack on Docker
+ Jenkins vs. Kubernetes: What Is the Difference?
+ Rancher Node Driver Tutorial

Categories

+ SysAdmin 
+ Virtualization 
+ DevOps and Development 
+ Security 
+ Backup and Recovery 
+ Bare Metal Servers 
+ Web Servers 
+ Networking 
+ Databases 

COLOCATION

+ Phoenix 
+ Ashburn 
+ Amsterdam 
+ Atlanta 
+ Belgrade 
+ Singapore 

PROMOTIONS

SERVERS

+ Dedicated Servers 
+ Database Servers 
+ Virtualization Servers 
+ High Performance Computing (HPC) Servers 
+ Dedicated Streaming Servers 
+ Dedicated Game Servers 
+ Dedicated Storage Servers 
+ SQL Server Hosting 
+ Dedicated Servers in Amsterdam 
+ Cloud Servers in Europe 
+ Big Memory Infrastructure 

BUY NOW

CLOUD SERVICES 

+ Data Security Cloud 
+ VPDC 
+ Managed Private Cloud 
+ Object Storage 

SERVERS

+ Disaster Recovery 
+ Web Hosting Reseller 
+ SaaS Hosting 

INDUSTRIES

+ Web Hosting Providers 
+ Legal 
+ MSPs & VARs 
+ Media Hosting 
+ Online Gaming 
+ SaaS Hosting Solutions 
+ Ecommerce Hosting Solutions 

COMPLIANCE

+ HIPAA Ready Hosting 
+ PCI Compliant Hosting 

NEEDS

+ Disaster Recovery Solutions 
+ High Availability Solutions 
+ Cloud Evaluation 

COMPANY

+ About Us 
+ GitHub 
+ Blog 
+ RFP Template 
+ Careers 

CONNECT

+ Events 
+ Press 
+ Contact Us 

+ PhoenixNAP Home 
+ Blog 
+ Resources 
+ Glossary 
+ GitHub 
+ RFP Template 

+ Live Chat 
+ Get a Quote 
+ Support | 1-855-330-1509 
+ Sales | 1-877-588-5918 

+ Contact Us 
+ Legal 
+ Privacy Policy 
+ Terms of Use 
+ DMCA 
+ GDPR 
+ Sitemap 

(c) 2022 Copyright phoenixNAP | Global IT Services. All Rights Reserved.


=======asdf65======== Q\Go K8s\$\5339efef78384cca323fdb772b9cdac4.txt
https://stackoverflow.com/questions/16577601/what-does-mean-in-go
TITLE: colon equals - What does := mean in Go? - Stack Overflow

Loading...

current community 

Stack Overflow 

help chat 

Meta Stack Overflow 

your communities 

Sign up or log in to customize your list. 

more stack exchange communities 

company blog 

+ 
+ Log in 
+ Sign up 

Home 

+ Public 
+ Questions 
+ 

Tags 

Users 

Companies 

Collectives

+ Explore Collectives 

Teams

Stack Overflow for Teams - Start collaborating and sharing organizational knowledge. Create a free Team Why Teams? 

Teams

Create free Team 

Collectives(tm) on Stack Overflow

Find centralized, trusted content and collaborate around the technologies you use most.

Teams

Q&A for work

Connect and share knowledge within a single location that is structured and easy to search.

What does := mean in Go?

Ask Question 

Asked 9 years, 1 month ago 

Modified 3 months ago 

Viewed 11k times 

16 

1

I'm following this tutorial, specifically exercise 8:

http://tour.golang.org/#8

func swap(x, y string) (string, string) {
return y, x
}

func main() {
a, b := swap("hello", "world")
fmt.Println(a, b)
}

Specifically what does the := mean? Searching for Go documentation is very hard, ironically.

go colon-equals 

edited Nov 13, 2018 at 13:12 

moodymudskipper 

42.8k1010 gold badges104104 silver badges146146 bronze badges 

asked May 16, 2013 at 1:27 

sergsergsergserg 

20.6k4040 gold badges124124 silver badges180180 bronze badges 

7 

1 

@BenjaminGruenbaum I guess it's a case of knowing what to search for. I tried go := meaning, golang := and nothing relevant came up. 

- sergserg 

May 16, 2013 at 1:29 

For what it's worth, it wasn't where I usually looked for Go resources/specification 

- Benjamin Gruenbaum 

May 16, 2013 at 1:30 

7 

If you run into something in the language that you don't understand, instead of googling (which is definitely not going to work well for punctuation), just pop open golang.org/ref/spec and search there. That's the actual spec for the language, and it's not very large. Second occurrence of ":=" on the page is precisely what you want. 

- Lily Ballard 

May 16, 2013 at 1:39 

@KevinBallard Thanks for the suggestion. 

- sergserg 

May 16, 2013 at 1:41 

2 

It's explained in the tutorial 

- user1106925 

May 16, 2013 at 1:50 

| Show 2 more comments 

7 Answers 7 

Sorted by: Reset to default 

Trending sort available 

Introducing: Trending sort 

You can now choose to sort by Trending, which boosts votes that have happened recently, helping to surface more up-to-date answers.

Trending is based off of the highest score sort and falls back to it if no posts are trending.

Try it Dismiss 

Highest score (default) Trending (recent votes count more) Date modified (newest first) Date created (oldest first) 

20 

A short variable declaration uses the syntax:

ShortVarDecl = IdentifierList ":=" ExpressionList .

It is a shorthand for a regular variable declaration with initializer expressions but no types:

edited May 16, 2013 at 1:30 

NullPoi^te^ 

55.2k2222 gold badges123123 silver badges139139 bronze badges 

answered May 16, 2013 at 1:30 

Benjamin GruenbaumBenjamin Gruenbaum 

261k8585 gold badges489489 silver badges491491 bronze badges 

7 

Keep on going to page 12 of the tour!

A Tour of Go

Short variable declarations

Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

(Outside a function, every construct begins with a keyword and the := construct is not available.)

edited May 16, 2013 at 1:53 

answered May 16, 2013 at 1:47 

peterSOpeterSO 

147k2929 gold badges258258 silver badges253253 bronze badges 

3 

As others have explained already, := is for both declaration, and assignment, whereas = is for assignment only.

For example, var abc int = 20 is the same as abc := 20.

It's useful when you don't want to fill up your code with type or struct declarations.

answered Feb 12, 2021 at 16:50 

javeriajaveria 

6199 bronze badges 

1 

Take my comment as a little joke: no aswer should start with "As others have explained already...", right? ^^ 

- Ferran Maylinch 

Feb 15, 2021 at 18:17 

2 

The := syntax is shorthand for declaring and initializing a variable, example f := "car" is the short form of var f string = "car"

The short variable declaration operator(:=) can only be used for declaring local variables. If you try to declare a global variable using the short declaration operator, you will get an error.

Refer official documentation for more details

edited Mar 28 at 14:32 

MeanwhileInHell 

6,2541515 gold badges5252 silver badges9494 bronze badges 

answered Feb 10, 2021 at 15:57 

ArunArun 

1,37933 gold badges1616 silver badges3030 bronze badges 

3 

You could add a link to the official doc, like the accepted answer. I also think that this symbol can only be used in local variables, right? If that's true, you could add that. 

- Ferran Maylinch 

Feb 11, 2021 at 18:47 

@FerranMaylinch Thanks for the suggestions to make it more accurate .. 

- Arun 

Feb 12, 2021 at 16:55 

It's funny that you got a negative vote, and then someone wrote the same answer ^^ 

- Ferran Maylinch 

Feb 15, 2021 at 18:14 

1 

:= is not an operator. It is a part of the syntax of the Short variable declarations clause.

more on this: https://golang.org/ref/spec#Short_variable_declarations

answered Nov 13, 2018 at 13:21 

Md. Tazbir Ur Rahman BhuiyanMd. Tazbir Ur Rahman Bhuiyan 

1,9042121 silver badges3131 bronze badges 

According to my book on Go, it is just a short variable declaration statement exactly the same as

var s = ""

But it is more easy to declare, and the scope of it is less expansive. A := var decleration also can't have a type of interface{}. This is something that you will probably run into years later though

edited May 13, 2016 at 22:22 

answered Nov 25, 2015 at 14:53 

liamliam 

34122 gold badges44 silver badges99 bronze badges 

1 

The only difference between the two is that var can be used in a global scope. You can also use var in functions, and it'll behave exactly the same as :=. Also, you can use the interface{} type with var declarations. 

- pjmonk 

Jun 2, 2020 at 19:08 

-2 

:= represents a variable, we can assign a value to a variable using :=.

answered Nov 23, 2015 at 8:39 

user5594344user5594344 

1 

Your Answer 

Draft saved

Draft discarded

Sign up or log in

Sign up using Google 

Sign up using Facebook 

Sign up using Email and Password 

Submit 

Post as a guest

Name 

Email 

Required, but never shown

Post as a guest

Name 

Email 

Required, but never shown

Post Your Answer Discard 

By clicking "Post Your Answer", you agree to our terms of service, privacy policy and cookie policy 

Not the answer you're looking for? Browse other questions tagged go colon-equals or ask your own question. 

Go Language 

Collective 

Learn more about Collectives on Stack Overflow 

The Overflow Blog 

Exploring the interesting and strange results from our 2022 Developer Survey... 

Seeing is believing: The Stack Overflow Podcast now available as video 

Featured on Meta 

Testing new traffic management tool 

Duplicated votes are being cleaned up 

Trending: A new answer sorting option 

Updated button styling for vote arrows: currently in A/B testing 

Visit chat 

Related

128

What does ":=" do? 

12

If type T2 is based on type T1, is there any sort of "inheritance" from T1 to T2? 

6

One type is coerced into another, can a method to determine the type of the receiver? 

687

What is an idiomatic way of representing enums in Go? 

4

Go String after variable declaration 

262

What does an underscore in front of an import statement mean? 

2

How to distingish between package name and object name in golang 

154

What does colon equal (:=) in Python mean? 

9

Why does putting a pointer in an interface{} in Go cause reflect to lose the name of the type? 

5

when does Go http.Get reuse the tcp connection? 

Hot Network Questions 

I overstayed a visa in the Schengen area, should I tell this when applying for a student visa in Canada? 
+ 

How did this building's windows get like this? 
+ 

Help ID this plane please 
+ 

Is there an acceptable way of cooling red wine? 
+ 

Can I use the back face of a modal double faced card for abilities while the card is not on the battlefield? 
+ 

Round / smooth the end points of curve in geometry nodes 
+ 

"if" statement syntax differences between C and C++ 
+ 

Bicycle rear tyres getting stuck 
+ 

Is there a version of the Einstein field equations that uses the Riemann curvature tensor instead of the Ricci curvature tensor? 
+ 

What is the automorphism group of a complete bipartite graph? 
+ 

How to represent a constraint on the kth-smallest function? 
+ 

Huge Galaxies seen from earth 
+ 

Joyal arithmetic universes and the Box operator 
+ 

How to securely XOR strings in JavaScript? 
+ 

Pair of short exact sequences of groups 
+ 

How to solve for composition function? 
+ 

LM1117 LDO - Vout variability? 
+ 

Old show about a cave with magic stones? 
+ 

Dativ or Akkusativ? 
+ 

MLOps for beginner 
+ 

How to scale model instead of armature? 
+ 

Quantum supercomputers in orbit? 
+ 

When do you get the exact address for an airbnb booking? 
+ 

I found some typos in the proof of the main theorem after submission. Shall I contact the editor? 


=======asdf66======== Q\Go K8s\$\5af58f236178ea35a0dd937ff57a09f4.txt
https://kubernetes.io/
TITLE: Kubernetes

Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.

It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.

Planet Scale

Designed on the same principles that allows Google to run billions of containers a week, Kubernetes can scale without increasing your ops team.

Never Outgrow

Whether testing locally or running a global enterprise, Kubernetes flexibility grows with you to deliver your applications consistently and easily no matter how complex your need is.

Run K8s Anywhere

Kubernetes is open source giving you the freedom to take advantage of on-premises, hybrid, or public cloud infrastructure, letting you effortlessly move workloads to where it matters to you.

The Challenges of Migrating 150+ Microservices to Kubernetes

By Sarah Wells, Technical Director for Operations and Reliability, Financial Times

Watch Video

Attend KubeCon Europe on May 17-20, 2022

Attend KubeCon North America on October 24-28, 2022

Kubernetes Features

Automated rollouts and rollbacks

Kubernetes progressively rolls out changes to your application or its configuration, while monitoring application health to ensure it doesn't kill all your instances at the same time. If something goes wrong, Kubernetes will rollback the change for you. Take advantage of a growing ecosystem of deployment solutions.

Service discovery and load balancing

No need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.

Storage orchestration

Automatically mount the storage system of your choice, whether from local storage, a public cloud provider such as GCP or AWS, or a network storage system such as NFS, iSCSI, Gluster, Ceph, Cinder, or Flocker.

Secret and configuration management

Deploy and update secrets and application configuration without rebuilding your image and without exposing secrets in your stack configuration.

Automatic bin packing

Automatically places containers based on their resource requirements and other constraints, while not sacrificing availability. Mix critical and best-effort workloads in order to drive up utilization and save even more resources.

Batch execution

In addition to services, Kubernetes can manage your batch and CI workloads, replacing containers that fail, if desired.

IPv4/IPv6 dual-stack

Allocation of IPv4 and IPv6 addresses to Pods and Services

Horizontal scaling

Scale your application up and down with a simple command, with a UI, or automatically based on CPU usage.

Self-healing

Restarts containers that fail, replaces and reschedules containers when nodes die, kills containers that don't respond to your user-defined health check, and doesn't advertise them to clients until they are ready to serve.

Designed for extensibility

Add features to your Kubernetes cluster without changing upstream source code.

Case Studies

"Kubernetes is a great platform for machine learning because it comes with all the scheduling and ..."

"Kubernetes is a great solution for us. It allows us to rapidly iterate on our clients' demands. "

"We realized that we needed to learn Kubernetes better in order to fully use the potential of it. At ..."

"We made the right decisions at the right time. Kubernetes and the cloud native technologies are now ..."

Case Studies

We are a CNCF graduated project

Interested in receiving the latest Kubernetes news? Sign up for KubeWeekly.

Home Blog Training Partners Community Case Studies

(c) 2022 The Kubernetes Authors | Documentation Distributed under CC BY 4.0
Copyright (c) 2022 The Linux Foundation (R). All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page
ICP license: ^ICP^17074266^-3


=======asdf67======== Q\Go K8s\$\e0820e54a3a9d5c772bc3929633d6eb7.txt
https://golang.google.cn/doc/
TITLE: Documentation - The Go Programming Language

Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It's a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language. 

Getting started

Installing Go

Instructions for downloading and installing Go. 

Tutorial: Getting started

A brief Hello, World tutorial to get started. Learn a bit about Go code, tools, packages, and modules. 

Tutorial: Create a module

A tutorial of short topics introducing functions, error handling, arrays, maps, unit testing, and compiling. 

Tutorial: Getting started with multi-module workspaces

Introduces the basics of creating and using multi-module workspaces in Go. Multi-module workspaces are useful for making changes across multiple modules. 

Tutorial: Developing a RESTful API with Go and Gin

Introduces the basics of writing a RESTful web service API with Go and the Gin Web Framework. 

Tutorial: Getting started with generics

With generics, you can declare and use functions or types that are written to work with any of a set of types provided by calling code. 

Tutorial: Getting started with fuzzing

Fuzzing can generate inputs to your tests that can catch edge cases and security issues that you may have missed. 

Writing Web Applications

Building a simple web application. 

How to write Go code

This doc explains how to develop a simple set of Go packages inside a module, and it shows how to use the go command to build and test packages. 

A Tour of Go

An interactive introduction to Go in three sections. The first section covers basic syntax and data structures; the second discusses methods and interfaces; and the third introduces Go's concurrency primitives. Each section concludes with a few exercises so you can practice what you've learned. You can take the tour online or install it locally with: 

$ go install golang.org/x/website/tour@latest

This will place the tour binary in your GOPATH's bin directory. 

Using and understanding Go

Effective Go

A document that gives tips for writing clear, idiomatic Go code. A must read for any new Go programmer. It augments the tour and the language specification, both of which should be read first. 

Editor plugins and IDEs

A document that summarizes commonly used editor plugins and IDEs with Go support. 

Diagnostics

Summarizes tools and methodologies to diagnose problems in Go programs. 

Managing dependencies

When your code uses external packages, those packages (distributed as modules) become dependencies. 

Fuzzing

Main documentation page for Go fuzzing. 

Accessing databases

Tutorial: Accessing a relational database

Introduces the basics of accessing a relational database using Go and the database/sql package in the standard library. 

Accessing relational databases

An overview of Go's data access features. 

Opening a database handle

You use the Go database handle to execute database operations. Once you open a handle with database connection properties, the handle represents a connection pool it manages on your behalf. 

Executing SQL statements that don't return data

For SQL operations that might change the database, including SQL INSERT, UPDATE, and DELETE, you use Exec methods. 

Querying for data

For SELECT statements that return data from a query, using the Query or QueryRow method. 

Using prepared statements

Defining a prepared statement for repeated use can help your code run a bit faster by avoiding the overhead of re-creating the statement each time your code performs the database operation. 

Executing transactions

sql.Tx exports methods representing transaction-specific semantics, including Commit and Rollback, as well as methods you use to perform common database operations. 

Canceling in-progress database operations

Using context.Context, you can have your application's function calls and services stop working early and return an error when their processing is no longer needed. 

Managing connections

For some advanced programs, you might need to tune connection pool parameters or work with connections explicitly. 

Avoiding SQL injection risk

You can avoid an SQL injection risk by providing SQL parameter values as sql package function arguments 

Developing modules

Developing and publishing modules

You can collect related packages into modules, then publish the modules for other developers to use. This topic gives an overview of developing and publishing modules. 

Module release and versioning workflow

When you develop modules for use by other developers, you can follow a workflow that helps ensure a reliable, consistent experience for developers using the module. This topic describes the high-level steps in that workflow. 

Managing module source

When you're developing modules to publish for others to use, you can help ensure that your modules are easier for other developers to use by following the repository conventions described in this topic. 

Developing a major version update

A major version update can be very disruptive to your module's users because it includes breaking changes and represents a new module. Learn more in this topic. 

Publishing a module

When you want to make a module available for other developers, you publish it so that it's visible to Go tools. Once you've published the module, developers importing its packages will be able to resolve a dependency on the module by running commands such as go get. 

Module version numbering

A module's developer uses each part of a module's version number to signal the version's stability and backward compatibility. For each new release, a module's release version number specifically reflects the nature of the module's changes since the preceding release. 

Frequently Asked Questions (FAQ)

Answers to common questions about Go. 

References

Package Documentation

The documentation for the Go standard library. 

Command Documentation

The documentation for the Go tools. 

Language Specification

The official Go Language specification. 

Go Modules Reference

A detailed reference manual for Go's dependency management system. 

go.mod file reference

Reference for the directives included in a go.mod file. 

The Go Memory Model

A document that specifies the conditions under which reads of a variable in one goroutine can be guaranteed to observe values produced by writes to the same variable in a different goroutine. 

Contribution Guide

Contributing to Go.

Release History

A summary of the changes between Go releases.

Codewalks

Guided tours of Go programs. 

+ First-Class Functions in Go 
+ Generating arbitrary text: a Markov chain algorithm 
+ Share Memory by Communicating 

From the Go Blog

The official blog of the Go project, featuring news and in-depth articles by the Go team and guests.

Language

+ JSON-RPC: a tale of interfaces 
+ Go's Declaration Syntax 
+ Defer, Panic, and Recover 
+ Go Concurrency Patterns: Timing out, moving on 
+ Go Slices: usage and internals 
+ A GIF decoder: an exercise in Go interfaces 
+ Error Handling and Go 
+ Organizing Go code 

Packages

+ JSON and Go - using the json package. 
+ Gobs of data - the design and use of the gob package. 
+ The Laws of Reflection - the fundamentals of the reflect package. 
+ The Go image package - the fundamentals of the image package. 
+ The Go image/draw package - the fundamentals of the image/draw package. 

Modules

+ Using Go Modules - an introduction to using modules in a simple project. 
+ Migrating to Go Modules - converting an existing project to use modules. 
+ Publishing Go Modules - how to make new versions of modules available to others. 
+ Go Modules: v2 and Beyond - creating and publishing major versions 2 and higher. 
+ Keeping Your Modules Compatible - how to keep your modules compatible with prior minor/patch versions. 

Tools

+ About the Go command - why we wrote it, what it is, what it's not, and how to use it. 
+ Go Doc Comments - writing good program documentation 
+ Debugging Go Code with GDB 
+ Data Race Detector - a manual for the data race detector. 
+ A Quick Guide to Go's Assembler - an introduction to the assembler used by Go. 
+ C? Go? Cgo! - linking against C code with cgo. 
+ Profiling Go Programs 
+ Introducing the Go Race Detector - an introduction to the race detector. 

Wiki

The Go Wiki, maintained by the Go community, includes articles about the Go language, tools, and other resources. 

See the Learn page at the Wiki for more Go learning resources. 

Talks

A Video Tour of Go

Three things that make Go fast, fun, and productive: interfaces, reflection, and concurrency. Builds a toy web crawler to demonstrate these. 

Code that grows with grace

One of Go's key design goals is code adaptability; that it should be easy to take a simple design and build upon it in a clean and natural way. In this talk Andrew Gerrand describes a simple "chat roulette" server that matches pairs of incoming TCP connections, and then use Go's concurrency mechanisms, interfaces, and standard library to extend it with a web interface and other features. While the function of the program changes dramatically, Go's flexibility preserves the original design as it grows. 

Go Concurrency Patterns

Concurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code. 


=======asdf68======== Q\Go K8s\$\3414ae8d70d50a278adafd1fb8f26fa9.txt
https://news.search.yahoo.com/search?p=Kubernetes&fr2=p:s%2Cv:w%2Cm:newsdd_bn_t%2Cct:bing
TITLE: Kubernetes - Yahoo Search Results

Get Industry Leading Price-to-Performance on Your Kubernetes Clusters With a Free Credit. Develop Rapidly With Easy Deployment, Release Updates, & Management of Your Apps. 

+ Kubernetes Web Apps 

Easily Deploy, Manage, & Scale

Containerized Apps Using Kubernetes

+ App Platform 

A Fully Managed Solution to Build,

Deploy, & Scale Apps. Try for Free.

+ Cloud Computing 

Simpler Cloud. Happier Devs.

Better Results. Try For Free.

+ Speak To An Expert 

Designed For Developers.

Built For Businesses.

+ The Cloud Developers Love 

Simpler Cloud. Happier Devs.

Better Results. Try For Free.

+ Kubernetes Feature 

High Availability Control Plane

Run Workloads Reliably

Full Visibility, Total Control - Experience Advanced AI

www.cisco.com

If Your Future is in the Cloud, How Do You Get There? Learn How to Be Cloud Smart. Cisco(R) Intersight Simplifies IT Operations to Get More Value from Your Investments. 

24-Hour Tech Service . Global Market Leader . Red Dot Design Award 

+ Free 45-Day Trial 
+ Cloud Operations Platform 

+ Hybrid Cloud Resource Kit 
+ Cisco(R) Intersight Demo 

When, why and how to run databases in Kubernetes

VentureBeat. 1 day ago

"Should I run my database in Kubernetes?" It's a simple question without a simple answer because the honest answer is: "it depends." Kubernetes is the platform ... 

Council Post: Why Kubernetes Governance Is Critical To Cloud-Native Success

Forbes. 6 days ago

Kubernetes governance is an essential practice for enterprises to save themselves from potential... 

AWS adds bare metal support to EKS Anywhere

MSN News. 1 day ago

And throws some cold water on the 'K8s works best inside a VM' argument Amazon Web Services has made a small but important change to its EKS Anywhere on-prem Kubernetes offering ... 

Rafay Launches Paralus, an Open-Source Tool to Manage Secure Access to Kubernetes from Anywhere

WBTV Charlotte. 6 days ago

Paralus helps you achieve zero-trust access to Kubernetes clusters with zero frictionSUNNYVALE, Calif., June 28, 2022 /PRNewswire/ -- Rafay Systems, the leading platform provider ... 

Nearly a Million Kubernetes Instances Exposed on Internet | Linux Today

Linux Today. 4 days ago

Cybersecurity researchers have found more than 900,000 instances of Kubernetes consoles exposed on the internet. Learn more here. 

Codenotary introduces Software Bill of Materials service for Kubernetes

ZDNet. 6 days ago

To make that easier, Codenotary, a leading software supply chain security company, is launching its... 

...Management, Increase Developer Velocity With Integrated Kubernetes, And Extend On-Premises With...

TheStreet.com. 6 days ago

VMware, Inc. (NYSE: VMW) today unveiled VMware vSphere+ and VMware vSAN+ to help organizations bring the benefits of the cloud to their existing on-premises infrastructure with no disruption ... 

Rafay Systems launches new open-source Kubernetes project - SD Times

SD Times. 6 days ago

Rafay Systems launched a new open-source software project named Paralus to help keep users safe and applications secure on any Kubernetes environment for free. Paralus offers ... 

Tigera, Creator of Calico, Recognized as the Winner of 2022 Microsoft OSS on Azure Partner of the...

WBAY Green Bay. 6 days ago

Tigera, which provides the industry's only active Cloud-Native Application Protection Platform (CNAPP) with full-stack observability for containers, Kubernetes, and cloud, ... 

Codenotary First to Provide Continuously Updated and Fully Searchable Tamper-Proof Information about...

Morningstar. 6 days ago

Codenotary, leaders in software supply chain security, today launched SBOM Operator for Kubernetes in both its open source Community Attestation Service, as well as Codenotary ... 

Ads

related to: Kubernetes

Full Visibility, Total Control - Experience Advanced AI

www.cisco.com

If Your Future is in the Cloud, How Do You Get There? Learn How to Be Cloud Smart. Cisco(R) Intersight Simplifies IT Operations to Get More Value from Your Investments. 

24-Hour Tech Service . Global Market Leader . Red Dot Design Award 

Service catalog: Advisory Services, Deployment Services 

+ Free 45-Day Trial 
+ Cloud Operations Platform 

+ Hybrid Cloud Resource Kit 
+ Cisco(R) Intersight Demo 

Kubernetes on DigitalOcean(R) - Free Activation Credit

try.digitalocean.com/kubernetes

Get Industry Leading Price-to-Performance on Your Kubernetes Clusters With a Free Credit. Develop Rapidly With Easy Deployment, Release Updates, & Management of Your Apps. 


=======asdf69======== Q\Go K8s\$\2362acffb6cfe922e4705b5e390a4bd4.txt
https://www.docker.com/products/kubernetes/
TITLE: Kubernetes - Docker

Kubernetes is an open source orchestration system for automating the management, placement, scaling and routing of containers that has become popular with developers and IT operations teams in recent years. It was first developed by Google and contributed to Open Source in 2014, and is now maintained by the Cloud Native Computing Foundation. There is an active Kubernetes community and ecosystem developing around Kubernetes with thousands of contributors and dozens of certified partners.

Build Kubernetes-ready applications on your desktop

Docker Desktop is an application for MacOS and Windows machines for the building and sharing of containerized applications and microservices.

Docker Desktop delivers the speed, choice, and security you need for designing and delivering these containerized applications on your desktop. Docker Desktop includes Docker App, developer tools, Kubernetes, and version synchronization to production Docker Engines. Docker Desktop allows you to leverage certified images and templates and your choice of languages and tools. Development workflows leverage Docker Hub to extend your development environment to a secure repository for rapid auto-building, continuous integration, and secure collaboration.

Kubernetes Advantages

Why use Kubernetes?

Kubernetes has become the standard orchestration platform for containers. All the major cloud providers support it, making it the logical choice for organizations looking to move more applications to the cloud.

Kubernetes provides a common framework to run distributed systems so development teams have consistent, immutable infrastructure from development to production for every project. Kubernetes can manage scaling requirements, availability, failover, deployment patterns, and more.

Kubernetes' capabilities include:

+ Service and process definition 
+ Service discovery and load balancing 
+ Storage orchestration 
+ Container-level resource management 
+ Automated deployment and rollback 
+ Container health management 
+ Secrets and configuration management 

What are the advantages of Kubernetes?

Kubernetes has many powerful and advanced capabilities. For teams that have the skills and knowledge to get the most of it, Kubernetes delivers:

+ Availability. Kubernetes clustering has very high fault tolerance built-in, allowing for extremely large scale operations. 
+ Auto-scaling. Kubernetes can scale up and scale down based on traffic and server load automatically. 
+ Extensive Ecosystem. Kubernetes has a strong ecosystem around Container Networking Interface (CNI) and Container Storage Interface (CSI) and inbuilt logging and monitoring tools. 

However, Kubernetes' complexity is overwhelming for a lot of people jumping in for the first time. The primary early adopters of Kubernetes have been sophisticated, tribal sets of developers from larger scale organizations with a do-it-yourself culture and strong independent developer teams with the skills to "roll their own" Kubernetes. 

As the mainstream begins to look at adopting Kubernetes internally, this approach is often what is referenced in the broader community today. But this approach may not be right for every organization.

While Kubernetes has advanced capabilities, all that power comes with a price; jumping into the cockpit of a state-of-the-art jet puts a lot of power under you, but how to actually fly the thing is not obvious. 

Get Started with Docker

Docker Desktop

Developer productivity tools and a local Kubernetes environment

Download for Mac - Intel Chip 

Download for Mac - Intel Chip

Download for Mac - Apple Chip

Download for Windows

Download for Linux

Docker Hub

Cloud-based application registry and development team collaboration services.

Signup 

Play with Docker

Cloud-based docker environment to try out docker and learn the ropes.


=======asdf70======== Q\Go K8s\$\1e92df64ebd87bf783aa9ecfe278862e.txt
https://www.geeksforgeeks.org/hello-world-in-golang/

Hello, World! is the first basic program in any programming language. Let's write the first program in the Go Language using the following steps:

+ First of all open Go compiler. In Go language, the program is saved with .go extension and it is a UTF-8 text file.
+ Now, first add the package main in your program:

Every program must start with the package declaration. In Go language, packages are used to organize and reuse the code. In Go, there are two types of program available one is executable and another one is the library. The executable programs are those programs that we can run directly from the terminal and Libraries are the package of programs that we can reuse them in our program. Here, the package main tells the compiler that the package must compile in the executable program rather than a shared library. It is the starting point of the program and also contains the main function in it.
+ After adding main package import "fmt" package in your program:

import(
"fmt"
)

Here, import keyword is used to import packages in your program and fmt package is used to implement formatted Input/Output with functions.
+ Now write the code in the main function to print hello world in Go language:

func main() {
fmt.Println("!... Hello World ...!")
}

In the above lines of code we have:

+ func: It is used to create a function in Go language.
+ main: It is the main function in Go language, which doesn't contain the parameter, doesn't return anything, and call when you execute your program.
+ Println(): This method is present in fmt package and it is used to display "!... Hello World ...!" string. Here, Println means Print line.

// First Go program

fmt.Println("!... Hello World ...!")

!... Hello World ...!

How to run Golang Program?

To run a Go program you need a Go compiler. In Go compiler, first you create a program and save your program with extension .go, for example, first.go. Now we run this first.go file in the go compiler using the following command, i.e:

$ go run first.go

How to Install Golang on MacOS?

Identifiers in Go Language

Hello World Program : First program while learning Programming

25, Nov 19

How to convert a slice of bytes in uppercase in Golang?

Golang program that uses fallthrough keyword

18, Apr 20

math.Lgamma() Function in Golang with Examples

13, Apr 20

math.Float64bits() Function in Golang With Examples

How to check equality of slices of bytes in Golang?

21, Aug 19

atomic.AddInt64() Function in Golang With Examples

10, Mar 20

atomic.StoreInt64() Function in Golang With Examples

15, Mar 20

reflect.FieldByIndex() Function in Golang with Examples

strings.Contains Function in Golang with Examples

bits.Sub() Function in Golang with Examples

How to convert a slice of bytes in lowercase in Golang?

io.PipeWriter.CloseWithError() Function in Golang with Examples

Import in GoLang

20, Jul 20

time.Round() Function in Golang With Examples

06, Apr 20

How to add a method to struct type in Golang?

11, Jun 20

Converting a string variable into Boolean, Integer or Float type in Golang

Check if the given slice is sorted in Golang

26, Aug 19

How to compare times in Golang?

reflect.AppendSlice() Function in Golang with Examples

How to Deploy a Golang WebApp to Heroku?

28, Mar 22

reflect.ChanOf() Function in Golang with Examples

flag.Bool() Function in Golang With Examples

time.Sleep() Function in Golang With Examples

12, Mar 20

ankita_saini

@ankita_saini

Current difficulty : Basic

+ Go-Basics
+ Golang
+ Go Language

+ Different ways to concatenate two strings in Golang
+ time.Sleep() Function in Golang With Examples
+ strings.Replace() Function in Golang With Examples
+ strings.Contains Function in Golang with Examples
+ fmt.Sprintf() Function in Golang With Examples

+ Time Formatting in Golang
+ Golang Maps
+ Interfaces in Golang
+ How to convert a string in lower case in Golang?
+ Different Ways to Find the Type of Variable in Golang


=======asdf71======== Q\Go K8s\$\18c9c17ec5b3366cee1e76cd1691bf00.txt
https://www.baeldung.com/ops/kubernetes-kind
TITLE: Kubernetes with kind | Baeldung

When working with Kubernetes, we lack a tool that helps in local development - a tool that can run local Kubernetes clusters using Docker containers as nodes.

In this tutorial, we'll explore Kubernetes with kind. Primarily a testing tool for Kubernetes, kind is also handy for local development and CI.

2. Setup

As a prerequisite, we should make sure Docker is installed in our system. An easy way to install Docker is using the Docker Desktop appropriate for our operating system (and processor, in the case of macOS).

2.1. Install Kubernetes Command-Line

First, let's install the Kubernetes command-line, kubectl.On macOS, we can install it using Homebrew:

$ brew install kubectl

We can verify the successful installation by using the command:

$ kubectl version --client

Client Version: version.Info{Major:"1", Minor:"21", GitVersion:"v1.21.3", 
GitCommit:"ca643a4d1f7bfe34773c74f79527be4afd95bf39", GitTreeState:"clean", 
BuildDate:"2021-07-15T21:04:39Z", GoVersion:"go1.16.6", Compiler:"gc", Platform:"darwin/amd64"}

Similarly, we can use curl to download on Windows:

curl -LO https://dl.k8s.io/v1.21.0/bin/windows/amd64/kubectl.exe.sha256

Then, we should add the kubectl command's binary location to our PATH variable.

2.2. Install kind

Next, we'll install kind using Homebrew on macOS:

$ brew install kind

To verify the successful installation, we can try the command:

$ kind version
kind v0.11.1 go1.15.6 darwin/amd64

However, if the kind version command doesn't work, please add its location to the PATH variable.

Similarly, for the Windows operating system, we can download kind using curl:

curl -Lo kind-windows-amd64.exe https://kind.sigs.k8s.io/dl/v0.11.1/kind-windows-amd64
Move-Item .\kind-windows-amd64.exe c:\kind\kind.exe

3. Kubernetes Cluster

Now, we're all set to use kind to prepare the local development environment for Kubernetes.

3.1. Create Cluster

First, let's create a local Kubernetes cluster with the default configuration:

$ kind create cluster

By default, a cluster named kind will be created. However, we can provide a name to the cluster using the -name parameter:

$ kind create cluster --name baeldung-kind
Creating cluster "baeldung-kind" ...
^ Ensuring node image (kindest/node:v1.21.1) ^^ 
^ Preparing nodes ^^ 
^ Writing configuration ^^ 
^ Starting control-plane ^^^ 
^ Installing CNI ^^ 
^ Installing StorageClass ^^ 
Set kubectl context to "kind-baeldung-kind"
You can now use your cluster with:
kubectl cluster-info --context kind-baeldung-kind
Thanks for using kind! ^^

Also, we can use a YAML config file to configure the cluster. For instance, let's write a simplistic configuration in the baeldungConfig.yaml file:

kind: Cluster
apiVersion: kind.x-k8s.io/v1
name: baeldung-kind

Then, let's create the cluster using the configuration file:

$ kind create cluster --config baeldungConfig.yaml

Additionally, we can also provide a specific version of the Kubernetes image while creating a cluster:

$ kind create cluster --image kindest/node:v1.20.7

3.2. Get Cluster

Let's check the created cluster by using the get command:

$ kind get clusters
baeldung-kind

Also, we can confirm the corresponding docker container:

$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
612a98989e99 kindest/node:v1.21.1 "/usr/local/bin/entr..." 1 min ago Up 2 minutes 127.0.0.1:59489->6443/tcp baeldung-kind-control-plane

Or, we can confirm the nodes via kubectl:

$ kubectl get nodes
NAME STATUS ROLES AGE VERSION
baeldung-kind-control-plane Ready control-plane,master 41s v1.21.1

3.3. Cluster Details

Once a cluster is ready, we can check the details using the cluster-info command on kubectl:

$ kubectl cluster-info --context kind-baeldung-kind
Kubernetes master is running at https://127.0.0.1:59489
CoreDNS is running at https://127.0.0.1:59489/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

Also, we can use the dump parameter along with the cluster-info command to extract the detailed information about a cluster:

$ kubectl cluster-info dump --context kind-baeldung-kind

3.4. Delete Cluster

Similar to the get command, we can use the delete command to remove a specific cluster:

$ kind delete cluster --name baeldung-kind

4. Ingress Controller

4.1. Configure

We'll require an ingress controller to establish a connection between our local environment and the Kubernetes cluster.

Therefore, we can use kind's config options like extraPortMappings and node-labels:

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: baeldung-kind
nodes:
- role: control-plane
kubeadmConfigPatches:
- |
kind: InitConfiguration
nodeRegistration:
kubeletExtraArgs:
node-labels: "ingress-ready=true" 
extraPortMappings:
- containerPort: 80
hostPort: 80
protocol: TCP
- containerPort: 443
hostPort: 443
protocol: TCP

Here, we've updated our baeldungConfig.yaml file to set the configurations for the ingress controller, mapping the container port to the host port. Also, we enabled the node for the ingress by defining ingress-ready=true.

Then, we must recreate our cluster with the modified configuration:

kind create cluster --config baeldungConfig.yaml

4.2. Deploy

Then, we'll deploy the Kubernetes supported ingress NGINX controller to work as a reverse proxy and load balancer:

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

Additionally, we can also use AWS and GCE load balancer controllers.

5. Deploying a Service Locally

Finally, we're all set to deploy our service. For this tutorial, we can use a simple http-echo web server available as a docker image.

5.1. Configure

So, let's create a configuration file that defines the service and use ingress to host it locally:

kind: Pod
apiVersion: v1
metadata:
name: baeldung-app
labels:
app: baeldung-app
spec:
containers:
- name: baeldung-app
image: hashicorp/http-echo:0.2.3
args:
- "-text=Hello World! This is a Baeldung Kubernetes with kind App"
---
kind: Service
apiVersion: v1
metadata:
name: baeldung-service
spec:
selector:
app: baeldung-app
ports:
# Default port used by the image
- port: 5678
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
name: baeldung-ingress
spec:
rules:
- http:
paths:
- pathType: Prefix
path: "/baeldung"
backend:
service:
name: baeldung-service
port:
number: 5678
---

Here, we've created a pod named baeldung-app with the text argument and a service called baeldung-service.

Then, we set up ingress networking to the baeldung-service on the 5678 port and through the /baeldung URI.

5.2. Deploy

Now that we're ready with all the configuration and our cluster integrates with the ingress NGINX controller, let's deploy our service:

$ kubectl apply -f baeldung-service.yaml

We can check the status of the services on kubectl:

$ kubectl get services
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
baeldung-service ClusterIP 10.96.172.116 <none> 5678/TCP 5m38s
kubernetes ClusterIP 10.96.0.1 <none> 443/TCP 7m5s

That's it! Our service is deployed and should be available at localhost/baeldung:

$ curl localhost/baeldung
Hello World! This is a Baeldung Kubernetes with kind App

Note: if we encounter any error related to the validate.nginx.ingress.kubernetes.io webhook, we should delete the ValidationWebhookConfiguration:

$ kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission
validatingwebhookconfiguration.admissionregistration.k8s.io "ingress-nginx-admission" deleted

Then, deploy the service again.

6. Conclusion

In this article, we explored Kubernetes with kind.

First, we did a setup that includes installing Kubernetes command-line kubectl and kind. Then, we went through a few features of kind to create/update a Kubernetes local cluster.

Last, we integrated the ingress controller and deployed a privately accessible service on the Kubernetes cluster.


=======asdf72======== Q\Go K8s\$\026a90bfef72855ff20072d7a8dc21fa.txt
https://golangdocs.com/golang-web-application
TITLE: Golang Web Application - GoLang Docs

Today, we're looking at how you can build your first web application in Go, so open up your IDEs and let's get started.

GoLang Web App Basic Setup

We'll have to import net/http, and setup our main function with placeholders.

import (
"fmt"
"net/http"
)

func main() {
http.HandleFunc("/", indexPage)
http.ListenAndServe(":8000", nil)
}

http.HandleFunc is a function that handles the paths in a url. For example http://www.golangdocs.com/2020/08/23. 

+ Here, the index page is linked to the homepage of our site.
+ ListenAndServe listens to the port in the quotes, which is 8000. Once we run our web app, you can find it at localhost:8000.

Next, we need to configure the index page, so let's create that:

func indexPage(w http.ResponseWriter, r *http.Request) {
//do anything
}

Similar to if you've ever worked on Django, our function for index page takes input as a request to a url, and then responds with something. Replace the inside of the index_page function with anything of your choice (the w implies we want to write something), say,

fmt.Fprintf(w,"Hello, Gophers.")

Save this file as "webApp.go", and we can run the following command in the terminal:

go run webApp.go

The following page comes up at localhost:8000 -

Hello Gophers in Golang

ResponseWriter Output HTML too

With Golang ResponseWriter, it is possible to directly format the text using HTML tags.

fmt.Fprintf(
w,`<h1>Hello, Gophers</h1>
<p>You're learning about web development, so</p>
<p>you might want to learn about the common HTML tags</p>`
)

and that gives us the desired output:

Basic Webapp Golang

This is still just one page, but say you wanted to make your site so that it will not return an error when you type localhost:8000/something_else.

Let's code for that !

func indexPage(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Welcome to a page about ", r.URL.Path[1:])
}

WebApp Output 

Voila !

Gorilla Mux for ease of web app development

Let me introduce you to a package named Gorilla Mux, which will make your web development much easier. So first, let's install it using go get in the terminal.

go get github.com/gorilla/mux

We'll do a few changes to our above code and use gorilla mux router instance instead of our indexHandler:

import (
"net/http"
"github.com/gorilla/mux"
)

func main() {
r := mux.NewRouter()
r.HandleFunc("/", indexPage).Methods("GET")
http.Handle("/",r)
http.ListenAndServe(":8000", nil)
}

GoLang web application HTML templates

The hard coded design is quite plain and unimpressive. There is a method to rectify that - HTML templates. So let's create another folder called "templates", which will contain all the page designs.

We'll also add a new file here called "index.html", and add something simple:

<html>
<body>
<h1>First line</h1>
<h3>Second line</h2>
</body>
</html>

Let's switch back to our main .go file, and import our "html/template" package. Since our templates must be accessible from all handlers, let's convert it to a global object:

var templates *template.Template

Now we need to tell golang to parse our index.html for the template design and instantiate into our templates object:

templates = template.Must(templates.ParseGlob("templates/*.html"))

Then modify the indexPage handler to contain:

templates.ExecuteTemplate(w,"index.html",nil)

And now if we run it, we'll have exactly what we wanted.

Using Redis with Go web app

As a brief introduction to Redis, which we'll be using as our database, they describe themselves best:

Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. 

https://redis.io/

So first download and install Redis: https://redis.io/download

Import the go-redis package and declare a global object:

import ("github.com/go-redis/redis")
...
var client *redis.Client

Instantiate the redis client in main function:

client = redis.NewClient(&redis.Options{
Addr: "localhost:6379" //this is the default redis port.
})

and we need to grab some data from the redis server:

func indexPage(...){
comments,err := LRange("comments",0,20).Result()
if err!=nil{
return
}
templates.ExecuteTemplate(w,"index.html",comments)
}

and then render into the index.html file:

<html>
<head>
<title>
Comments
</title>
</head>
<body>
<h1>Comments</h1>
{{ range . }}
<div>{{ . }}</div>
{{ end }}
</body>
</html>

We're done configuring our html, which will take the elements from the comments array in our redis client, and place them in our web app.

So now we can open our command line and type in redis-cli to enter the redis shell, where we can push comments into the empty array:

Redis Server Pushing Comments To Golang Webapp

Then if we run our app, you can see that it is now fetching the comments from the server. It would be able to do the same for, say, an AWS server.

Comments From Redis Server

Ending Notes

Making a web application can take anywhere from a few days to a few months depending on the complexity of the application. For every button or functionality, there is help in the official Golang documentation, so definitely check that out.


=======asdf73======== Q\Go K8s\$\fa0a7fd09bf5a6d66df29efd24cf2e46.txt
https://www.mirantis.com/blog/kubernetes-cheat-sheet/
TITLE: Kubernetes Cheat Sheet| Mirantis

Often you know what you want to do, you just can't remember the vocabulary or syntax for how to do it. This Kubernetes cheat sheet is designed to help solve that problem. Kubernetes provides a way to orchestrate containers to provide a robust, cloud native environment. The architecture looks something like this: 

Kubernetes Terms 

Terms with which you should be familiar: 

+ Cluster - Group of physical or virtual servers wherein Kubernetes is installed 
+ Node (Master) - Physical or virtual server that controls the Kubernetes cluster 
+ Node (Worker) - Physical or virtual servers where workloads run in a given container technology 
+ Pods - Group of containers and volumes which share the same network namespace 
+ Labels - User defined Key:Value pair associated to Pods 
+ Master - Control plane components which provide access point for admins to manage cluster workloads 
+ Service - An abstraction which serves as a proxy for a group of Pods performing a "service" 

List of Kubernetes objects

Kubernetes enables you to control and orchestrate various types of objects, either by their full name or their "shortname". These objects include: Workloads 

+ Container 
+ CronJob / cronjobs / cj 
+ DaemonSet / daemonsets / ds 
+ Deployment / deployments / deploy 
+ Job / jobs 
+ Pod / pods / po 
+ ReplicaSet / replicasets / rs 
+ ReplicationController / replicationcontrollers / rc 
+ StatefulSet / statefulsets / sts 

Services 

+ Endpoints / endpoints / ep 
+ EndpointSlice / endpointslices 
+ Ingress / ingresses / ing 
+ IngressClass / ingressclasses 
+ Service / services / svc 

Config & Storage 

+ ConfigMap / configmaps / cm 
+ CSIDriver / csidrivers 
+ CSINode / csinodes 
+ Secret / secrets 
+ PersistentVolumeClaim / persistentvolumeclaims / pvc 
+ StorageClass / storageclasses / sc 
+ CSIStorageCapacity 
+ Volume 
+ VolumeAttachment / volumeattachments 

Clusters 

+ APIService / apiservices 
+ Binding / bindings 
+ CertificateSigningRequest / certificatesigningrequests / csr 
+ ClusterRole / clusterroles 
+ ClusterRoleBinding / clusterrolebindings 
+ ComponentStatus / componentstatuses/cs 
+ FlowSchema / flowschemas 
+ Lease / leases 
+ LocalSubjectAccessReview / localsubjectaccessreviews 
+ Namespace / namespaces/ns 
+ NetworkPolicy / networkpolicies / netpol 
+ Node / nodes / no 
+ PersistentVolume / persistentvolumes / pv 
+ PriorityLevelConfiguration / prioritylevelconfigurations 
+ ResourceQuota / resourcequotas / quota 
+ Role / roles 
+ RoleBinding / rolebindings 
+ RuntimeClass / runtimeclasses 
+ SelfSubjectAccessReview / selfsubjectaccessreviews 
+ SelfSubjectRulesReview / selfsubjectrulesreviews 
+ ServiceAccount / serviceaccounts / sa 
+ StorageVersion 
+ SubjectAccessReview / subjectaccessreviews 
+ TokenRequest 
+ TokenReview / tokenreviews 

Metadata 

+ ControllerRevision / controllerrevisions 
+ CustomResourceDefinition / customresourcedefinitions / crd,crds 
+ Event / events / ev 
+ LimitRange / limitranges / limits 
+ HorizontalPodAutoscaler / horizontalpodautoscalers / hpa 
+ MutatingWebhookConfiguration / mutatingwebhookconfigurations 
+ ValidatingWebhookConfiguration / validatingwebhookconfigurations 
+ PodTemplate / podtemplates 
+ PodDisruptionBudget / poddisruptionbudgets / pdb 
+ PriorityClass / priorityclasses / pc 
+ PodSecurityPolicy / podsecuritypolicies / psp 

In general, any of these commands will work with any of these objects. So rather than: 

kubectl get pods

You can use: 

kubectl get deployments

Now let's look at getting started.

Get Started 

Setting up a Kubernetes environment is straightforward. 

Setup Kubernetes with k0s

There are many ways to create a Kubernetes cluster; in this case we are assuming you are using k0s with a single-node configuration. The minimum requirements for this install are: 

+ 1 vCPU (2 vCPU recommended) 
+ 1 GB of RAM (2 GB recommended) 
+ 1.7 GB of free disk space 

To actually perform the installation, perform these steps on a Linux host: 

sudo curl -sSLf k0s.sh | sudo sh
sudo k0s install controller
sudo systemctl start k0scontroller
sudo systemctl enable k0scontroller
mkdir ~/Documents
sudo cp /var/lib/k0s/pki/admin.conf ~/Documents/kubeconfig.cfg
sudo chown $USER ~/Documents/kubeconfig.cfg
export set KUBECONFIG=~/Documents/kubeconfig.cfg

For more information on installing k0s, including making your clusters available from other machines, see this guide to getting started with k0s. 

Install kubectl

You can get kubectl, the standard Kubernetes client, in multiple ways. 

Use the k0s kubectl instance

The k0s install comes with its own installation of kubectl, so no installation is required, You would simply add "k0s" to the head of each command, as in: 

k0s kubectl get nodes

Install kubectl manually

Installing kubectl on Linux is a simple matter of downloading the binary and adding it to your path: 

curl -LO "https://dl.k8s.io/release/$(curl -L -s >https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

For more information on installing kubectl or for instructions for other operating systems, see the kubectl documentation. 

Install Lens Kubernetes IDE

The easiest way to get access to kubectl is to install Lens, which includes kubectl. It also, however, provides alternative ways to accomplish most of these tasks without actually using kubectl. You can download and install Lens here, then use the kubectl tool from the terminal. [youtubevideo url="https://youtu.be/cSfrjKnjPEY"] Description: Showcasing how you can access the terminal via Lens IDE 

Managing Kubernetes resources

Now that you have your software, we can look at actual tasks. 

Start a single instance of a pod

kubectl run mywebserver --image=nginx

Create a resource from the command line: 

kubectl create deployment myotherwebserver --image=nginx

Accessing the terminal via the Lens IDE and creating a resource via terminal:

[youtubevideo url="https://youtu.be/zitzZfJ8fhI"] Create resource(s) such as pods, services or daemonsets from a YAML definition file: 

kubectl create -f ./my-manifest.yaml

Note that the file itself has a format such as: 

---
apiVersion: v1
kind: Pod
metadata:
name: rss-site
labels:
app: web
spec:
containers:
- name: front-end
image: nginx
ports:
- containerPort: 80
- name: rss-reader
image: nickchase/rss-php-nginx:v1
ports:
- containerPort: 88

For more information on creating YAML documents, see this Introduction to YAML. 

Create or apply changes to a resource 

kubectl apply -f ./my-manifest.yaml

Leveraging Lens IDE, Clicking into a pod and making configuration changes to a pod:

[youtubevideo url="https://youtu.be/CTIiPQXQ2dc"] 

Delete a resource via Lens

kubectl delete -f ./my-manifest.yaml

Leveraging Lens IDE, viewing a pod and deleting the pod via Lens

[youtubevideo url="https://youtu.be/hg5NORTE6pE"] 

Scale a resource

kubectl scale --replicas=3 deployment.apps/myotherwebserver

or 

kubectl scale --replicas=3 -f my-manifest.yaml

Viewing a dployment and leveraging Kubernetes and the Lens IDE UI to scale that deployment:

[youtubevideo url="https://youtu.be/LL4-UeZYbaE"] 

Connect to a running container

kubectl attach mywebserver -c mynginx -i

Accessing Lens IDE terminal to connect to a running container:

[youtubevideo url="https://youtu.be/lbBnLqOadRQ"] 

Run a command in a single container pod

kubectl exec mywebserver -- /home/user/myscript.sh

Delete a resource 

kubectl delete pod/mywebserver

or 

kubectl delete -f ./my-manifest.yaml

Accessing a pod via Lens IDE and deleting the pod via the User Interface:

[youtubevideo url="https://youtu.be/hg5NORTE6pE"] 

Viewing resources

Once you have all of these objects, you'll need a way to see what's going on. 

View the cluster and client configuration

kubectl config view

Accessing terminal via Lens IDE to view the config:

[youtubevideo url="https://youtu.be/3-ypRnsx_nk"] 

List all resources in the default namespace 

kubectl get services

Filtering resources through namespaces via Lens IDE

[youtubevideo url="https://youtu.be/BY3pnJhmmY8"] 

List all resources in a specific namespace 

kubectl get pods -n my-app

Filtering resources through namespaces via Lens IDE

[youtubevideo url="https://youtu.be/73URu4SK2fs"] 

List all resources in all namespaces in wide format 

kubectl get pods -o wide --all-namespaces

Opening Lens IDE terminal to list all resources in all namespaces in wide format:

[youtubevideo url="https://youtu.be/Af4IS7y5F9Y"] 

List all resources in json (or yaml) format 

kubectl get pods -o json

Opening terminal via lens IDE and viewing all resources in JSON format:

[youtubevideo url="https://youtu.be/IxmhJ51kGco"] 

Describe resource details 

kubectl describe pods
kubectl describe pod mywebserver

Opening terminal via Lens IDE and running a command to describe pods within your cluster

[youtubevideo url="https://youtu.be/qc9Ngq2eGrA"] 

Get documentation for a resource 

kubectl explain pods 
kubectl explain pod mywebserver

Opening terminal via Lens IDE and reviewing documentation for a specific resource, ex. Pods:

[youtubevideo url="https://youtu.be/wAtSZvXWxj8"] 

List of resources sorted by name 

kubectl get services --sort-by=.metadata.name

Opening terminal via Lens IDE and listing resources by name

[youtubevideo url="https://youtu.be/VqgbudhR7aw"] 

List resources sorted by restart count 

kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

Opening terminal viaLens IDE to view resources sorted by "Restart count"

[youtubevideo url="https://youtu.be/3lHQNBoqOL8"] 

Rolling update pods for resource

kubectl rolling-update echoserver -f my-manifest.yaml

Networking

Kubernetes networking is an entire topic on its own, but here are a few commands that come in handy when building and accessing applications. 

Types of services

First, it's important to understand (and remember) the different types of services, because each has a different set of behaviors. 

+ ClusterIP is the default ServiceType, ClusterIP services have a cluster-internal IP address, so they can only be reached by other cluster components. 
+ NodePort enables you to create a service that's available from outside the cluster by exposing the service on the same port for every node. For example, the same service might be available on host1.example.com:32768, host2.example.com:32768, and host3.example.com:32768. 
+ LoadBalancer requires coordination with your cloud provider's load balancer, which automatically routes requests to the service. For this reason, not all distributions of Kubernetes will support LoadBalancer services. 
+ ExternalName is the most complex ServiceType, coordinating the service with your DNS server. 

Port vs targetport

One aspect of Kubernetes networking that frequently gets confusing is the notion of port versus targetPort. Here's the difference: 

+ port: the port receiving the request 
+ targetPort: the container port receiving the request 

Think of the request like an arrow flying into a container. Here are come commands that reference ports (and targetPorts): 

Port forwarding from port 5000 to targetPort 6000

kubectl port-forward mywebserver 5000:6000
kubectl port-forward svc/my-service 5000:6000
kubectl port-forward deploy/my-deployment 5000:6000

Create a service that directs requests on port 80 to container port 8000

kubectl expose deployment nginx --port=80 --target-port=8000 --type=LoadBalancer

Logs

Finally, you need to know what's going on inside your application. 

Dump resource logs to stdout 

kubectl logs myotherwebserver-8458cdb575-s6cp4

Stream logs for a specific container within a pod

kubectl logs -f mywebserver -c mynginx

Leveraging Lens UI to view pod logs without writing any command line:

[youtubevideo url="https://youtu.be/1P1ezLf88uQ"] 

Learn Containers 5 Minutes at a Time

An introductory guide for developers

Download Now

More from Mirantis

Technical training

Learn Kubernetes & OpenStack from Deployment Experts

Prep for certification! 

View schedule

WHITEPAPER

The Definitive Guide to Container Platforms

READ IT NOW

Mirantis Webstore

Purchase Kubernetes support

SHOP NOW

Not sure where to start or want to engage with a Mirantis Training specialist? Contact Us

900 E Hamilton Avenue
Suite 650
Campbell, CA 95008
+1-650-963-9828 

Privacy Policy

+ Mirantis Flow 
+ Mirantis Container Cloud 
+ Mirantis Kubernetes Engine 
+ Mirantis Secure Registry 
+ Mirantis Container Runtime 
+ Mirantis OpenStack for Kubernetes

+ Login to Support 
+ What Is Kubernetes? 
+ What is the Software Defined Data Center? 
+ Getting Started: k0s 
+ Getting Started: Lens 
+ Training

+ Contact 
+ Careers 
+ Company 
+ Locations 
+ Meet the Team

(c) 2005 - 2022 Mirantis, Inc. All rights reserved. "Mirantis" and "FUEL" are registered trademarks of Mirantis, Inc. All other trademarks are the property of their respective owners.


=======asdf74======== Q\Go K8s\$\f20b23a020101dce47ddb1e38b5c7a41.txt
https://go.dev/
TITLE: The Go Programming Language

The go command by default downloads and authenticates modules using the Go module mirror and Go checksum database run by Google. Learn more. 

Companies using Go

Organizations in every industry use Go to power their software and services View all stories 

View case study

View case study

View case study

View case study

+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 

"At the time, no single team member knew Go, but within a month, everyone was writing in Go and we were building out the endpoints. It was the flexibility, how easy it was to use, and the really cool concept behind Go (how Go handles native concurrency, garbage collection, and of course safety+speed.) that helped engage us during the build. Also, who can beat that cute mascot!"

- Jaime Enrique Garcia Lopez, Senior Software Development Manager at Capital One 

"A small language that compiles fast makes for a happy developer. The Go language is small, compiles really fast, and as a result it lets your mind focus on the actual problem and less on the tool you are using to solve it. Code, test, debug cycles are so quick that you forget you are not working with an interpreted language. Looking at our code, you see less boilerplate and more business logic."

- Clayton Coleman, Lead Engineer, Open Shift at RedHat 

"Go has excellent characteristics for scalability and services written using it typically have very small memory footprints. Because code is compiled into a single static binary, services can also be containerised with ease, making it much simpler to build and deploy. These attributes make Go an ideal choice for companies building microservices, as you can easily deploy into a highly available and scalable environment such as Kubernetes."

- Matt Boyle, Lead Software Engineer at Curve 

"In our tightly managed environments where we run Go code, we have seen a CPU reduction of approximately 10% with cleaner and maintainable code."

- Bala Natarajan, Sr. Director of Engineering, Developer Experience at PayPal 

"Tooling has always been a problem with our legacy code base... but we have found that Go has excellent tooling, plus built-in testing, benchmarking, and profiling frameworks. It is easy to write efficient and resilient applications. After working on Go, most of our developers don't want to go back to other languages."

- Benjamin Cane, Vice President and Principal Engineer at American Express 

"...when a programming language is designed for exactly the environment most of us use right now-scalable, cloud-based servers that are optimized for performance-a lot can go right."

- John Biggs and Ben Popper, at Stack Overflow 

navigate_before navigate_next 

Try Go

// You can edit this code! // Click here and start typing. package main import "fmt" func main() { fmt.Println("Hello, ^^") } 

Hello, ^^

Hello, World! Conway's Game of Life Fibonacci Closure Peano Integers Concurrent pi Concurrent Prime Sieve Peg Solitaire Solver Tree Comparison 

Run 

Share Tour 

What's possible with Go

Use Go for a variety of software development purposes 

Cloud & Network Services

With a strong ecosystem of tools and APIs on major cloud providers, it is easier than ever to build services with Go. 

Popular Packages: 

+ cloud.google.com/go 
+ aws/client 
+ Azure/azure-sdk-for-go 

Learn More arrow_forward 

Command-line Interfaces

With popular open source packages and a robust standard library, use Go to create fast and elegant CLIs. 

Popular Packages: 

+ spf13/cobra 
+ spf13/viper 
+ urfave/cli 
+ delve 
+ chzyer/readline 

Learn More arrow_forward 

Web Development

With enhanced memory performance and support for several IDEs, Go powers fast and scalable web applications. 

Popular Packages: 

+ net/http 
+ html/template 
+ flosch/pongo2 
+ database/sql 
+ olivere/elastic 

Learn More arrow_forward 

DevOps & Site Reliability

With fast build times, lean syntax, an automatic formatter and doc generator, Go is built to support both DevOps and SRE. 

Popular Packages: 

+ opentracing/opentracing-go 
+ istio/istio 
+ urfave/cli 

Learn More arrow_forward 

More use cases arrow_forward 

GoTalks 05.07.2022 

Jul 5, 2022 | Zagreb, Croatia

TBD 

Jul 5, 2022 | Lehi, UT USA

Event driven stateful functions with Apache Flink and Golang 

Jul 6, 2022 | Torino, TO Italy

Book Club > Get Programming With Go 

Jul 6, 2022 | Eugene, OR USA

GoWroc #42 

Jul 7, 2022 | Wroclaw, Poland

Time to Golang again! 

Jul 7, 2022 | Montreal, QC Canada

July Meetup [Online] 

Jul 9, 2022 | Chennai, India

Go Israel July Event 

Jul 13, 2022 | Tel Aviv-Yafo, Israel

Meetup Golang Roma - "Kubernetes async deployment con NATS" 

Jul 13, 2022 | Roma, RM Italy

Manchester Go meetup 

Jul 13, 2022 | Manchester, United Kingdom

Online Go Coffee! 

Jul 13, 2022 | Seattle, WA USA

Leipzig Golang Drinkup #29 

Jul 14, 2022 | Leipzig, Germany

Golang Dorset Monthly Meetup 

Jul 18, 2022 | Bournemouth, United Kingdom

We're Back 

Jul 19, 2022 | Brisbane, Australia

Go(ne online) - Fyne 

Jul 20, 2022 | Bristol, United Kingdom

navigate_before navigate_next 

Get started with Go

Explore a wealth of learning resources, including guided journeys, courses, books, and more. 

Get Started Download Go 

+ Resources to start on your own 
+ Guided learning journeys 

Step-by-step tutorials to get your feet wet 

+ Online learning 

Browse resources and learn at your own pace 

+ Featured books 

Read through structured chapters and theories 

+ Cloud Self-paced labs 

Jump in to deploying Go apps on GCP 

+ In-Person Trainings 
+ Ardan Labs 

Offering customized on-site live training classes. 

+ Gopher Guides 

Customized In-person, remote, and online training classes. Training for Developers by Developers. 


=======asdf75======== Q\Go K8s\$\85959e00b9cb8eac54f111ae17beed13.txt
https://www.statista.com/topics/8409/kubernetes/
TITLE: Kubernetes - Statistics & Facts | Statista

+ Customized infographic service
+ Presentation Design
+ Animated videos
+ Whitepapers, E-Books, etc.

More Information 

eCommerceDB.com 

KPIs for more than 20,000 online stores 

+ Rankings by country
+ Rankings by category

Go to database 

+ Global Survey 

+ Prices & Access

+ Single Accounts
+ Corporate Solutions
+ Universities

+ Statistics

+ Popular Statistics
+ Topics
+ Markets

+ Reports
+ Outlooks
+ Company DB
+ Infographics
+ Services

+ Content & Information Design
+ Research projects
+ Ask Statista
+ Business Plan Export
+ Publication Finder
+ Statista R

+ Global Consumer Survey

+ DE
+ ES
+ FR

+ Technology & Telecommunications>
+ Software

Kubernetes - Statistics & Facts

+ Overview
+ Key figures
+ Statistics

Published by 

Lionel Sujay Vailshery, 

Feb 7, 2022

Kubernetes, also known as K8s, is an open-source orchestration platform used to manage container technology across cloud environments. Initially released in 2014, the platform evolved from Google's code used to manage its data centers and was later donated to the Cloud Native Computing Foundation. Since then, the open-source project has been supported by a community of professional programmers and coders from around the world. As a result, Kubernetes emerged as the leading container orchestration platform. Accordingly, almost 50 percent of organizations have adopted Kubernetes already in 2021. 

Kubernetes features

Kubernetes enables organizations to automate deployment and manage a container's lifecycle. In other words, Kubernetes' core capabilities allow developers to create and monitor containers across clusters, making sure that each container is where it is supposed to be and working together with other containers. In this way, Kubernetes is automating many of the inefficiencies and repetitions inherent in app development. 

On a broader level, Kubernetes is used for cloud web hosting, high-performance computing (HPC), data center outsourcing, or software as a service (SaaS) support. This points at the reasons for using Kubernetes in the first place, among which are faster software shipment and an increase in revenue. Given its capability to manage microservice architecture, it is not surprising that respondents also indicate Kubernetes' importance for their cloud native application strategy. 

Kubernetes outlook

With investments being directed towards Kubernetes, organizations seek to master the technology to take advantage of its benefits. Notably, the major cloud providers already offer fully managed Kubernetes services do drive adoption and help businesses overcome some of the remaining challenges. Unsurprisingly, Amazon Web Services (AWS), Microsoft Azure, Google Cloud, and VMware take up a sizeable share of environments on which Kubernetes clusters are run in 2021, leaving other contenders in the market behind. 

This text provides general information. Statista assumes no liability for the information given being complete or correct. Due to varying update cycles, statistics can display more up-to-date data than referenced in the text. 

Interesting statistics

In the following 5 chapters, you will quickly find the 26 most important statistics relating to "Kubernetes".

Statistics on the topic

+ Overview
+ Kubernetes usage
+ Kubernetes challenges
+ Platforms & providers
+ Resource allocation & spending

Share of container platforms run on public cloud 2021 

56% 

Kubernetes container technology market share 2021 

5.49% 

Container management software and services revenue 2024 

944m USD 

Public cloud services market size 2017-2023

Global cloud spending growth in IT vertical 2020, by segment

Global enterprise container technology adoption phase 2020, by region

Organizations' container platform infrastructure worldwide 2019-2021, by type

Market share of leading containerization technologies worldwide 2021

Container management market size globally 2020 and 2024

Show all statistics (6) 

Kubernetes usage

Global importance of Kubernetes to cloud native application strategy 2020, by region

Kubernetes adoption level in organizations worldwide 2021

Organizational investments in container platforms worldwide 2021

Primary reasons for using Kubernetes in organizations worldwide 2021

Global Kubernetes security capabilities level of importance 2021, by category

Show all statistics (5) 

Kubernetes challenges

Kubernetes leading challenges for businesses worldwide 2021

Primary challenges for using Kubernetes in organizations worldwide 2021

Global challenges of observability platforms for Kubernetes container technology 2021

Global security incidents experienced related to containers and/or Kubernetes 2021

Kubernetes challenges for development teams Europe and United States 2021

Show all statistics (5) 

Platforms & providers

Most popular environments for running Kubernetes clusters worldwide 2021

Primary Kubernetes platform usage worldwide 2021, by provider

Global usage of observability platforms for Kubernetes container technology 2021

Solutions for hybrid- and multicloud Kubernetes deployments worldwide 2021

Global public cloud provider developer-friendly environment for Kubernetes 2021

Global public cloud provider reliability for running Kubernetes 2021, by provider

Show all statistics (6) 

Resource allocation & spending

Share of global Kubernetes spending 2021, by category

Global Kubernetes spending per month 2021, by spending category

Organizations' Kubernetes resource allocation decision maker North America 2021

Organizations' Kubernetes resource allocation decision methods North America 2021

Show all statistics (4) 

Lionel Sujay Vailshery 

Research expert covering the consumer electronics industry 

Get in touch with us now

Contact

Get in touch with us. We are happy to help.

Clicking on the following button will update the content below. us Clicking on the following button will update the content below. sg Clicking on the following button will update the content below. jp Clicking on the following button will update the content below. eu Clicking on the following button will update the content below. lac

Vianny Gutierrez-Cruz

Sales Manager- Contact (United States)

support@statista.com

Tel

+1 212 419-8294

Mon - Fri, 9am - 6pm (EST)

Ziyan Zhang

Customer Relations- Contact (Asia)

asia.support@statista.com

Tel

+65 6995 6959

Mon - Fri, 11:30am - 10pm (IST)

Kisara Mizuno

Customer Success Manager- Contact (Asia)

support.japan@statista.com

Tel

+81 3 6427 6800

Mon - Fri, 9:30am - 5:30pm (JST)

Lodovica Biagi

Director of Operations- Contact (Europe)

eu.support@statista.com

Tel

+44 (0)20 8189 7000

Mon - Fri, 9:30am - 5pm (GMT)

Carolina Dulin

Associate Director - LAC- Contact (Latin America)

support@statista.com

Tel

+1 212 419-5774

Mon - Fri, 9am - 6pm (EST)

Yes, let me download!


=======asdf76======== Q\Go K8s\$\54e156351f0e72ee8259f7bb640ae83e.txt
https://www.w3schools.com/go/index.php
TITLE: Go Tutorial

Go is a popular programming language.

Go is used to create computer programs.

Start learning Go now " 

Examples in Each Chapter

Our "Try it Yourself" editor makes it easy to learn Go. You can edit Go code and view the result in your browser.

Example

package main
import ("fmt")

func main() {
fmt.Println("Hello World!")
}

Try it Yourself " 

Click on the "Try it Yourself" button to see how it works.

Go Exercises

Test Yourself With Exercises

Exercise:

Insert the missing part of the code below to output "Hello World".

package main 
import ("fmt")

func main() { 
("Hello World!")
}

Submit Answer " 

Start the Exercise

^ Home Next ^ 

NEW 

We just launched
W3Schools videos

Explore now 

COLOR PICKER

Get certified
by completing
a course today!

Get started 

CODE GAME

Play Game 

Report Error 

Forum 

About 

Buy Certificate 

Report Error

If you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail:

help@w3schools.com

Thank You For Helping Us!

Your message has been sent to W3Schools.

Top Tutorials

HTML Tutorial
CSS Tutorial
JavaScript Tutorial
How To Tutorial
SQL Tutorial
Python Tutorial
W3.CSS Tutorial
Bootstrap Tutorial
PHP Tutorial
Java Tutorial
C++ Tutorial
jQuery Tutorial

Top References

HTML Reference
CSS Reference
JavaScript Reference
SQL Reference
Python Reference
W3.CSS Reference
Bootstrap Reference
PHP Reference
HTML Colors
Java Reference
Angular Reference
jQuery Reference

Top Examples

HTML Examples
CSS Examples
JavaScript Examples
How To Examples
SQL Examples
Python Examples
W3.CSS Examples
Bootstrap Examples
PHP Examples
Java Examples
XML Examples
jQuery Examples

Web Courses

HTML Course
CSS Course
JavaScript Course
Front End Course
SQL Course
Python Course
PHP Course
jQuery Course
Java Course
C++ Course
C# Course
XML Course
Get Certified " 

W3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning. Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.

Copyright 1999-2022 by Refsnes Data. All Rights Reserved.
W3Schools is Powered by W3.CSS.


=======asdf77======== Q\Go K8s\$\5871cdf1111c226c6271bf1252a4d191.txt
https://www.cncf.io/projects/kubernetes/
TITLE: Kubernetes | Cloud Native Computing Foundation

Find out how we use cookies and how to change your settings.

Accept 

Skip to content Accessibility help 

+ About 

+ Discover CNCF 
+ Who We AreCNCF is the vendor-neutral hub of cloud native computing, dedicated to making cloud native ubiquitous 
+ MembersFrom tech icons to innovative startups, meet our members driving cloud native computing 
+ Technical Oversight CommitteeThe TOC defines CNCF's technical vision and provides experienced technical leadership to the cloud native community 
+ Governing BoardThe GB is responsible for marketing, business oversight, and budget decisions for CNCF 
+ AmbassadorsMeet our Ambassadors-experienced practitioners passionate about helping others learn about cloud native technologies 

+ Additional Info 
+ Code of Conduct 
+ Staff 
+ FAQ 
+ Contact Us 

+ Featured Reads 

Annual Report Kubernetes Annual Report 2021 June 1, 2022 

Survey Report CNCF Annual Survey 2021 February 10, 2022 

SEP 19-21 | MOUNTAIN VIEW, CA Register Now 

+ Projects 

+ CNCF Projects 
+ GraduatedProjects considered stable, widely adopted, and production ready, attracting thousands of contributors 
+ IncubatingProjects used successfully in production by a small number users with a healthy pool of contributors 
+ SandboxExperimental projects not yet widely tested in production on the bleeding edge of technology 
+ ArchivedProjects that have reached the end of their lifecycle and have become inactive 

+ Get Involved 
+ ContributeJoin the 150K+ folx in #TeamCloudNative who've contributed their expertise to CNCF hosted projects 
+ Services for CNCF ProjectsCNCF services for our open source projects - from marketing to legal services 
+ Cloud Native LandscapeA comprehensive categorical overview of projects and product offerings in the cloud native space 
+ Project Journey ReportsShowing how CNCF has impacted the progress and growth of various graduated projects 
+ Project ToolsQuick links to tools and resources for your CNCF project 

+ Latest Tech Radars 

Tech Radar DevSecOps September 2021 

Tech Radar Multicluster Management June 2021 

Tech Radar Secret Management February 2021 

+ Training 

+ Get Certified 
+ CKACertified Kubernetes Administrator 
+ CKADCertified Kubernetes Application Developer 
+ CKSCertified Kubernetes Security Specialist 
+ KCNAKubernetes and Cloud Native Associate 
+ PCA (Beta)Prometheus Certified Associate 
+ CoursesTraining courses for cloud native certifications 

+ Partner Support 
+ Certified KubernetesSoftware conformance ensures your versions of CNCF projects support the required APIs 
+ Kubernetes Training PartnersFind a qualified KTP to prepare for your next certification 
+ Kubernetes Certified Service ProviderKCSPs have deep experience helping enterprises successfully adopt cloud native technologies 
+ Cloud Native Network Function Certification (Beta)CNF Certification ensures applications demonstrate cloud native best practices 

+ Recommended Links 

Save $10K on Cloud Native 

Enroll your company as a CNCF End User and save more than $10K in training and conference costs

Become an End User

+ Community 

+ Take Part 
+ End User CommunityJoin our vendor-neutral community using cloud native technologies to build products and services 
+ Events We'll Be AtMeet #TeamCloudNative and CNCF staff at events around the world 
+ Case StudiesRead real-world case studies about the impact cloud native projects are having on organizations around the world 
+ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
+ Humans of Cloud NativeRead stories of amazing individuals and their contributions 

+ Community Content 
+ Online ProgramsWatch our free online programs for the latest insights into cloud native technologies and projects 
+ KubeWeeklySign up for a weekly dose of all things Kubernetes, curated by #TeamCloudNative 
+ Community GroupsJoin #TeamCloudNative at events and meetups near you 
+ Phippy and FriendsPhippy explains core cloud native concepts in simple terms through stories perfect for all ages 
+ Cloud Native GlossaryExplore cloud native concepts in clear and simple language - no technical knowledge required! 

+ Additional Resources 
+ Job Board 
+ Slack 
+ Mailing Lists 
+ Store 
+ Calendar 

+ Blog & News 

+ All the news 
+ BlogCatch up on the latest happenings and technical insights from #TeamCloudNative 
+ AnnouncementsMedia releases and official CNCF announcements 
+ NewsCNCF projects and #TeamCloudNative in the media 
+ ReportsRead transparent, in-depth reports on our organization, events, and projects 

+ Media Resources 
+ Project Logos 
+ Videos 
+ Pictures 

+ Latest Blog Posts 

Staff Post CubeFS accepted as a CNCF Incubating project July 3, 2022 

New Gold Member, OPPO Joins the Cloud Native Computing Foundation July 3, 2022 

Project Post LitmusChaos at KubeCon EU 2022 July 1, 2022 

Join 

Search CNCF </form> 

Projects 

Kubernetes 

Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications 

Kubernetes was accepted to CNCF on March 16, 2016 and is at the Graduated project maturity level. 

Visit Project Website

Kubernetes case studies

Related Case Studies

PNC Bank

20,000 code repos kept compliant

June 13, 2022 

How PNC Bank automated software supply chain compliance with TriggerMesh.

Read Case Study 

Finleap Connect

5 Months Implemented mTLS across all services in clusters for code to comply with European PSD2

June 7, 2022 

Operating multiple high-density bare-metal clusters in a highly regulated industry

Read Case Study 

Recorded Kubernetes programs

See more recordings

CNCF On-Demand Webinar: A step by step guide to platforming your delivery setup

June 16, 2022 689 views 

CNCF On-Demand Webinar: Kanister: Application-Level Data Protection on Kubernetes

Presented by: Kasten 

June 16, 2022 926 views 

Cloud Native Live: Using Calico (eBPF, Linux, Windows) on Azure and AKS

Presented by: Tigera 

June 15, 2022 906 views 

Recent Kubernetes news

See all news

CubeFS accepted as a CNCF Incubating project

July 3, 2022 

New Gold Member, OPPO Joins the Cloud Native Computing Foundation 

July 3, 2022 

DevOps vs. SRE vs. Platform Engineering? The gaps might be smaller than you think

July 1, 2022 

Latest tweets from Kubernetes

See all tweets

Kubernetes Follow 2,342 281,017 

14 Jun 1536708032339423232 

"#Kubernetes 1.24: Maximum Unavailable Replicas for StatefulSet" via @krmayank on the blog ^ https://t.co/mKymZqzLF2 

Twitter feed image. 

Reply on Twitter 1536708032339423232 Retweet on Twitter 1536708032339423232 29 Like on Twitter 1536708032339423232 58 

13 Jun 1536360492549160960 

The Structured Logging WG has added new capabilities to the logging infrastructure in #K8s 1.24. 

^^ Patrick Ohly explains how devs can take advantage of those to make log output more useful and how they can get involved with improving Kubernetes. 

Contextual Logging in Kubernetes 1.24

Authors: Patrick Ohly (Intel) The Structured Logging Working Group has added new capabilities to the logging infrastru...

Reply on Twitter 1536360492549160960 Retweet on Twitter 1536360492549160960 19 Like on Twitter 1536360492549160960 57 

10 Jun 1535257726032302081 

#Kubernetes 1.24 ^^ Learn how to avoid collisions assigning IP addresses to services ^^ https://t.co/w83DhBXztp 

Twitter feed image. 

Reply on Twitter 1535257726032302081 Retweet on Twitter 1535257726032302081 43 Like on Twitter 1535257726032302081 120 

8 Jun 1534396299826429952 

"Kubernetes 1.24: Introducing Non-Graceful Node Shutdown Alpha" via @2000Xyang + @yassinetj 

^^^^ 

Kubernetes 1.24: Introducing Non-Graceful Node Shutdown Alpha

Authors Xing Yang and Yassine Tijani (VMware) Kubernetes v1.24 introduces alpha support for Non-Graceful Node Shutdown. ...

Reply on Twitter 1534396299826429952 Retweet on Twitter 1534396299826429952 21 Like on Twitter 1534396299826429952 58 

6 Jun 1533832082241331204 

#Kubernetes v1.24 has introduced a new alpha-level feature that prevents unauthorized users from modifying the volume mode of a #PersistentVolumeClaim created from an existing VolumeSnapshot in the #Kubernetes cluster.

Check out more the blog! 

Kubernetes 1.24: Prevent unauthorised volume mode conversion

Author: Raunak Pradip Shah (Mirantis) Kubernetes v1.24 introduces a new alpha-level feature that prevents unauthorised u...

Reply on Twitter 1533832082241331204 Retweet on Twitter 1533832082241331204 25 Like on Twitter 1533832082241331204 66 

3 Jun 1532697355241201665 

#Kubernetes 1.24 update: The volume populators feature is now two releases old and entering beta! 

@BSwartzlander provides so great information about it on the blog ^^

Kubernetes 1.24: Volume Populators Graduate to Beta

Author: Ben Swartzlander (NetApp) The volume populators feature is now two releases old and entering beta! The AnyVo...

Reply on Twitter 1532697355241201665 Retweet on Twitter 1532697355241201665 15 Like on Twitter 1532697355241201665 47 

2 Jun 1532364663937085441 

^^ #ICYMI on the blog, the gRPC probes functionality entered beta in #Kubernetes 1.24 and is available by default.

@SergeyKanzhelev shares insights on the blog ^^ 

Kubernetes 1.24: gRPC container probes in beta

Author: Sergey Kanzhelev (Google) With Kubernetes 1.24 the gRPC probes functionality entered beta and is available by ...

Reply on Twitter 1532364663937085441 Retweet on Twitter 1532364663937085441 15 Like on Twitter 1532364663937085441 32 

1 Jun 1532000416225017858 

Now is a great time to catch up on any #Kubernetes 1.24 content that you missed out on the blog! 

Next up: Volume Expansion is now a stable feature ^^^^ 

Kubernetes 1.24: Volume Expansion Now A Stable Feature

Author: Hemant Kumar (Red Hat) Volume expansion was introduced as a alpha feature in Kubernetes 1.8 and it went ...

Reply on Twitter 1532000416225017858 Retweet on Twitter 1532000416225017858 12 Like on Twitter 1532000416225017858 47 

Subscribe for updates, event info, webinars, and the latest community news

By submitting this form, you acknowledge that your information is subject to The Linux Foundation's Privacy Policy.

+ About Us 
+ Who We Are 
+ Members 
+ Technical Oversight Committee 
+ Governing Board 
+ Ambassadors 
+ 

+ Code of Conduct 
+ Staff 
+ FAQ 
+ Contact Us 

+ Projects 
+ Contribute 
+ Services for CNCF Projects 
+ Cloud Native Landscape 
+ Project Journey Reports 
+ Project Tools 
+ 

+ Graduated 
+ Incubating 
+ Sandbox 
+ Archive 

+ Certification 
+ Certified Kubernetes 
+ KTP 
+ KCSP 
+ CNF 
+ 

+ CKA 
+ CKAD 
+ CKS 
+ KCNA 
+ KCSP 
+ PCA 
+ Courses 

+ Community 
+ End User Community 
+ Events We'll Be At 
+ Case Studies 
+ ^^^^^^^^ 
+ Humans of Cloud Native 
+ 

+ Online Programs 
+ KubeWeekly 
+ Community Groups 
+ Phippy and Friends 
+ Cloud Native Glossary 
+ 

+ Job Board 
+ Slack 
+ Mailing Lists 
+ Store 
+ Calendar 

+ Blog & News 
+ Blog 
+ Announcements 
+ News 
+ Reports 
+ 

+ Project Logos 
+ Videos 
+ Pictures 

Join Now 

+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 

Copyright (c) 2022 The Linux Foundation(R). All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page. Linux is a registered trademark of Linus Torvalds. Privacy Policy and Terms of Use. 


=======asdf78======== Q\Go K8s\$\525750f9876d7650f4a82c4e9e5ac7d4.txt
https://docs.microsoft.com/en-us/azure/aks/draft
TITLE: Draft extension for Azure Kubernetes Service (AKS) (preview) - Azure Kubernetes ...

Draft is an open-source project that streamlines Kubernetes development by taking a non-containerized application and generating the Dockerfiles, Kubernetes manifests, Helm charts, Kustomize configurations, and other artifacts associated with a containerized application. Draft can also create a GitHub Action workflow file to quickly build and deploy applications onto any Kubernetes cluster.

How it works

Draft has the following commands to help ease your development on Kubernetes:

+ draft create: Creates the Dockerfile and the proper manifest files. 
+ draft setup-gh: Sets up your GitHub OIDC. 
+ draft generate-workflow: Generates the GitHub Action workflow file for deployment onto your cluster. 
+ draft up: Sets up your GitHub OIDC and generates a GitHub Action workflow file, combining the previous two commands. 

+ If you don't have an Azure subscription, create a free account before you begin. 
+ Install the latest version of the Azure CLI and the aks-preview extension. 
+ If you don't have one already, you need to create an AKS cluster and an Azure Container Registry instance. 

Install the aks-preview Azure CLI extension

Important

AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:

+ AKS support policies 
+ Azure support FAQ 

# Install the aks-preview extension
az extension add --name aks-preview

# Update the extension to make sure you have the latest version installed
az extension update --name aks-preview

Create artifacts using draft create

To create a Dockerfile, Helm chart, Kubernetes manifest, or Kustomize files needed to deploy your application onto an AKS cluster, use the draft create command:

az aks draft create

You can also run the command on a specific directory using the --destination flag:

az aks draft create --destination /Workspaces/ContosoAir

Set up GitHub OIDC using draft setup-gh

To use Draft, you have to register your application with GitHub using draft setup-gh. This step only needs to be done once per repository.

az aks draft setup-gh

Generate a GitHub Action workflow file for deployment using draft generate-workflow

After you create your artifacts and set up GitHub OIDC, you can generate a GitHub Action workflow file, creating an action that deploys your application onto your AKS cluster. Once your workflow file is generated, you must commit it into your repository in order to initiate the GitHub Action.

az aks draft generate-workflow

You can also run the command on a specific directory using the --destination flag:

az aks draft generate-workflow --destination /Workspaces/ContosoAir

Set up GitHub OpenID Connect (OIDC) and generate a GitHub Action workflow file using draft up

draft up is a single command to accomplish GitHub OIDC setup and generate a GitHub Action workflow file for deployment. It effectively combines the draft setup-gh and draft generate-workflow commands, meaning it's most commonly used when getting started in a new repository for the first time, and only needs to be run once. Subsequent updates to the GitHub Action workflow file can be made using draft generate-workflow.

az aks draft up

You can also run the command on a specific directory using the --destination flag:

az aks draft up --destination /Workspaces/ContosoAir

Use Web Application Routing with Draft to make your application accessible over the internet

Web Application Routing is the easiest way to get your web application up and running in Kubernetes securely, removing the complexity of ingress controllers and certificate and DNS management while offering configuration for enterprises looking to bring their own. Web Application Routing offers a managed ingress controller based on nginx that you can use without restrictions and integrates out of the box with Open Service Mesh to secure intra-cluster communications.


=======asdf79======== Q\Go K8s\$\6dec767e0fceaa05029a47cb4190ab56.txt
https://kubernetes.io/docs/tutorials/
TITLE: Tutorials | Kubernetes

+ What is Kubernetes?
+ Kubernetes Components
+ The Kubernetes API
+ Working with Kubernetes Objects

+ Understanding Kubernetes Objects
+ Kubernetes Object Management
+ Object Names and IDs
+ Namespaces
+ Labels and Selectors
+ Annotations
+ Field Selectors
+ Finalizers
+ Owners and Dependents
+ Recommended Labels

+ Cluster Architecture

+ Nodes
+ Communication between Nodes and the Control Plane
+ Controllers
+ Cloud Controller Manager
+ Container Runtime Interface (CRI)
+ Garbage Collection

+ Containers

+ Images
+ Container Environment
+ Runtime Class
+ Container Lifecycle Hooks

+ Windows in Kubernetes

+ Windows containers in Kubernetes
+ Guide for scheduling Windows containers in Kubernetes

+ Workloads

+ Pods

+ Pod Lifecycle
+ Init Containers
+ Pod Topology Spread Constraints
+ Disruptions
+ Ephemeral Containers
+ Downward API

+ Workload Resources

+ Deployments
+ ReplicaSet
+ StatefulSets
+ DaemonSet
+ Jobs
+ Automatic Clean-up for Finished Jobs
+ CronJob
+ ReplicationController

+ Services, Load Balancing, and Networking

+ Service
+ Topology-aware traffic routing with topology keys
+ DNS for Services and Pods
+ Connecting Applications with Services
+ Ingress
+ Ingress Controllers
+ EndpointSlices
+ Service Internal Traffic Policy
+ Topology Aware Hints
+ Network Policies
+ IPv4/IPv6 dual-stack
+ Networking on Windows

+ Storage

+ Volumes
+ Persistent Volumes
+ Projected Volumes
+ Ephemeral Volumes
+ Storage Classes
+ Dynamic Volume Provisioning
+ Volume Snapshots
+ Volume Snapshot Classes
+ CSI Volume Cloning
+ Storage Capacity
+ Node-specific Volume Limits
+ Volume Health Monitoring
+ Windows Storage

+ Configuration

+ Configuration Best Practices
+ ConfigMaps
+ Secrets
+ Resource Management for Pods and Containers
+ Organizing Cluster Access Using kubeconfig Files
+ Resource Management for Windows nodes

+ Security

+ Overview of Cloud Native Security
+ Pod Security Standards
+ Pod Security Admission
+ Pod Security Policies
+ Security For Windows Nodes
+ Controlling Access to the Kubernetes API
+ Role Based Access Control Good Practices
+ Multi-tenancy

+ Policies

+ Limit Ranges
+ Resource Quotas
+ Process ID Limits And Reservations
+ Node Resource Managers

+ Scheduling, Preemption and Eviction

+ Kubernetes Scheduler
+ Assigning Pods to Nodes
+ Pod Overhead
+ Taints and Tolerations
+ Pod Priority and Preemption
+ Node-pressure Eviction
+ API-initiated Eviction
+ Resource Bin Packing
+ Scheduling Framework
+ Scheduler Performance Tuning

+ Cluster Administration

+ Certificates
+ Managing Resources
+ Cluster Networking
+ Logging Architecture
+ Metrics For Kubernetes System Components
+ System Logs
+ Traces For Kubernetes System Components
+ Proxies in Kubernetes
+ API Priority and Fairness
+ Installing Addons

+ Extending Kubernetes

+ Extending the Kubernetes API

+ Custom Resources
+ Kubernetes API Aggregation Layer

+ Compute, Storage, and Networking Extensions

+ Network Plugins
+ Device Plugins

+ Operator pattern

+ Tasks

+ Install Tools

+ Install and Set Up kubectl on Linux
+ Install and Set Up kubectl on macOS
+ Install and Set Up kubectl on Windows

+ Administer a Cluster

+ Administration with kubeadm

+ Certificate Management with kubeadm
+ Configuring a cgroup driver
+ Reconfiguring a kubeadm cluster
+ Upgrading kubeadm clusters
+ Upgrading Windows nodes

+ Migrating from dockershim

+ Changing the Container Runtime on a Node from Docker Engine to containerd
+ Migrate Docker Engine nodes from dockershim to cri-dockerd
+ Find Out What Container Runtime is Used on a Node
+ Troubleshooting CNI plugin-related errors
+ Check whether dockershim removal affects you
+ Migrating telemetry and security agents from dockershim

+ Generate Certificates Manually
+ Manage Memory, CPU, and API Resources

+ Configure Default Memory Requests and Limits for a Namespace
+ Configure Default CPU Requests and Limits for a Namespace
+ Configure Minimum and Maximum Memory Constraints for a Namespace
+ Configure Minimum and Maximum CPU Constraints for a Namespace
+ Configure Memory and CPU Quotas for a Namespace
+ Configure a Pod Quota for a Namespace

+ Install a Network Policy Provider

+ Use Antrea for NetworkPolicy
+ Use Calico for NetworkPolicy
+ Use Cilium for NetworkPolicy
+ Use Kube-router for NetworkPolicy
+ Romana for NetworkPolicy
+ Weave Net for NetworkPolicy

+ Access Clusters Using the Kubernetes API
+ Advertise Extended Resources for a Node
+ Autoscale the DNS Service in a Cluster
+ Change the default StorageClass
+ Change the Reclaim Policy of a PersistentVolume
+ Cloud Controller Manager Administration
+ Configure Quotas for API Objects
+ Control CPU Management Policies on the Node
+ Control Topology Management Policies on a node
+ Customizing DNS Service
+ Debugging DNS Resolution
+ Declare Network Policy
+ Developing Cloud Controller Manager
+ Enable Or Disable A Kubernetes API
+ Enabling Service Topology
+ Encrypting Secret Data at Rest
+ Guaranteed Scheduling For Critical Add-On Pods
+ IP Masquerade Agent User Guide
+ Limit Storage Consumption
+ Migrate Replicated Control Plane To Use Cloud Controller Manager
+ Namespaces Walkthrough
+ Operating etcd clusters for Kubernetes
+ Reconfigure a Node's Kubelet in a Live Cluster
+ Reserve Compute Resources for System Daemons
+ Running Kubernetes Node Components as a Non-root User
+ Safely Drain a Node
+ Securing a Cluster
+ Set Kubelet parameters via a config file
+ Share a Cluster with Namespaces
+ Upgrade A Cluster
+ Use Cascading Deletion in a Cluster
+ Using a KMS provider for data encryption
+ Using CoreDNS for Service Discovery
+ Using NodeLocal DNSCache in Kubernetes clusters
+ Using sysctls in a Kubernetes Cluster
+ Utilizing the NUMA-aware Memory Manager
+ Verify Signed Container Images

+ Configure Pods and Containers

+ Assign Memory Resources to Containers and Pods
+ Assign CPU Resources to Containers and Pods
+ Configure GMSA for Windows Pods and containers
+ Configure RunAsUserName for Windows pods and containers
+ Create a Windows HostProcess Pod
+ Configure Quality of Service for Pods
+ Assign Extended Resources to a Container
+ Configure a Pod to Use a Volume for Storage
+ Configure a Pod to Use a PersistentVolume for Storage
+ Configure a Pod to Use a Projected Volume for Storage
+ Configure a Security Context for a Pod or Container
+ Configure Service Accounts for Pods
+ Pull an Image from a Private Registry
+ Configure Liveness, Readiness and Startup Probes
+ Assign Pods to Nodes
+ Assign Pods to Nodes using Node Affinity
+ Configure Pod Initialization
+ Attach Handlers to Container Lifecycle Events
+ Configure a Pod to Use a ConfigMap
+ Share Process Namespace between Containers in a Pod
+ Create static Pods
+ Translate a Docker Compose File to Kubernetes Resources
+ Enforce Pod Security Standards by Configuring the Built-in Admission Controller
+ Enforce Pod Security Standards with Namespace Labels
+ Migrate from PodSecurityPolicy to the Built-In PodSecurity Admission Controller

+ Monitoring, Logging, and Debugging

+ Troubleshooting Applications

+ Debug Pods
+ Debug Services
+ Debug a StatefulSet
+ Debug Init Containers
+ Debug Running Pods
+ Determine the Reason for Pod Failure
+ Get a Shell to a Running Container

+ Troubleshooting Clusters

+ Resource metrics pipeline
+ Tools for Monitoring Resources
+ Monitor Node Health
+ Debugging Kubernetes nodes with crictl
+ Auditing
+ Developing and debugging services locally using telepresence
+ Windows debugging tips

+ Manage Kubernetes Objects

+ Declarative Management of Kubernetes Objects Using Configuration Files
+ Declarative Management of Kubernetes Objects Using Kustomize
+ Managing Kubernetes Objects Using Imperative Commands
+ Imperative Management of Kubernetes Objects Using Configuration Files
+ Update API Objects in Place Using kubectl patch

+ Managing Secrets

+ Managing Secrets using kubectl
+ Managing Secrets using Configuration File
+ Managing Secrets using Kustomize

+ Inject Data Into Applications

+ Define a Command and Arguments for a Container
+ Define Dependent Environment Variables
+ Define Environment Variables for a Container
+ Expose Pod Information to Containers Through Environment Variables
+ Expose Pod Information to Containers Through Files
+ Distribute Credentials Securely Using Secrets

+ Run Applications

+ Run a Stateless Application Using a Deployment
+ Run a Single-Instance Stateful Application
+ Run a Replicated Stateful Application
+ Scale a StatefulSet
+ Delete a StatefulSet
+ Force Delete StatefulSet Pods
+ Horizontal Pod Autoscaling
+ HorizontalPodAutoscaler Walkthrough
+ Specifying a Disruption Budget for your Application
+ Accessing the Kubernetes API from a Pod

+ Run Jobs

+ Running Automated Tasks with a CronJob
+ Coarse Parallel Processing Using a Work Queue
+ Fine Parallel Processing Using a Work Queue
+ Indexed Job for Parallel Processing with Static Work Assignment
+ Parallel Processing using Expansions

+ Access Applications in a Cluster

+ Deploy and Access the Kubernetes Dashboard
+ Accessing Clusters
+ Configure Access to Multiple Clusters
+ Use Port Forwarding to Access Applications in a Cluster
+ Use a Service to Access an Application in a Cluster
+ Connect a Frontend to a Backend Using Services
+ Create an External Load Balancer
+ List All Container Images Running in a Cluster
+ Set up Ingress on Minikube with the NGINX Ingress Controller
+ Communicate Between Containers in the Same Pod Using a Shared Volume
+ Configure DNS for a Cluster
+ Access Services Running on Clusters

+ Extend Kubernetes

+ Configure the Aggregation Layer
+ Use Custom Resources

+ Extend the Kubernetes API with CustomResourceDefinitions
+ Versions in CustomResourceDefinitions

+ Set up an Extension API Server
+ Configure Multiple Schedulers
+ Use an HTTP Proxy to Access the Kubernetes API
+ Use a SOCKS5 Proxy to Access the Kubernetes API
+ Set up Konnectivity service

+ TLS

+ Configure Certificate Rotation for the Kubelet
+ Manage TLS Certificates in a Cluster
+ Manual Rotation of CA Certificates

+ Manage Cluster Daemons

+ Perform a Rolling Update on a DaemonSet
+ Perform a Rollback on a DaemonSet

+ Networking

+ Adding entries to Pod /etc/hosts with HostAliases
+ Validate IPv4/IPv6 dual-stack

+ Configure a kubelet image credential provider
+ Extend kubectl with plugins
+ Manage HugePages
+ Schedule GPUs

+ Hello Minikube
+ Learn Kubernetes Basics

+ Create a Cluster

+ Using Minikube to Create a Cluster
+ Interactive Tutorial - Creating a Cluster

+ Deploy an App

+ Using kubectl to Create a Deployment
+ Interactive Tutorial - Deploying an App

+ Explore Your App

+ Viewing Pods and Nodes
+ Interactive Tutorial - Exploring Your App

+ Expose Your App Publicly

+ Using a Service to Expose Your App
+ Interactive Tutorial - Exposing Your App

+ Scale Your App

+ Running Multiple Instances of Your App
+ Interactive Tutorial - Scaling Your App

+ Update Your App

+ Performing a Rolling Update
+ Interactive Tutorial - Updating Your App

+ Configuration

+ Example: Configuring a Java Microservice

+ Externalizing config using MicroProfile, ConfigMaps and Secrets
+ Interactive Tutorial - Configuring a Java Microservice

+ Configuring Redis using a ConfigMap

+ Security

+ Apply Pod Security Standards at the Cluster Level
+ Apply Pod Security Standards at the Namespace Level
+ Restrict a Container's Access to Resources with AppArmor
+ Restrict a Container's Syscalls with seccomp

+ Stateless Applications

+ Exposing an External IP Address to Access an Application in a Cluster
+ Example: Deploying PHP Guestbook application with Redis

+ Stateful Applications

+ StatefulSet Basics
+ Example: Deploying WordPress and MySQL with Persistent Volumes
+ Example: Deploying Cassandra with a StatefulSet
+ Running ZooKeeper, A Distributed System Coordinator

+ Services

+ Using Source IP

+ Reference

+ Glossary
+ API Overview

+ Kubernetes API Concepts
+ Server-Side Apply
+ Client Libraries
+ Kubernetes Deprecation Policy
+ Deprecated API Migration Guide
+ Kubernetes API health endpoints

+ API Access Control

+ Authenticating
+ Authenticating with Bootstrap Tokens
+ Certificate Signing Requests
+ Using Admission Controllers
+ Dynamic Admission Control
+ Managing Service Accounts
+ Authorization Overview
+ Using RBAC Authorization
+ Using ABAC Authorization
+ Using Node Authorization
+ Mapping PodSecurityPolicies to Pod Security Standards
+ Webhook Mode
+ Kubelet authentication/authorization
+ TLS bootstrapping

+ Well-Known Labels, Annotations and Taints

+ Audit Annotations

+ Kubernetes API

+ Workload Resources

+ Pod
+ PodTemplate
+ ReplicationController
+ ReplicaSet
+ Deployment
+ StatefulSet
+ ControllerRevision
+ DaemonSet
+ Job
+ CronJob
+ HorizontalPodAutoscaler
+ HorizontalPodAutoscaler
+ HorizontalPodAutoscaler v2beta2
+ PriorityClass

+ Service Resources

+ Service
+ Endpoints
+ EndpointSlice
+ Ingress
+ IngressClass

+ Config and Storage Resources

+ ConfigMap
+ Secret
+ Volume
+ PersistentVolumeClaim
+ PersistentVolume
+ StorageClass
+ VolumeAttachment
+ CSIDriver
+ CSINode
+ CSIStorageCapacity

+ Authentication Resources

+ ServiceAccount
+ TokenRequest
+ TokenReview
+ CertificateSigningRequest

+ Authorization Resources

+ LocalSubjectAccessReview
+ SelfSubjectAccessReview
+ SelfSubjectRulesReview
+ SubjectAccessReview
+ ClusterRole
+ ClusterRoleBinding
+ Role
+ RoleBinding

+ Policy Resources

+ LimitRange
+ ResourceQuota
+ NetworkPolicy
+ PodDisruptionBudget
+ PodSecurityPolicy v1beta1

+ Extend Resources

+ CustomResourceDefinition
+ MutatingWebhookConfiguration
+ ValidatingWebhookConfiguration

+ Cluster Resources

+ Node
+ Namespace
+ Event
+ APIService
+ Lease
+ RuntimeClass
+ FlowSchema v1beta2
+ PriorityLevelConfiguration v1beta2
+ Binding
+ ComponentStatus

+ Common Definitions

+ DeleteOptions
+ LabelSelector
+ ListMeta
+ LocalObjectReference
+ NodeSelectorRequirement
+ ObjectFieldSelector
+ ObjectMeta
+ ObjectReference
+ Patch
+ Quantity
+ ResourceFieldSelector
+ Status
+ TypedLocalObjectReference

+ Common Parameters

+ Kubernetes Issues and Security

+ Kubernetes Issue Tracker
+ Kubernetes Security and Disclosure Information

+ Node Reference Information

+ Articles on dockershim Removal and on Using CRI-compatible Runtimes

+ Ports and Protocols
+ Setup tools

+ Kubeadm

+ kubeadm init
+ kubeadm join
+ kubeadm upgrade
+ kubeadm config
+ kubeadm reset
+ kubeadm token
+ kubeadm version
+ kubeadm alpha
+ kubeadm certs
+ kubeadm init phase
+ kubeadm join phase
+ kubeadm kubeconfig
+ kubeadm reset phase
+ kubeadm upgrade phase
+ Implementation details

+ Command line tool (kubectl)

+ kubectl Cheat Sheet
+ kubectl Commands
+ kubectl
+ JSONPath Support
+ kubectl for Docker Users
+ kubectl Usage Conventions

+ Component tools

+ Feature Gates
+ kubelet
+ kube-apiserver
+ kube-controller-manager
+ kube-proxy
+ kube-scheduler

+ Configuration APIs

+ Client Authentication (v1)
+ Client Authentication (v1beta1)
+ Event Rate Limit Configuration (v1alpha1)
+ Image Policy API (v1alpha1)
+ kube-apiserver Audit Configuration (v1)
+ kube-apiserver Configuration (v1)
+ kube-apiserver Configuration (v1alpha1)
+ kube-apiserver Encryption Configuration (v1)
+ kube-proxy Configuration (v1alpha1)
+ kube-scheduler Configuration (v1beta2)
+ kube-scheduler Configuration (v1beta3)
+ kubeadm Configuration (v1beta2)
+ kubeadm Configuration (v1beta3)
+ Kubelet Configuration (v1alpha1)
+ Kubelet Configuration (v1beta1)
+ Kubelet CredentialProvider (v1alpha1)
+ Kubelet CredentialProvider (v1beta1)
+ WebhookAdmission Configuration (v1)

+ Scheduling

+ Scheduler Configuration
+ Scheduling Policies

+ Other Tools

+ Mapping from dockercli to crictl

+ Contribute

+ Suggesting content improvements
+ Contributing new content

+ Opening a pull request
+ Documenting for a release
+ Blogs and case studies

+ Reviewing changes

+ Reviewing pull requests
+ For approvers and reviewers

+ Localizing Kubernetes documentation
+ Participating in SIG Docs

+ Roles and responsibilities
+ PR wranglers

+ Documentation style overview

+ Content guide
+ Style guide
+ Diagram guide
+ Writing a new topic
+ Page content types
+ Content organization
+ Custom Hugo Shortcodes

+ Reference Docs Overview

+ Contributing to the Upstream Kubernetes Code
+ Quickstart
+ Generating Reference Documentation for the Kubernetes API
+ Generating Reference Documentation for kubectl Commands
+ Generating Reference Pages for Kubernetes Components and Tools
+ 

+ Advanced contributing
+ Viewing Site Analytics

+ Docs smoke test page

+ Kubernetes Documentation
+ Tutorials

This section of the Kubernetes documentation contains tutorials. A tutorial shows how to accomplish a goal that is larger than a single task. Typically a tutorial has several sections, each of which has a sequence of steps. Before walking through each tutorial, you may want to bookmark the Standardized Glossary page for later references.

Basics

Kubernetes Basics is an in-depth interactive tutorial that helps you understand the Kubernetes system and try out some basic Kubernetes features.

Introduction to Kubernetes (edX)

Hello Minikube

Configuration

Example: Configuring a Java Microservice

Configuring Redis Using a ConfigMap

Stateless Applications

Exposing an External IP Address to Access an Application in a Cluster

Example: Deploying PHP Guestbook application with Redis

Stateful Applications

StatefulSet Basics

Example: WordPress and MySQL with Persistent Volumes

Example: Deploying Cassandra with Stateful Sets

Running ZooKeeper, A CP Distributed System

+ Using Source IP

Security

+ Apply Pod Security Standards at Cluster level
+ Apply Pod Security Standards at Namespace level
+ AppArmor
+ seccomp

What's next

If you would like to write a tutorial, see Content Page Types for information about the tutorial page type.

Was this page helpful?

Yes No

Thanks for the feedback. If you have a specific, answerable question about how to use Kubernetes, ask it on Stack Overflow. Open an issue in the GitHub repo if you want to report a problem or suggest an improvement.

Last modified December 17, 2021 at 7:44 PM PST: Merge the tutorials under tutorials->clusters into tutorials->security (ec94e69c4e)

Edit this page Create child page Create an issue Print entire section

+ Basics
+ Configuration
+ Stateless Applications
+ Stateful Applications
+ Services
+ Security
+ What's next

Home Blog Training Partners Community Case Studies

(c) 2022 The Kubernetes Authors | Documentation Distributed under CC BY 4.0
Copyright (c) 2022 The Linux Foundation (R). All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page
ICP license: ^ICP^17074266^-3


=======asdf80======== Q\Go K8s\$\e354955846f3ccdfecfae040fdd766f1.txt
https://www.tutorialspoint.com/go/index.htm
TITLE: Go Tutorial

Go language is a programming language initially developed at Google in the year 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It is a statically-typed language having syntax similar to that of C. It provides garbage collection, type safety, dynamic-typing capability, many advanced built-in types such as variable length arrays and key-value maps. It also provides a rich standard library. The Go programming language was launched in November 2009 and is used in some of the Google's production systems.

Audience

This tutorial is designed for software programmers with a need to understand the Go programming language from scratch. This tutorial will give you enough understanding on Go programming language from where you can take yourself to higher levels of expertise.

Before proceeding with this tutorial, you should have a basic understanding of computer programming terminologies. If you have a good command over C, then it would be quite easy for you to understand the concepts of Go programming and move fast on the learning track.

Previous Page Print Page Next Page 

Advertisements

+ About us 
+ Refund Policy 
+ Terms of use 
+ Privacy Policy 
+ FAQ's 
+ Contact 

(c) Copyright 2022. All Rights Reserved.

We make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy. Agree Learn more


=======asdf81======== Q\Go K8s\$\56c9fd9a1e2d81a53be96cf1c8f58936.txt
https://www.onlinegdb.com/online_go_compiler
TITLE: Online Go Lang Compiler - online editor

/****************************************************************************** Online Go Lang Compiler. Code, Compile, Run and Debug Go Lang program online. Write your code in this editor and press "Run" button to execute it. *******************************************************************************/ package main import "fmt" func main() { fmt.Println("Hello World") } 

Compiling Program...

+ input 
+ stdout 
+ stderr 
+ Debug Console 

Command line arguments: 

Standard Input: Interactive Console Text

Program is not being debugged. Click "Debug" button to start program in debug mode. 

start pause continue step over step into step out help 

Call Stack 

{#}{Function}{File:Line}

Local Variables 

{Variable}{Value}

Registers 

{Register}{Value}

Display Expressions 

{Expression}{Value}{}

Breakpoints and Watchpoints 

{}{#}{Description}{}

Possible reasons for Runtime Exceed error

+ If your program is reading input from standard input and you forgot to provide input via stdin. 
+ Your program contains infinite loop, which may never break. 
+ Your program contains infinite recursive function calls. 
+ May be your program is trying to process large data and it takes much time to process 

ok 

Ok 

New Version Available

New Version of OnlineGDB is available. Please save your data and refresh page to update. 

Ok 

Running Turbo C Project

Save Project

Name of Project: 

Save </form> 

Extra Compiler Flags

Ok </form> 

Are you sure you want to delete file ``?

Yes No 

Yes No 

New File

Name of new file: 

ok </form> 

Rename File

Name: 

ok cancel </form> 

Share Link

source code is copied to below link. 

Lost connection to server

Oops! Connection to server is lost. Please refresh the page to reconnect.

ok 

Debug session stopped

Debug session is being stopped due to inactivity.

ok 

Debug mode for python program is not yet supported.

ok 

Login to your account

Login with 

Google+ 

Facebook 

Github 

Run Console session stopped

Run Console is being stopped due to inactivity.


=======asdf82======== Q\Go K8s\$\8fd1d2eb84adfc4fad64c1028fc6fc06.txt
https://www.tutorialspoint.com/kubernetes/index.htm
TITLE: Kubernetes Tutorial

Kubernetes is a container management technology developed in Google lab to manage containerized applications in different kind of environments such as physical, virtual, and cloud infrastructure. It is an open source system which helps in creating and managing containerization of application. This tutorial provides an overview of different kind of features and functionalities of Kubernetes and teaches how to manage the containerized infrastructure and application deployment.

Audience

This tutorial has been prepared for those who want to understand the containerized infrastructure and deployment of application on containers. This tutorial will help in understanding the concepts of container management using Kubernetes.

We assume anyone who wants to understand Kubernetes should have an understating of how the Docker works, how the Docker images are created, and how they work as a standalone unit. To reach to an advanced configuration in Kubernetes one should understand basic networking and how the protocol communication works.

Previous Page Print Page Next Page 

Advertisements

+ About us 
+ Refund Policy 
+ Terms of use 
+ Privacy Policy 
+ FAQ's 
+ Contact 

(c) Copyright 2022. All Rights Reserved.

We make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy. Agree Learn more


=======asdf83======== Q\Go K8s\$\1efd341a6859620cc566df7e431b3d73.txt
https://play.golang.com/
TITLE: The Go Playground

The Go Playground is a web service that runs on golang.org's servers. The service receives a Go program, vets, compiles, links, and runs the program inside a sandbox, then returns the output. 

If the program contains tests or examples and no main function, the service runs the tests. Benchmarks will likely not be supported since the program runs in a sandboxed environment with limited resources. 

There are limitations to the programs that can be run in the playground: 

+ The playground can use most of the standard library, with some exceptions. The only communication a playground program has to the outside world is by writing to standard output and standard error. 
+ In the playground the time begins at 2009-11-10 23:00:00 UTC (determining the significance of this date is an exercise for the reader). This makes it easier to cache programs by giving them deterministic output. 
+ There are also limits on execution time and on CPU and memory usage. 

The article "Inside the Go Playground" describes how the playground is implemented. The source code is available at https://go.googlesource.com/playground. 

The playground uses the latest stable release of Go.
The current version is go1.18.3. 

The playground service is used by more than just the official Go project (Go by Example is one other instance) and we are happy for you to use it on your own site. All we ask is that you contact us first (note this is a public mailing list), use a unique user agent in your requests (so we can identify you), and that your service is of benefit to the Go community. 

Any requests for content removal should be directed to security@golang.org. Please include the URL and the reason for the request.


=======asdf84======== Q\Go K8s\$\b636b68dad5cab09b16bc34b645797a0.txt
https://www.geeksforgeeks.org/golang/

Golang is a procedural and statically typed programming language having the syntax similar to C programming language. Sometimes it is termed as Go Programming Language. It provides a rich standard library, garbage collection, and dynamic-typing capability. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google but launched in 2009 as an open-source programming language and mainly used in Google's production systems. Golang is one of the most trending programming languages among developers.

Recent Articles on Golang!

Overview, Fundamentals, Control Flow, Functions and Methods, Structure, Arrays & Slices, String, Pointers, Interfaces, Concurrency

+ Introduction to Golang
+ Installing Golang on Windows
+ Installing Golang on MacOS
+ Hello World! in Golang
+ Golang vs C++
+ Golang vs Java
+ Golang vs Python

+ Identifiers in Golang
+ Keywords in Golang
+ Data Types
+ Variables
+ Constants
+ Rune in Golang
+ Operators in Golang
+ Scope of Variables
+ Type Casting
+ var Keyword in Golang
+ Short Declaration Operator(:=)
+ var keyword vs short declaration operator

+ Decision Making Statements
+ Loops in Golang
+ Loop Control Statements
+ Switch Statement in Go
+ Deadlock and Default Case in Select Statement

+ What are the Functions?
+ Variadic Function
+ Anonymous Function
+ main and init function
+ Function Arguments
+ Function Returning Multiple Values
+ Named Return Values
+ Blank Identifier
+ Defer
+ Methods
+ Methods With Same Name

+ Structures
+ Structure Equality
+ Nested Structure
+ Anonymous Structure and Fields
+ Promoted Fields in Structure
+ Promoted Methods in Structure
+ Function as a Field in Structure

Arrays & Slices

+ Arrays in Golang
+ Copying an Array into Another Array in Golang
+ Passing an Array to a Function in Golang
+ Slices in Golang
+ Slice Composite Literal
+ Copying one Slice into another Slice
+ Passing a Slice to Function
+ Comparing two Slices in Golang
+ Checking the Equality of Slices in Golang
+ Sorting a Slice in Golang
+ Trimming a Slice in Golang
+ Splitting a Slice in Golang

String

+ Strings in Golang
+ Different ways to compare Strings
+ Different ways to concatenate two strings
+ Trimming a String in Golang
+ Splitting a String in Golang
+ Check if the given characters are present in String
+ Repeating a String for Specific Number of Times
+ Finding the index value of specified string
+ Counting the Number of Repeated Characters in String

+ Pointers
+ Pointer to Pointer (Double Pointer)
+ Pointers to a Function
+ Returning Pointer from a Function
+ Pointer to an Array as Function Argument
+ Pointer to Struct
+ Comparing Pointers
+ Finding the Capacity of the Pointer
+ Finding the Length of the Pointer

Interfaces

+ Interfaces
+ Multiple Interfaces
+ Embedding Interfaces
+ Polymorphism Using Interfaces

+ Goroutines - Concurrency
+ Select Statement
+ Multiple Goroutines
+ Goroutine vs Thread
+ Channel in Golang
+ Unidirectional Channel in Golang

Most Popular Articles

+ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...
+ Must Do Coding Questions for Product Based Companies
+ Top 10 Programming Languages to Learn in 2022
+ Naming Convention in C++
+ How to add icons in the button in HTML ?

Most Visited Articles

+ Floyd's Cycle Finding Algorithm
+ How to use arrays to swap variables in JavaScript ?
+ Windows Memory Management
+ Converting an image to a Torch Tensor in Python
+ What is Data Encryption?


=======asdf85======== Q\Go K8s\$\97e8974b62ecc1f9835b45add857a2e8.txt
https://www.computerhope.com/jargon/g/golang.htm
TITLE: What is Go?

Go's three lead developers at Google were Robert Griesemer, Rob Pike, and Ken Thompson. Their goal was to create a language, loosely based on the syntax of C, which would eliminate the "extraneous garbage" of languages such as C++. As a result, Go does not include some "extraneous" features of other modern languages, such as method and operator overloading, pointer arithmetic, and type inheritance.

Go has some specific formatting requirements, including how indentation and spaces are used. It also requires that none of the declared variables or imported libraries are unused. All functions in Go require a return statement.

Go uses "type inference" in variable declarations: the variable type is inferred by the value type itself, rather than being an explicit part of the declaration statement. For example, where in C an integer variable x could be set to the value 0 with the statement:

int x = 0;

In Go, the equivalent statement would be:

x := 0

The variable would be typed as an integer based on the value itself.


=======asdf86======== Q\Go K8s\$\0051e193b6d1bfe0b373c417bf02d42e.txt
https://www.includehelp.com/golang/assignment-operators.aspx
TITLE:  Golang Assignment Operators 

Here, we are going to learn about the Assignment Operators in the Go programming language with examples.
Submitted by IncludeHelp, on December 08, 2021 

Assignment Operators

Assignment operators are used for assigning the expressions or values to the variable/ constant etc. These operators assign the result of the right-side expression to the left-side variable or constant. The "=" is an assignment operator. Assignment operators can also be the combinations of some other operators (+, -, *, /, %, etc.) and "=". Such operators are known as compound assignment operators.

List of Golang Assignment Operators

{Operator} {Description} {Example
x:=5
y:=3} 

{Assignment (=)} {It assigns the result of the expression written on the right side to the variable written on the left side.} {x = 10 or x = y+10 or x = x+5, etc.} 

{Add and Assignment (+=)} {It is the combination of '+' and '=' operators, it adds the given value with the current value of the variable and assigns it to the variable.} {x +=y is equivalent to x = x+y} 

{Subtract and Assignment (-=)} {It is the combination of '-' and '=' operators, it subtracts the given value with the current value of the variable and assigns it to the variable.} {x -=y is equivalent to x = x-y} 

{Multiply and Assignment (*=)} {It is the combination of '*' and '=' operators, it multiplies the given value with the current value of the variable and assigns it to the variable.} {x *=y is equivalent to x = x*y} 

{Divide and Assignment (/=)} {It is the combination of '/' and '=' operators, it divides the given value with the current value of the variable and assigns it to the variable.} {x /=y is equivalent to x = x/y} 

{Modulus and Assignment (%=)} {It is the combination of '%' and '=' operators, it finds the remainder of the current value of the variable with the given value and assigns it to the variable.} {x %=y is equivalent to x = x%y} 

{Bitwise AND Assignment (&=)} {It is the combination of '&' and '=' operators, it performs the Bitwise AND operation with the current value of the variable and the given value and assigns the result to the variable.} {x &=y is equivalent to x = x&y} 

{Bitwise OR Assignment (|=)} {It is the combination of '|' and '=' operators, it performs the Bitwise OR operation with the current value of the variable and the given value and assigns the result to the variable.} {x |=y is equivalent to x = x|y} 

{Bitwise XOR Assignment (^=) } {It is the combination of '^' and '=' operators, it performs the Bitwise XOR operation with the current value of the variable and the given value and assigns the result to the variable.} {x ^=y is equivalent to x = x^y} 

{Bitwise Left Shift Assignment (<<=)} {It is the combination of '<<' and '=' operators, it performs the Bitwise Left-shift operation with the current value of the variable and the given value and assigns the result to the variable.} {x <<=y is equivalent to x = x<<y} 

{Bitwise Right Shift Assignment (>>=)} {It is the combination of '>>' and '=' operators, it performs the Bitwise Left-shift operation with the current value of the variable and the given value and assigns the result to the variable.} {x >>=y is equivalent to x = x>>y} 

Example of Golang Assignment Operators

The below Golang program is demonstrating the example of assignment operators.

// Golang program demonstrate the
// example of assignment operators

func main() {
x := 5
y := 3

x += y
fmt.Println("x:", x)

x -= y
fmt.Println("x:", x)

x *= y
fmt.Println("x:", x)

x /= y
fmt.Println("x:", x)

x %= y
fmt.Println("x:", x)

x &= y
fmt.Println("x:", x)

x |= y
fmt.Println("x:", x)

x <<= y
fmt.Println("x:", x)

x >>= y
fmt.Println("x:", x)
}

x: 8
x: 5
x: 15
x: 5
x: 2
x: 2
x: 3
x: 24
x: 3

Golang - Bitwise Operators 

Golang - Miscellaneous Operators 

Preparation

Aptitude Questions MCQs Find Output Programs 

+ C Language MCQs 
+ Python MCQs 
+ Perl MCQs 
+ MongoDB MCQs 
+ Java MCQs 
+ C# MCQs 
+ Scala MCQs 
+ Blockchain MCQs 
+ AutoCAD MCQs 
+ PHP MCQs 
+ JavaScript MCQs 
+ jQuery MCQs 
+ ReactJS MCQs 
+ AngularJS MCQs 
+ JSON MCQs 
+ Ajax MCQs 
+ SASS MCQs 
+ HTML MCQs 
+ Advanced CSS MCQs 
+ CSS MCQs 
+ PL/SQL MCQs 
+ SQL MCQs 
+ MS Word MCQs 
+ PL/SQL MCQs 
+ SQL MCQs 
+ Software Engineering MCQs 
+ Data Analytics and Visualization MCQs 
+ MIS MCQs 
+ Linux MCQs 
+ WordPress MCQs 
+ Blogging MCQs 

+ Generally Accepted Accounting Principles MCQs 
+ Bills of Exchange MCQs 
+ Business Environment MCQs 
+ Sustainable Development MCQs 
+ Marginal Costing and Absorption Costing MCQs 
+ Globalisation MCQs 
+ Indian Economy MCQs 
+ Retained Earnings MCQs 
+ Depreciation MCQs 
+ Partnership MCQs 
+ Sole Proprietorship MCQs 
+ Goods and Services Tax (GST) MCQs 
+ Cooperative Society MCQs 
+ Capital Market MCQs 
+ Business Studies MCQs 
+ Basic Accounting MCQs 
+ MIS Executive Interview Questions 
+ Go Language Interview Questions 

Top Interview Coding Problems/Challenges! 

+ Run-length encoding (find/print frequency of letters in a string) 
+ Sort an array of 0's, 1's and 2's in linear time complexity 
+ Checking Anagrams (check whether two string is anagrams or not) 
+ Relative sorting algorithm 
+ Finding subarray with given sum 
+ Find the level in a binary tree with given sum K 
+ Check whether a Binary Tree is BST (Binary Search Tree) or not 
+ 1[0]1 Pattern Count 
+ Capitalize first and last letter of each word in a line 
+ Print vertical sum of a binary tree 
+ Print Boundary Sum of a Binary Tree 
+ Reverse a single linked list 
+ Greedy Strategy to solve major algorithm problems 
+ Job sequencing problem 
+ Root to leaf Path Sum 
+ Exit Point in a Matrix 
+ Find length of loop in a linked list 
+ Toppers of Class 
+ Print All Nodes that don't have Sibling 
+ Transform to Sum Tree 
+ Shortest Source to Destination Path 

Comments and Discussions!


=======asdf87======== Q\Go K8s\$\dd58ef7c2ed559ca0bf60f7833a008ad.txt
http://www.msn.com/
TITLE: MSN | Outlook, Office, Skype, Bing, Breaking News, and Latest Videos

You are using an older browser version. Please use a supported version for the best MSN experience. 

79degreeF

New Braunfels, Texas Today, Partly cloudy High 99degree Low 76degree 

Change 

Close 

Set Default Location

Display Temperature In

Fahrenheit 

Celsius 

Done 

TRENDING NOW

+ COVID-19 tracker 
+ Latest news 

+ Fact check 
+ Latest NFL news 

Today

+ Denmark: Gunman acted alone, likely not terror-related 
+ After Roe, high stakes for Michigan ballot measure to protect abortion rights 
+ Russian missile strike in shopping mall called 'terrorist attack,' 'war crime': June 27 recap 
+ 'Hell on earth': Ukrainian soldiers describe eastern front 
+ No indication Danish mall shooting was 'act of terror' - police 

Entertainment

+ Tom Cruise Turns 60: From 'Top Gun' to 'Magnolia,' His 15 Best Performances 
+ 55 Celebrities Who Don't Drink Alcohol 
+ 'The Terminal List' Cast & Character Guide (Photos) 
+ Tom Cruise on Top Gun's Most Famous Catchphrase-and the Surprising Place He's Never Heard it Quoted 
+ Blood & Treasure Season 2 Photos: More Globe-Trotting and Badassery on Tap as Series Moves to Paramount+ 

From Our Partners

+ Sponsored: 85% of Americans Don't Know What Country This Is 

Money

+ Industry Season 2 Trailer Dives Back Into Cutthroat World of High-Finance 
+ Incoming Philippines finance secretary wants to put his country back on a growth track 
+ Colombia's Petro picks Jose Antonio Ocampo as finance minister 
+ Ex-Giuliani Associate Parnas Sentenced To 20 Months In Prison For Fraud And Campaign Finance Violations 
+ Ex-Giuliani associate sentenced to 20 months for campaign finance violations, fraud 

Sports

+ 2022 USFL championship game: Birmingham Stallions vs. Philadelphia Stars 
+ Ryan Lochte auctioning off silver, bronze Olympics medals for charity 
+ Blue Jays' First Base Coach Steps Away From Team After Daughter's Death 
+ Nationals vs. Marlins odds, line: 2022 MLB picks, July 4 predictions from proven baseball model 
+ The best Stanley Cup Final games of all time 

Esports

+ Crown 2 
+ Knotwords Daily Classic answer (July 4) - What is today's Knotwords solution? 
+ The best Nvidia filter for third-party CSGO matchmaking 
+ Steve takes another Super Smash Bros. Ultimate victory with Onin winning Get On My Level 
+ Apex Legends Predators Believe Mad Maggie is 'Insane' Despite Low Pick Rate 

Shopping

+ This 'Must-Have' $14 Fabric Shaver With Over 93,000 Amazon Reviews Is Said To Easily Remove Fuzz & Lint 
+ Amazon Is Your One-Stop Shop for Spot-On Wedding Decor - We're Serious 
+ All the best 4th of July deals you can shop right now, including discounts at Backcountry, Best Buy, and West Elm 
+ Amazon Just Dropped a Secret Sale on Inflatable Pools Just in Time for Summer 
+ 9 Best Fitness Trackers That Do So Much More Than Count Steps 

Lifestyle

+ The Most Expensive Theme Parks in the USA 
+ This Common Spice Will Prevent Your Plants from Dying 
+ Want to Raise Successful Kids? Science Says These 5 Habits Matter Big-Time 
+ 16 Small Towns You Should Visit This Summer 
+ Umabel Guardian Angel Blesses His Proteges With Kindness 

News

+ US drag queens stand their ground amid intimidation by the far right 
+ Rush toward green energy has left US 'incredibly' vulnerable to summer blackouts, expert warns 
+ 'A new race of men' 
+ Ohio police release graphic bodycam video in fatal shooting of Jayland Walker 
+ Sri Lanka warns petrol stocks about to run dry 

Health & Fitness

+ Revive and Strengthen Achy Feet in Seconds by Walking on These Spiky Balls 
+ Travis Barker tells fans he's 'currently doing much better' after being hospitalized for 'severe life-threatening pancreatitis' 
+ These Coffee Beans Will Give You The Most Flavorful At-Home Cup Of Coffee 
+ These Protective Workout Gloves Safeguard Your Skin at the Gym 
+ The 10 Best Protein Supplements That Aren't Powder 

Autos

+ In search of a new vehicle? Discover great deals near you 
+ Stunt Driver Dies in Jet Truck Crash at Air Show 
+ The most American new cars of all 
+ American Automotive Muscle - Born in the USA 
+ 2023 Thor Miramar Luxury RV Is Ready For Summer With Theater Seating 


=======asdf88======== Q\Go K8s\$\3deba27777b964bf688cde67ff87e0e3.txt
https://docs.microsoft.com/en-us/learn/modules/intro-to-kubernetes/
TITLE: Introduction to Kubernetes - Learn | Microsoft Docs

Determine the types of business problems that you can solve by using Kubernetes. Describe the benefits of container orchestration with features like deployment management, automatic updates, and self-healing.


=======asdf89======== Q\Go K8s\$\b6f82ec7d83fd5aae72317254753b551.txt
https://go.dev/dl/
TITLE: Downloads - The Go Programming Language

As of Go 1.13, the go command by default downloads and authenticates modules using the Go module mirror and Go checksum database run by Google. See https://proxy.golang.org/privacy for privacy information about these services and the go command documentation for configuration details including how to disable the use of these servers or use different ones. 


=======asdf90======== Q\Go K8s\$\a6a11f3f3e789f4f9db9e547490f088d.txt
https://www.kubernetes.org.cn/k8s
TITLE: Kubernetes^k8s^^^^^ Kubernetes^^_Kubernetes^^^^

